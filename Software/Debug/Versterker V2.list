
Versterker V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e00  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  08006ec0  08006ec0  00016ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070a0  080070a0  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  080070a0  080070a0  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080070a0  080070a0  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070a0  080070a0  000170a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070a4  080070a4  000170a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  080070a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  200000a8  08007150  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  08007150  00020450  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011f01  00000000  00000000  00020113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002763  00000000  00000000  00032014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001130  00000000  00000000  00034778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d93  00000000  00000000  000358a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c108  00000000  00000000  0003663b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001584f  00000000  00000000  00052743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fb78  00000000  00000000  00067f92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004770  00000000  00000000  00107b0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0010c27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000a8 	.word	0x200000a8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006ea8 	.word	0x08006ea8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000ac 	.word	0x200000ac
 8000104:	08006ea8 	.word	0x08006ea8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_d2uiz>:
 8000244:	b570      	push	{r4, r5, r6, lr}
 8000246:	2200      	movs	r2, #0
 8000248:	4b0c      	ldr	r3, [pc, #48]	; (800027c <__aeabi_d2uiz+0x38>)
 800024a:	0004      	movs	r4, r0
 800024c:	000d      	movs	r5, r1
 800024e:	f000 ff17 	bl	8001080 <__aeabi_dcmpge>
 8000252:	2800      	cmp	r0, #0
 8000254:	d104      	bne.n	8000260 <__aeabi_d2uiz+0x1c>
 8000256:	0020      	movs	r0, r4
 8000258:	0029      	movs	r1, r5
 800025a:	f000 fe81 	bl	8000f60 <__aeabi_d2iz>
 800025e:	bd70      	pop	{r4, r5, r6, pc}
 8000260:	4b06      	ldr	r3, [pc, #24]	; (800027c <__aeabi_d2uiz+0x38>)
 8000262:	2200      	movs	r2, #0
 8000264:	0020      	movs	r0, r4
 8000266:	0029      	movs	r1, r5
 8000268:	f000 faf8 	bl	800085c <__aeabi_dsub>
 800026c:	f000 fe78 	bl	8000f60 <__aeabi_d2iz>
 8000270:	2380      	movs	r3, #128	; 0x80
 8000272:	061b      	lsls	r3, r3, #24
 8000274:	469c      	mov	ip, r3
 8000276:	4460      	add	r0, ip
 8000278:	e7f1      	b.n	800025e <__aeabi_d2uiz+0x1a>
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	41e00000 	.word	0x41e00000

08000280 <__aeabi_ddiv>:
 8000280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000282:	4657      	mov	r7, sl
 8000284:	464e      	mov	r6, r9
 8000286:	4645      	mov	r5, r8
 8000288:	46de      	mov	lr, fp
 800028a:	b5e0      	push	{r5, r6, r7, lr}
 800028c:	030c      	lsls	r4, r1, #12
 800028e:	001f      	movs	r7, r3
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	4681      	mov	r9, r0
 8000294:	4692      	mov	sl, r2
 8000296:	0005      	movs	r5, r0
 8000298:	b085      	sub	sp, #20
 800029a:	0b24      	lsrs	r4, r4, #12
 800029c:	0d5b      	lsrs	r3, r3, #21
 800029e:	0fce      	lsrs	r6, r1, #31
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d100      	bne.n	80002a6 <__aeabi_ddiv+0x26>
 80002a4:	e152      	b.n	800054c <__aeabi_ddiv+0x2cc>
 80002a6:	4ad2      	ldr	r2, [pc, #840]	; (80005f0 <__aeabi_ddiv+0x370>)
 80002a8:	4293      	cmp	r3, r2
 80002aa:	d100      	bne.n	80002ae <__aeabi_ddiv+0x2e>
 80002ac:	e16e      	b.n	800058c <__aeabi_ddiv+0x30c>
 80002ae:	0f42      	lsrs	r2, r0, #29
 80002b0:	00e4      	lsls	r4, r4, #3
 80002b2:	4314      	orrs	r4, r2
 80002b4:	2280      	movs	r2, #128	; 0x80
 80002b6:	0412      	lsls	r2, r2, #16
 80002b8:	4322      	orrs	r2, r4
 80002ba:	4690      	mov	r8, r2
 80002bc:	4acd      	ldr	r2, [pc, #820]	; (80005f4 <__aeabi_ddiv+0x374>)
 80002be:	00c5      	lsls	r5, r0, #3
 80002c0:	4693      	mov	fp, r2
 80002c2:	449b      	add	fp, r3
 80002c4:	2300      	movs	r3, #0
 80002c6:	4699      	mov	r9, r3
 80002c8:	9300      	str	r3, [sp, #0]
 80002ca:	033c      	lsls	r4, r7, #12
 80002cc:	007b      	lsls	r3, r7, #1
 80002ce:	4650      	mov	r0, sl
 80002d0:	0b24      	lsrs	r4, r4, #12
 80002d2:	0d5b      	lsrs	r3, r3, #21
 80002d4:	0fff      	lsrs	r7, r7, #31
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d100      	bne.n	80002dc <__aeabi_ddiv+0x5c>
 80002da:	e11a      	b.n	8000512 <__aeabi_ddiv+0x292>
 80002dc:	4ac4      	ldr	r2, [pc, #784]	; (80005f0 <__aeabi_ddiv+0x370>)
 80002de:	4293      	cmp	r3, r2
 80002e0:	d100      	bne.n	80002e4 <__aeabi_ddiv+0x64>
 80002e2:	e15e      	b.n	80005a2 <__aeabi_ddiv+0x322>
 80002e4:	0f42      	lsrs	r2, r0, #29
 80002e6:	00e4      	lsls	r4, r4, #3
 80002e8:	4322      	orrs	r2, r4
 80002ea:	2480      	movs	r4, #128	; 0x80
 80002ec:	0424      	lsls	r4, r4, #16
 80002ee:	4314      	orrs	r4, r2
 80002f0:	4ac0      	ldr	r2, [pc, #768]	; (80005f4 <__aeabi_ddiv+0x374>)
 80002f2:	00c1      	lsls	r1, r0, #3
 80002f4:	4694      	mov	ip, r2
 80002f6:	465a      	mov	r2, fp
 80002f8:	4463      	add	r3, ip
 80002fa:	1ad3      	subs	r3, r2, r3
 80002fc:	469b      	mov	fp, r3
 80002fe:	2000      	movs	r0, #0
 8000300:	0033      	movs	r3, r6
 8000302:	407b      	eors	r3, r7
 8000304:	469a      	mov	sl, r3
 8000306:	464b      	mov	r3, r9
 8000308:	2b0f      	cmp	r3, #15
 800030a:	d827      	bhi.n	800035c <__aeabi_ddiv+0xdc>
 800030c:	4aba      	ldr	r2, [pc, #744]	; (80005f8 <__aeabi_ddiv+0x378>)
 800030e:	009b      	lsls	r3, r3, #2
 8000310:	58d3      	ldr	r3, [r2, r3]
 8000312:	469f      	mov	pc, r3
 8000314:	46b2      	mov	sl, r6
 8000316:	9b00      	ldr	r3, [sp, #0]
 8000318:	2b02      	cmp	r3, #2
 800031a:	d016      	beq.n	800034a <__aeabi_ddiv+0xca>
 800031c:	2b03      	cmp	r3, #3
 800031e:	d100      	bne.n	8000322 <__aeabi_ddiv+0xa2>
 8000320:	e287      	b.n	8000832 <__aeabi_ddiv+0x5b2>
 8000322:	2b01      	cmp	r3, #1
 8000324:	d000      	beq.n	8000328 <__aeabi_ddiv+0xa8>
 8000326:	e0d5      	b.n	80004d4 <__aeabi_ddiv+0x254>
 8000328:	2300      	movs	r3, #0
 800032a:	2200      	movs	r2, #0
 800032c:	2500      	movs	r5, #0
 800032e:	051b      	lsls	r3, r3, #20
 8000330:	4313      	orrs	r3, r2
 8000332:	4652      	mov	r2, sl
 8000334:	07d2      	lsls	r2, r2, #31
 8000336:	4313      	orrs	r3, r2
 8000338:	0028      	movs	r0, r5
 800033a:	0019      	movs	r1, r3
 800033c:	b005      	add	sp, #20
 800033e:	bcf0      	pop	{r4, r5, r6, r7}
 8000340:	46bb      	mov	fp, r7
 8000342:	46b2      	mov	sl, r6
 8000344:	46a9      	mov	r9, r5
 8000346:	46a0      	mov	r8, r4
 8000348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800034a:	2200      	movs	r2, #0
 800034c:	2500      	movs	r5, #0
 800034e:	4ba8      	ldr	r3, [pc, #672]	; (80005f0 <__aeabi_ddiv+0x370>)
 8000350:	e7ed      	b.n	800032e <__aeabi_ddiv+0xae>
 8000352:	46ba      	mov	sl, r7
 8000354:	46a0      	mov	r8, r4
 8000356:	000d      	movs	r5, r1
 8000358:	9000      	str	r0, [sp, #0]
 800035a:	e7dc      	b.n	8000316 <__aeabi_ddiv+0x96>
 800035c:	4544      	cmp	r4, r8
 800035e:	d200      	bcs.n	8000362 <__aeabi_ddiv+0xe2>
 8000360:	e1c4      	b.n	80006ec <__aeabi_ddiv+0x46c>
 8000362:	d100      	bne.n	8000366 <__aeabi_ddiv+0xe6>
 8000364:	e1bf      	b.n	80006e6 <__aeabi_ddiv+0x466>
 8000366:	2301      	movs	r3, #1
 8000368:	425b      	negs	r3, r3
 800036a:	469c      	mov	ip, r3
 800036c:	002e      	movs	r6, r5
 800036e:	4640      	mov	r0, r8
 8000370:	2500      	movs	r5, #0
 8000372:	44e3      	add	fp, ip
 8000374:	0223      	lsls	r3, r4, #8
 8000376:	0e0c      	lsrs	r4, r1, #24
 8000378:	431c      	orrs	r4, r3
 800037a:	0c1b      	lsrs	r3, r3, #16
 800037c:	4699      	mov	r9, r3
 800037e:	0423      	lsls	r3, r4, #16
 8000380:	020a      	lsls	r2, r1, #8
 8000382:	0c1f      	lsrs	r7, r3, #16
 8000384:	4649      	mov	r1, r9
 8000386:	9200      	str	r2, [sp, #0]
 8000388:	9701      	str	r7, [sp, #4]
 800038a:	f7ff ff55 	bl	8000238 <__aeabi_uidivmod>
 800038e:	0002      	movs	r2, r0
 8000390:	437a      	muls	r2, r7
 8000392:	040b      	lsls	r3, r1, #16
 8000394:	0c31      	lsrs	r1, r6, #16
 8000396:	4680      	mov	r8, r0
 8000398:	4319      	orrs	r1, r3
 800039a:	428a      	cmp	r2, r1
 800039c:	d907      	bls.n	80003ae <__aeabi_ddiv+0x12e>
 800039e:	2301      	movs	r3, #1
 80003a0:	425b      	negs	r3, r3
 80003a2:	469c      	mov	ip, r3
 80003a4:	1909      	adds	r1, r1, r4
 80003a6:	44e0      	add	r8, ip
 80003a8:	428c      	cmp	r4, r1
 80003aa:	d800      	bhi.n	80003ae <__aeabi_ddiv+0x12e>
 80003ac:	e201      	b.n	80007b2 <__aeabi_ddiv+0x532>
 80003ae:	1a88      	subs	r0, r1, r2
 80003b0:	4649      	mov	r1, r9
 80003b2:	f7ff ff41 	bl	8000238 <__aeabi_uidivmod>
 80003b6:	9a01      	ldr	r2, [sp, #4]
 80003b8:	0436      	lsls	r6, r6, #16
 80003ba:	4342      	muls	r2, r0
 80003bc:	0409      	lsls	r1, r1, #16
 80003be:	0c36      	lsrs	r6, r6, #16
 80003c0:	0003      	movs	r3, r0
 80003c2:	430e      	orrs	r6, r1
 80003c4:	42b2      	cmp	r2, r6
 80003c6:	d904      	bls.n	80003d2 <__aeabi_ddiv+0x152>
 80003c8:	1936      	adds	r6, r6, r4
 80003ca:	3b01      	subs	r3, #1
 80003cc:	42b4      	cmp	r4, r6
 80003ce:	d800      	bhi.n	80003d2 <__aeabi_ddiv+0x152>
 80003d0:	e1e9      	b.n	80007a6 <__aeabi_ddiv+0x526>
 80003d2:	1ab0      	subs	r0, r6, r2
 80003d4:	4642      	mov	r2, r8
 80003d6:	9e00      	ldr	r6, [sp, #0]
 80003d8:	0412      	lsls	r2, r2, #16
 80003da:	431a      	orrs	r2, r3
 80003dc:	0c33      	lsrs	r3, r6, #16
 80003de:	001f      	movs	r7, r3
 80003e0:	0c11      	lsrs	r1, r2, #16
 80003e2:	4690      	mov	r8, r2
 80003e4:	9302      	str	r3, [sp, #8]
 80003e6:	0413      	lsls	r3, r2, #16
 80003e8:	0432      	lsls	r2, r6, #16
 80003ea:	0c16      	lsrs	r6, r2, #16
 80003ec:	0032      	movs	r2, r6
 80003ee:	0c1b      	lsrs	r3, r3, #16
 80003f0:	435a      	muls	r2, r3
 80003f2:	9603      	str	r6, [sp, #12]
 80003f4:	437b      	muls	r3, r7
 80003f6:	434e      	muls	r6, r1
 80003f8:	4379      	muls	r1, r7
 80003fa:	0c17      	lsrs	r7, r2, #16
 80003fc:	46bc      	mov	ip, r7
 80003fe:	199b      	adds	r3, r3, r6
 8000400:	4463      	add	r3, ip
 8000402:	429e      	cmp	r6, r3
 8000404:	d903      	bls.n	800040e <__aeabi_ddiv+0x18e>
 8000406:	2680      	movs	r6, #128	; 0x80
 8000408:	0276      	lsls	r6, r6, #9
 800040a:	46b4      	mov	ip, r6
 800040c:	4461      	add	r1, ip
 800040e:	0c1e      	lsrs	r6, r3, #16
 8000410:	1871      	adds	r1, r6, r1
 8000412:	0416      	lsls	r6, r2, #16
 8000414:	041b      	lsls	r3, r3, #16
 8000416:	0c36      	lsrs	r6, r6, #16
 8000418:	199e      	adds	r6, r3, r6
 800041a:	4288      	cmp	r0, r1
 800041c:	d302      	bcc.n	8000424 <__aeabi_ddiv+0x1a4>
 800041e:	d112      	bne.n	8000446 <__aeabi_ddiv+0x1c6>
 8000420:	42b5      	cmp	r5, r6
 8000422:	d210      	bcs.n	8000446 <__aeabi_ddiv+0x1c6>
 8000424:	4643      	mov	r3, r8
 8000426:	1e5a      	subs	r2, r3, #1
 8000428:	9b00      	ldr	r3, [sp, #0]
 800042a:	469c      	mov	ip, r3
 800042c:	4465      	add	r5, ip
 800042e:	001f      	movs	r7, r3
 8000430:	429d      	cmp	r5, r3
 8000432:	419b      	sbcs	r3, r3
 8000434:	425b      	negs	r3, r3
 8000436:	191b      	adds	r3, r3, r4
 8000438:	18c0      	adds	r0, r0, r3
 800043a:	4284      	cmp	r4, r0
 800043c:	d200      	bcs.n	8000440 <__aeabi_ddiv+0x1c0>
 800043e:	e19e      	b.n	800077e <__aeabi_ddiv+0x4fe>
 8000440:	d100      	bne.n	8000444 <__aeabi_ddiv+0x1c4>
 8000442:	e199      	b.n	8000778 <__aeabi_ddiv+0x4f8>
 8000444:	4690      	mov	r8, r2
 8000446:	1bae      	subs	r6, r5, r6
 8000448:	42b5      	cmp	r5, r6
 800044a:	41ad      	sbcs	r5, r5
 800044c:	1a40      	subs	r0, r0, r1
 800044e:	426d      	negs	r5, r5
 8000450:	1b40      	subs	r0, r0, r5
 8000452:	4284      	cmp	r4, r0
 8000454:	d100      	bne.n	8000458 <__aeabi_ddiv+0x1d8>
 8000456:	e1d2      	b.n	80007fe <__aeabi_ddiv+0x57e>
 8000458:	4649      	mov	r1, r9
 800045a:	f7ff feed 	bl	8000238 <__aeabi_uidivmod>
 800045e:	9a01      	ldr	r2, [sp, #4]
 8000460:	040b      	lsls	r3, r1, #16
 8000462:	4342      	muls	r2, r0
 8000464:	0c31      	lsrs	r1, r6, #16
 8000466:	0005      	movs	r5, r0
 8000468:	4319      	orrs	r1, r3
 800046a:	428a      	cmp	r2, r1
 800046c:	d900      	bls.n	8000470 <__aeabi_ddiv+0x1f0>
 800046e:	e16c      	b.n	800074a <__aeabi_ddiv+0x4ca>
 8000470:	1a88      	subs	r0, r1, r2
 8000472:	4649      	mov	r1, r9
 8000474:	f7ff fee0 	bl	8000238 <__aeabi_uidivmod>
 8000478:	9a01      	ldr	r2, [sp, #4]
 800047a:	0436      	lsls	r6, r6, #16
 800047c:	4342      	muls	r2, r0
 800047e:	0409      	lsls	r1, r1, #16
 8000480:	0c36      	lsrs	r6, r6, #16
 8000482:	0003      	movs	r3, r0
 8000484:	430e      	orrs	r6, r1
 8000486:	42b2      	cmp	r2, r6
 8000488:	d900      	bls.n	800048c <__aeabi_ddiv+0x20c>
 800048a:	e153      	b.n	8000734 <__aeabi_ddiv+0x4b4>
 800048c:	9803      	ldr	r0, [sp, #12]
 800048e:	1ab6      	subs	r6, r6, r2
 8000490:	0002      	movs	r2, r0
 8000492:	042d      	lsls	r5, r5, #16
 8000494:	431d      	orrs	r5, r3
 8000496:	9f02      	ldr	r7, [sp, #8]
 8000498:	042b      	lsls	r3, r5, #16
 800049a:	0c1b      	lsrs	r3, r3, #16
 800049c:	435a      	muls	r2, r3
 800049e:	437b      	muls	r3, r7
 80004a0:	469c      	mov	ip, r3
 80004a2:	0c29      	lsrs	r1, r5, #16
 80004a4:	4348      	muls	r0, r1
 80004a6:	0c13      	lsrs	r3, r2, #16
 80004a8:	4484      	add	ip, r0
 80004aa:	4463      	add	r3, ip
 80004ac:	4379      	muls	r1, r7
 80004ae:	4298      	cmp	r0, r3
 80004b0:	d903      	bls.n	80004ba <__aeabi_ddiv+0x23a>
 80004b2:	2080      	movs	r0, #128	; 0x80
 80004b4:	0240      	lsls	r0, r0, #9
 80004b6:	4684      	mov	ip, r0
 80004b8:	4461      	add	r1, ip
 80004ba:	0c18      	lsrs	r0, r3, #16
 80004bc:	0412      	lsls	r2, r2, #16
 80004be:	041b      	lsls	r3, r3, #16
 80004c0:	0c12      	lsrs	r2, r2, #16
 80004c2:	1840      	adds	r0, r0, r1
 80004c4:	189b      	adds	r3, r3, r2
 80004c6:	4286      	cmp	r6, r0
 80004c8:	d200      	bcs.n	80004cc <__aeabi_ddiv+0x24c>
 80004ca:	e100      	b.n	80006ce <__aeabi_ddiv+0x44e>
 80004cc:	d100      	bne.n	80004d0 <__aeabi_ddiv+0x250>
 80004ce:	e0fb      	b.n	80006c8 <__aeabi_ddiv+0x448>
 80004d0:	2301      	movs	r3, #1
 80004d2:	431d      	orrs	r5, r3
 80004d4:	4b49      	ldr	r3, [pc, #292]	; (80005fc <__aeabi_ddiv+0x37c>)
 80004d6:	445b      	add	r3, fp
 80004d8:	2b00      	cmp	r3, #0
 80004da:	dc00      	bgt.n	80004de <__aeabi_ddiv+0x25e>
 80004dc:	e0aa      	b.n	8000634 <__aeabi_ddiv+0x3b4>
 80004de:	076a      	lsls	r2, r5, #29
 80004e0:	d000      	beq.n	80004e4 <__aeabi_ddiv+0x264>
 80004e2:	e13d      	b.n	8000760 <__aeabi_ddiv+0x4e0>
 80004e4:	08e9      	lsrs	r1, r5, #3
 80004e6:	4642      	mov	r2, r8
 80004e8:	01d2      	lsls	r2, r2, #7
 80004ea:	d506      	bpl.n	80004fa <__aeabi_ddiv+0x27a>
 80004ec:	4642      	mov	r2, r8
 80004ee:	4b44      	ldr	r3, [pc, #272]	; (8000600 <__aeabi_ddiv+0x380>)
 80004f0:	401a      	ands	r2, r3
 80004f2:	2380      	movs	r3, #128	; 0x80
 80004f4:	4690      	mov	r8, r2
 80004f6:	00db      	lsls	r3, r3, #3
 80004f8:	445b      	add	r3, fp
 80004fa:	4a42      	ldr	r2, [pc, #264]	; (8000604 <__aeabi_ddiv+0x384>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	dd00      	ble.n	8000502 <__aeabi_ddiv+0x282>
 8000500:	e723      	b.n	800034a <__aeabi_ddiv+0xca>
 8000502:	4642      	mov	r2, r8
 8000504:	055b      	lsls	r3, r3, #21
 8000506:	0755      	lsls	r5, r2, #29
 8000508:	0252      	lsls	r2, r2, #9
 800050a:	430d      	orrs	r5, r1
 800050c:	0b12      	lsrs	r2, r2, #12
 800050e:	0d5b      	lsrs	r3, r3, #21
 8000510:	e70d      	b.n	800032e <__aeabi_ddiv+0xae>
 8000512:	4651      	mov	r1, sl
 8000514:	4321      	orrs	r1, r4
 8000516:	d100      	bne.n	800051a <__aeabi_ddiv+0x29a>
 8000518:	e07c      	b.n	8000614 <__aeabi_ddiv+0x394>
 800051a:	2c00      	cmp	r4, #0
 800051c:	d100      	bne.n	8000520 <__aeabi_ddiv+0x2a0>
 800051e:	e0fb      	b.n	8000718 <__aeabi_ddiv+0x498>
 8000520:	0020      	movs	r0, r4
 8000522:	f000 fdb7 	bl	8001094 <__clzsi2>
 8000526:	0002      	movs	r2, r0
 8000528:	3a0b      	subs	r2, #11
 800052a:	231d      	movs	r3, #29
 800052c:	1a9b      	subs	r3, r3, r2
 800052e:	4652      	mov	r2, sl
 8000530:	0001      	movs	r1, r0
 8000532:	40da      	lsrs	r2, r3
 8000534:	4653      	mov	r3, sl
 8000536:	3908      	subs	r1, #8
 8000538:	408b      	lsls	r3, r1
 800053a:	408c      	lsls	r4, r1
 800053c:	0019      	movs	r1, r3
 800053e:	4314      	orrs	r4, r2
 8000540:	4b31      	ldr	r3, [pc, #196]	; (8000608 <__aeabi_ddiv+0x388>)
 8000542:	4458      	add	r0, fp
 8000544:	469b      	mov	fp, r3
 8000546:	4483      	add	fp, r0
 8000548:	2000      	movs	r0, #0
 800054a:	e6d9      	b.n	8000300 <__aeabi_ddiv+0x80>
 800054c:	0003      	movs	r3, r0
 800054e:	4323      	orrs	r3, r4
 8000550:	4698      	mov	r8, r3
 8000552:	d044      	beq.n	80005de <__aeabi_ddiv+0x35e>
 8000554:	2c00      	cmp	r4, #0
 8000556:	d100      	bne.n	800055a <__aeabi_ddiv+0x2da>
 8000558:	e0cf      	b.n	80006fa <__aeabi_ddiv+0x47a>
 800055a:	0020      	movs	r0, r4
 800055c:	f000 fd9a 	bl	8001094 <__clzsi2>
 8000560:	0001      	movs	r1, r0
 8000562:	0002      	movs	r2, r0
 8000564:	390b      	subs	r1, #11
 8000566:	231d      	movs	r3, #29
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	4649      	mov	r1, r9
 800056c:	0010      	movs	r0, r2
 800056e:	40d9      	lsrs	r1, r3
 8000570:	3808      	subs	r0, #8
 8000572:	4084      	lsls	r4, r0
 8000574:	000b      	movs	r3, r1
 8000576:	464d      	mov	r5, r9
 8000578:	4323      	orrs	r3, r4
 800057a:	4698      	mov	r8, r3
 800057c:	4085      	lsls	r5, r0
 800057e:	4b23      	ldr	r3, [pc, #140]	; (800060c <__aeabi_ddiv+0x38c>)
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	469b      	mov	fp, r3
 8000584:	2300      	movs	r3, #0
 8000586:	4699      	mov	r9, r3
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	e69e      	b.n	80002ca <__aeabi_ddiv+0x4a>
 800058c:	0002      	movs	r2, r0
 800058e:	4322      	orrs	r2, r4
 8000590:	4690      	mov	r8, r2
 8000592:	d11d      	bne.n	80005d0 <__aeabi_ddiv+0x350>
 8000594:	2208      	movs	r2, #8
 8000596:	469b      	mov	fp, r3
 8000598:	2302      	movs	r3, #2
 800059a:	2500      	movs	r5, #0
 800059c:	4691      	mov	r9, r2
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	e693      	b.n	80002ca <__aeabi_ddiv+0x4a>
 80005a2:	4651      	mov	r1, sl
 80005a4:	4321      	orrs	r1, r4
 80005a6:	d109      	bne.n	80005bc <__aeabi_ddiv+0x33c>
 80005a8:	2302      	movs	r3, #2
 80005aa:	464a      	mov	r2, r9
 80005ac:	431a      	orrs	r2, r3
 80005ae:	4b18      	ldr	r3, [pc, #96]	; (8000610 <__aeabi_ddiv+0x390>)
 80005b0:	4691      	mov	r9, r2
 80005b2:	469c      	mov	ip, r3
 80005b4:	2400      	movs	r4, #0
 80005b6:	2002      	movs	r0, #2
 80005b8:	44e3      	add	fp, ip
 80005ba:	e6a1      	b.n	8000300 <__aeabi_ddiv+0x80>
 80005bc:	2303      	movs	r3, #3
 80005be:	464a      	mov	r2, r9
 80005c0:	431a      	orrs	r2, r3
 80005c2:	4b13      	ldr	r3, [pc, #76]	; (8000610 <__aeabi_ddiv+0x390>)
 80005c4:	4691      	mov	r9, r2
 80005c6:	469c      	mov	ip, r3
 80005c8:	4651      	mov	r1, sl
 80005ca:	2003      	movs	r0, #3
 80005cc:	44e3      	add	fp, ip
 80005ce:	e697      	b.n	8000300 <__aeabi_ddiv+0x80>
 80005d0:	220c      	movs	r2, #12
 80005d2:	469b      	mov	fp, r3
 80005d4:	2303      	movs	r3, #3
 80005d6:	46a0      	mov	r8, r4
 80005d8:	4691      	mov	r9, r2
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	e675      	b.n	80002ca <__aeabi_ddiv+0x4a>
 80005de:	2304      	movs	r3, #4
 80005e0:	4699      	mov	r9, r3
 80005e2:	2300      	movs	r3, #0
 80005e4:	469b      	mov	fp, r3
 80005e6:	3301      	adds	r3, #1
 80005e8:	2500      	movs	r5, #0
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	e66d      	b.n	80002ca <__aeabi_ddiv+0x4a>
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	000007ff 	.word	0x000007ff
 80005f4:	fffffc01 	.word	0xfffffc01
 80005f8:	08006ff4 	.word	0x08006ff4
 80005fc:	000003ff 	.word	0x000003ff
 8000600:	feffffff 	.word	0xfeffffff
 8000604:	000007fe 	.word	0x000007fe
 8000608:	000003f3 	.word	0x000003f3
 800060c:	fffffc0d 	.word	0xfffffc0d
 8000610:	fffff801 	.word	0xfffff801
 8000614:	464a      	mov	r2, r9
 8000616:	2301      	movs	r3, #1
 8000618:	431a      	orrs	r2, r3
 800061a:	4691      	mov	r9, r2
 800061c:	2400      	movs	r4, #0
 800061e:	2001      	movs	r0, #1
 8000620:	e66e      	b.n	8000300 <__aeabi_ddiv+0x80>
 8000622:	2300      	movs	r3, #0
 8000624:	2280      	movs	r2, #128	; 0x80
 8000626:	469a      	mov	sl, r3
 8000628:	2500      	movs	r5, #0
 800062a:	4b88      	ldr	r3, [pc, #544]	; (800084c <__aeabi_ddiv+0x5cc>)
 800062c:	0312      	lsls	r2, r2, #12
 800062e:	e67e      	b.n	800032e <__aeabi_ddiv+0xae>
 8000630:	2501      	movs	r5, #1
 8000632:	426d      	negs	r5, r5
 8000634:	2201      	movs	r2, #1
 8000636:	1ad2      	subs	r2, r2, r3
 8000638:	2a38      	cmp	r2, #56	; 0x38
 800063a:	dd00      	ble.n	800063e <__aeabi_ddiv+0x3be>
 800063c:	e674      	b.n	8000328 <__aeabi_ddiv+0xa8>
 800063e:	2a1f      	cmp	r2, #31
 8000640:	dc00      	bgt.n	8000644 <__aeabi_ddiv+0x3c4>
 8000642:	e0bd      	b.n	80007c0 <__aeabi_ddiv+0x540>
 8000644:	211f      	movs	r1, #31
 8000646:	4249      	negs	r1, r1
 8000648:	1acb      	subs	r3, r1, r3
 800064a:	4641      	mov	r1, r8
 800064c:	40d9      	lsrs	r1, r3
 800064e:	000b      	movs	r3, r1
 8000650:	2a20      	cmp	r2, #32
 8000652:	d004      	beq.n	800065e <__aeabi_ddiv+0x3de>
 8000654:	4641      	mov	r1, r8
 8000656:	4a7e      	ldr	r2, [pc, #504]	; (8000850 <__aeabi_ddiv+0x5d0>)
 8000658:	445a      	add	r2, fp
 800065a:	4091      	lsls	r1, r2
 800065c:	430d      	orrs	r5, r1
 800065e:	0029      	movs	r1, r5
 8000660:	1e4a      	subs	r2, r1, #1
 8000662:	4191      	sbcs	r1, r2
 8000664:	4319      	orrs	r1, r3
 8000666:	2307      	movs	r3, #7
 8000668:	001d      	movs	r5, r3
 800066a:	2200      	movs	r2, #0
 800066c:	400d      	ands	r5, r1
 800066e:	420b      	tst	r3, r1
 8000670:	d100      	bne.n	8000674 <__aeabi_ddiv+0x3f4>
 8000672:	e0d0      	b.n	8000816 <__aeabi_ddiv+0x596>
 8000674:	220f      	movs	r2, #15
 8000676:	2300      	movs	r3, #0
 8000678:	400a      	ands	r2, r1
 800067a:	2a04      	cmp	r2, #4
 800067c:	d100      	bne.n	8000680 <__aeabi_ddiv+0x400>
 800067e:	e0c7      	b.n	8000810 <__aeabi_ddiv+0x590>
 8000680:	1d0a      	adds	r2, r1, #4
 8000682:	428a      	cmp	r2, r1
 8000684:	4189      	sbcs	r1, r1
 8000686:	4249      	negs	r1, r1
 8000688:	185b      	adds	r3, r3, r1
 800068a:	0011      	movs	r1, r2
 800068c:	021a      	lsls	r2, r3, #8
 800068e:	d400      	bmi.n	8000692 <__aeabi_ddiv+0x412>
 8000690:	e0be      	b.n	8000810 <__aeabi_ddiv+0x590>
 8000692:	2301      	movs	r3, #1
 8000694:	2200      	movs	r2, #0
 8000696:	2500      	movs	r5, #0
 8000698:	e649      	b.n	800032e <__aeabi_ddiv+0xae>
 800069a:	2280      	movs	r2, #128	; 0x80
 800069c:	4643      	mov	r3, r8
 800069e:	0312      	lsls	r2, r2, #12
 80006a0:	4213      	tst	r3, r2
 80006a2:	d008      	beq.n	80006b6 <__aeabi_ddiv+0x436>
 80006a4:	4214      	tst	r4, r2
 80006a6:	d106      	bne.n	80006b6 <__aeabi_ddiv+0x436>
 80006a8:	4322      	orrs	r2, r4
 80006aa:	0312      	lsls	r2, r2, #12
 80006ac:	46ba      	mov	sl, r7
 80006ae:	000d      	movs	r5, r1
 80006b0:	4b66      	ldr	r3, [pc, #408]	; (800084c <__aeabi_ddiv+0x5cc>)
 80006b2:	0b12      	lsrs	r2, r2, #12
 80006b4:	e63b      	b.n	800032e <__aeabi_ddiv+0xae>
 80006b6:	2280      	movs	r2, #128	; 0x80
 80006b8:	4643      	mov	r3, r8
 80006ba:	0312      	lsls	r2, r2, #12
 80006bc:	431a      	orrs	r2, r3
 80006be:	0312      	lsls	r2, r2, #12
 80006c0:	46b2      	mov	sl, r6
 80006c2:	4b62      	ldr	r3, [pc, #392]	; (800084c <__aeabi_ddiv+0x5cc>)
 80006c4:	0b12      	lsrs	r2, r2, #12
 80006c6:	e632      	b.n	800032e <__aeabi_ddiv+0xae>
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d100      	bne.n	80006ce <__aeabi_ddiv+0x44e>
 80006cc:	e702      	b.n	80004d4 <__aeabi_ddiv+0x254>
 80006ce:	19a6      	adds	r6, r4, r6
 80006d0:	1e6a      	subs	r2, r5, #1
 80006d2:	42a6      	cmp	r6, r4
 80006d4:	d200      	bcs.n	80006d8 <__aeabi_ddiv+0x458>
 80006d6:	e089      	b.n	80007ec <__aeabi_ddiv+0x56c>
 80006d8:	4286      	cmp	r6, r0
 80006da:	d200      	bcs.n	80006de <__aeabi_ddiv+0x45e>
 80006dc:	e09f      	b.n	800081e <__aeabi_ddiv+0x59e>
 80006de:	d100      	bne.n	80006e2 <__aeabi_ddiv+0x462>
 80006e0:	e0af      	b.n	8000842 <__aeabi_ddiv+0x5c2>
 80006e2:	0015      	movs	r5, r2
 80006e4:	e6f4      	b.n	80004d0 <__aeabi_ddiv+0x250>
 80006e6:	42a9      	cmp	r1, r5
 80006e8:	d900      	bls.n	80006ec <__aeabi_ddiv+0x46c>
 80006ea:	e63c      	b.n	8000366 <__aeabi_ddiv+0xe6>
 80006ec:	4643      	mov	r3, r8
 80006ee:	07de      	lsls	r6, r3, #31
 80006f0:	0858      	lsrs	r0, r3, #1
 80006f2:	086b      	lsrs	r3, r5, #1
 80006f4:	431e      	orrs	r6, r3
 80006f6:	07ed      	lsls	r5, r5, #31
 80006f8:	e63c      	b.n	8000374 <__aeabi_ddiv+0xf4>
 80006fa:	f000 fccb 	bl	8001094 <__clzsi2>
 80006fe:	0001      	movs	r1, r0
 8000700:	0002      	movs	r2, r0
 8000702:	3115      	adds	r1, #21
 8000704:	3220      	adds	r2, #32
 8000706:	291c      	cmp	r1, #28
 8000708:	dc00      	bgt.n	800070c <__aeabi_ddiv+0x48c>
 800070a:	e72c      	b.n	8000566 <__aeabi_ddiv+0x2e6>
 800070c:	464b      	mov	r3, r9
 800070e:	3808      	subs	r0, #8
 8000710:	4083      	lsls	r3, r0
 8000712:	2500      	movs	r5, #0
 8000714:	4698      	mov	r8, r3
 8000716:	e732      	b.n	800057e <__aeabi_ddiv+0x2fe>
 8000718:	f000 fcbc 	bl	8001094 <__clzsi2>
 800071c:	0003      	movs	r3, r0
 800071e:	001a      	movs	r2, r3
 8000720:	3215      	adds	r2, #21
 8000722:	3020      	adds	r0, #32
 8000724:	2a1c      	cmp	r2, #28
 8000726:	dc00      	bgt.n	800072a <__aeabi_ddiv+0x4aa>
 8000728:	e6ff      	b.n	800052a <__aeabi_ddiv+0x2aa>
 800072a:	4654      	mov	r4, sl
 800072c:	3b08      	subs	r3, #8
 800072e:	2100      	movs	r1, #0
 8000730:	409c      	lsls	r4, r3
 8000732:	e705      	b.n	8000540 <__aeabi_ddiv+0x2c0>
 8000734:	1936      	adds	r6, r6, r4
 8000736:	3b01      	subs	r3, #1
 8000738:	42b4      	cmp	r4, r6
 800073a:	d900      	bls.n	800073e <__aeabi_ddiv+0x4be>
 800073c:	e6a6      	b.n	800048c <__aeabi_ddiv+0x20c>
 800073e:	42b2      	cmp	r2, r6
 8000740:	d800      	bhi.n	8000744 <__aeabi_ddiv+0x4c4>
 8000742:	e6a3      	b.n	800048c <__aeabi_ddiv+0x20c>
 8000744:	1e83      	subs	r3, r0, #2
 8000746:	1936      	adds	r6, r6, r4
 8000748:	e6a0      	b.n	800048c <__aeabi_ddiv+0x20c>
 800074a:	1909      	adds	r1, r1, r4
 800074c:	3d01      	subs	r5, #1
 800074e:	428c      	cmp	r4, r1
 8000750:	d900      	bls.n	8000754 <__aeabi_ddiv+0x4d4>
 8000752:	e68d      	b.n	8000470 <__aeabi_ddiv+0x1f0>
 8000754:	428a      	cmp	r2, r1
 8000756:	d800      	bhi.n	800075a <__aeabi_ddiv+0x4da>
 8000758:	e68a      	b.n	8000470 <__aeabi_ddiv+0x1f0>
 800075a:	1e85      	subs	r5, r0, #2
 800075c:	1909      	adds	r1, r1, r4
 800075e:	e687      	b.n	8000470 <__aeabi_ddiv+0x1f0>
 8000760:	220f      	movs	r2, #15
 8000762:	402a      	ands	r2, r5
 8000764:	2a04      	cmp	r2, #4
 8000766:	d100      	bne.n	800076a <__aeabi_ddiv+0x4ea>
 8000768:	e6bc      	b.n	80004e4 <__aeabi_ddiv+0x264>
 800076a:	1d29      	adds	r1, r5, #4
 800076c:	42a9      	cmp	r1, r5
 800076e:	41ad      	sbcs	r5, r5
 8000770:	426d      	negs	r5, r5
 8000772:	08c9      	lsrs	r1, r1, #3
 8000774:	44a8      	add	r8, r5
 8000776:	e6b6      	b.n	80004e6 <__aeabi_ddiv+0x266>
 8000778:	42af      	cmp	r7, r5
 800077a:	d900      	bls.n	800077e <__aeabi_ddiv+0x4fe>
 800077c:	e662      	b.n	8000444 <__aeabi_ddiv+0x1c4>
 800077e:	4281      	cmp	r1, r0
 8000780:	d804      	bhi.n	800078c <__aeabi_ddiv+0x50c>
 8000782:	d000      	beq.n	8000786 <__aeabi_ddiv+0x506>
 8000784:	e65e      	b.n	8000444 <__aeabi_ddiv+0x1c4>
 8000786:	42ae      	cmp	r6, r5
 8000788:	d800      	bhi.n	800078c <__aeabi_ddiv+0x50c>
 800078a:	e65b      	b.n	8000444 <__aeabi_ddiv+0x1c4>
 800078c:	2302      	movs	r3, #2
 800078e:	425b      	negs	r3, r3
 8000790:	469c      	mov	ip, r3
 8000792:	9b00      	ldr	r3, [sp, #0]
 8000794:	44e0      	add	r8, ip
 8000796:	469c      	mov	ip, r3
 8000798:	4465      	add	r5, ip
 800079a:	429d      	cmp	r5, r3
 800079c:	419b      	sbcs	r3, r3
 800079e:	425b      	negs	r3, r3
 80007a0:	191b      	adds	r3, r3, r4
 80007a2:	18c0      	adds	r0, r0, r3
 80007a4:	e64f      	b.n	8000446 <__aeabi_ddiv+0x1c6>
 80007a6:	42b2      	cmp	r2, r6
 80007a8:	d800      	bhi.n	80007ac <__aeabi_ddiv+0x52c>
 80007aa:	e612      	b.n	80003d2 <__aeabi_ddiv+0x152>
 80007ac:	1e83      	subs	r3, r0, #2
 80007ae:	1936      	adds	r6, r6, r4
 80007b0:	e60f      	b.n	80003d2 <__aeabi_ddiv+0x152>
 80007b2:	428a      	cmp	r2, r1
 80007b4:	d800      	bhi.n	80007b8 <__aeabi_ddiv+0x538>
 80007b6:	e5fa      	b.n	80003ae <__aeabi_ddiv+0x12e>
 80007b8:	1e83      	subs	r3, r0, #2
 80007ba:	4698      	mov	r8, r3
 80007bc:	1909      	adds	r1, r1, r4
 80007be:	e5f6      	b.n	80003ae <__aeabi_ddiv+0x12e>
 80007c0:	4b24      	ldr	r3, [pc, #144]	; (8000854 <__aeabi_ddiv+0x5d4>)
 80007c2:	0028      	movs	r0, r5
 80007c4:	445b      	add	r3, fp
 80007c6:	4641      	mov	r1, r8
 80007c8:	409d      	lsls	r5, r3
 80007ca:	4099      	lsls	r1, r3
 80007cc:	40d0      	lsrs	r0, r2
 80007ce:	1e6b      	subs	r3, r5, #1
 80007d0:	419d      	sbcs	r5, r3
 80007d2:	4643      	mov	r3, r8
 80007d4:	4301      	orrs	r1, r0
 80007d6:	4329      	orrs	r1, r5
 80007d8:	40d3      	lsrs	r3, r2
 80007da:	074a      	lsls	r2, r1, #29
 80007dc:	d100      	bne.n	80007e0 <__aeabi_ddiv+0x560>
 80007de:	e755      	b.n	800068c <__aeabi_ddiv+0x40c>
 80007e0:	220f      	movs	r2, #15
 80007e2:	400a      	ands	r2, r1
 80007e4:	2a04      	cmp	r2, #4
 80007e6:	d000      	beq.n	80007ea <__aeabi_ddiv+0x56a>
 80007e8:	e74a      	b.n	8000680 <__aeabi_ddiv+0x400>
 80007ea:	e74f      	b.n	800068c <__aeabi_ddiv+0x40c>
 80007ec:	0015      	movs	r5, r2
 80007ee:	4286      	cmp	r6, r0
 80007f0:	d000      	beq.n	80007f4 <__aeabi_ddiv+0x574>
 80007f2:	e66d      	b.n	80004d0 <__aeabi_ddiv+0x250>
 80007f4:	9a00      	ldr	r2, [sp, #0]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d000      	beq.n	80007fc <__aeabi_ddiv+0x57c>
 80007fa:	e669      	b.n	80004d0 <__aeabi_ddiv+0x250>
 80007fc:	e66a      	b.n	80004d4 <__aeabi_ddiv+0x254>
 80007fe:	4b16      	ldr	r3, [pc, #88]	; (8000858 <__aeabi_ddiv+0x5d8>)
 8000800:	445b      	add	r3, fp
 8000802:	2b00      	cmp	r3, #0
 8000804:	dc00      	bgt.n	8000808 <__aeabi_ddiv+0x588>
 8000806:	e713      	b.n	8000630 <__aeabi_ddiv+0x3b0>
 8000808:	2501      	movs	r5, #1
 800080a:	2100      	movs	r1, #0
 800080c:	44a8      	add	r8, r5
 800080e:	e66a      	b.n	80004e6 <__aeabi_ddiv+0x266>
 8000810:	075d      	lsls	r5, r3, #29
 8000812:	025b      	lsls	r3, r3, #9
 8000814:	0b1a      	lsrs	r2, r3, #12
 8000816:	08c9      	lsrs	r1, r1, #3
 8000818:	2300      	movs	r3, #0
 800081a:	430d      	orrs	r5, r1
 800081c:	e587      	b.n	800032e <__aeabi_ddiv+0xae>
 800081e:	9900      	ldr	r1, [sp, #0]
 8000820:	3d02      	subs	r5, #2
 8000822:	004a      	lsls	r2, r1, #1
 8000824:	428a      	cmp	r2, r1
 8000826:	41bf      	sbcs	r7, r7
 8000828:	427f      	negs	r7, r7
 800082a:	193f      	adds	r7, r7, r4
 800082c:	19f6      	adds	r6, r6, r7
 800082e:	9200      	str	r2, [sp, #0]
 8000830:	e7dd      	b.n	80007ee <__aeabi_ddiv+0x56e>
 8000832:	2280      	movs	r2, #128	; 0x80
 8000834:	4643      	mov	r3, r8
 8000836:	0312      	lsls	r2, r2, #12
 8000838:	431a      	orrs	r2, r3
 800083a:	0312      	lsls	r2, r2, #12
 800083c:	4b03      	ldr	r3, [pc, #12]	; (800084c <__aeabi_ddiv+0x5cc>)
 800083e:	0b12      	lsrs	r2, r2, #12
 8000840:	e575      	b.n	800032e <__aeabi_ddiv+0xae>
 8000842:	9900      	ldr	r1, [sp, #0]
 8000844:	4299      	cmp	r1, r3
 8000846:	d3ea      	bcc.n	800081e <__aeabi_ddiv+0x59e>
 8000848:	0015      	movs	r5, r2
 800084a:	e7d3      	b.n	80007f4 <__aeabi_ddiv+0x574>
 800084c:	000007ff 	.word	0x000007ff
 8000850:	0000043e 	.word	0x0000043e
 8000854:	0000041e 	.word	0x0000041e
 8000858:	000003ff 	.word	0x000003ff

0800085c <__aeabi_dsub>:
 800085c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800085e:	4657      	mov	r7, sl
 8000860:	464e      	mov	r6, r9
 8000862:	4645      	mov	r5, r8
 8000864:	46de      	mov	lr, fp
 8000866:	b5e0      	push	{r5, r6, r7, lr}
 8000868:	000d      	movs	r5, r1
 800086a:	0004      	movs	r4, r0
 800086c:	0019      	movs	r1, r3
 800086e:	0010      	movs	r0, r2
 8000870:	032b      	lsls	r3, r5, #12
 8000872:	0a5b      	lsrs	r3, r3, #9
 8000874:	0f62      	lsrs	r2, r4, #29
 8000876:	431a      	orrs	r2, r3
 8000878:	00e3      	lsls	r3, r4, #3
 800087a:	030c      	lsls	r4, r1, #12
 800087c:	0a64      	lsrs	r4, r4, #9
 800087e:	0f47      	lsrs	r7, r0, #29
 8000880:	4327      	orrs	r7, r4
 8000882:	4cd0      	ldr	r4, [pc, #832]	; (8000bc4 <__aeabi_dsub+0x368>)
 8000884:	006e      	lsls	r6, r5, #1
 8000886:	4691      	mov	r9, r2
 8000888:	b083      	sub	sp, #12
 800088a:	004a      	lsls	r2, r1, #1
 800088c:	00c0      	lsls	r0, r0, #3
 800088e:	4698      	mov	r8, r3
 8000890:	46a2      	mov	sl, r4
 8000892:	0d76      	lsrs	r6, r6, #21
 8000894:	0fed      	lsrs	r5, r5, #31
 8000896:	0d52      	lsrs	r2, r2, #21
 8000898:	0fc9      	lsrs	r1, r1, #31
 800089a:	9001      	str	r0, [sp, #4]
 800089c:	42a2      	cmp	r2, r4
 800089e:	d100      	bne.n	80008a2 <__aeabi_dsub+0x46>
 80008a0:	e0b9      	b.n	8000a16 <__aeabi_dsub+0x1ba>
 80008a2:	2401      	movs	r4, #1
 80008a4:	4061      	eors	r1, r4
 80008a6:	468b      	mov	fp, r1
 80008a8:	428d      	cmp	r5, r1
 80008aa:	d100      	bne.n	80008ae <__aeabi_dsub+0x52>
 80008ac:	e08d      	b.n	80009ca <__aeabi_dsub+0x16e>
 80008ae:	1ab4      	subs	r4, r6, r2
 80008b0:	46a4      	mov	ip, r4
 80008b2:	2c00      	cmp	r4, #0
 80008b4:	dc00      	bgt.n	80008b8 <__aeabi_dsub+0x5c>
 80008b6:	e0b7      	b.n	8000a28 <__aeabi_dsub+0x1cc>
 80008b8:	2a00      	cmp	r2, #0
 80008ba:	d100      	bne.n	80008be <__aeabi_dsub+0x62>
 80008bc:	e0cb      	b.n	8000a56 <__aeabi_dsub+0x1fa>
 80008be:	4ac1      	ldr	r2, [pc, #772]	; (8000bc4 <__aeabi_dsub+0x368>)
 80008c0:	4296      	cmp	r6, r2
 80008c2:	d100      	bne.n	80008c6 <__aeabi_dsub+0x6a>
 80008c4:	e186      	b.n	8000bd4 <__aeabi_dsub+0x378>
 80008c6:	2280      	movs	r2, #128	; 0x80
 80008c8:	0412      	lsls	r2, r2, #16
 80008ca:	4317      	orrs	r7, r2
 80008cc:	4662      	mov	r2, ip
 80008ce:	2a38      	cmp	r2, #56	; 0x38
 80008d0:	dd00      	ble.n	80008d4 <__aeabi_dsub+0x78>
 80008d2:	e1a4      	b.n	8000c1e <__aeabi_dsub+0x3c2>
 80008d4:	2a1f      	cmp	r2, #31
 80008d6:	dd00      	ble.n	80008da <__aeabi_dsub+0x7e>
 80008d8:	e21d      	b.n	8000d16 <__aeabi_dsub+0x4ba>
 80008da:	4661      	mov	r1, ip
 80008dc:	2220      	movs	r2, #32
 80008de:	003c      	movs	r4, r7
 80008e0:	1a52      	subs	r2, r2, r1
 80008e2:	0001      	movs	r1, r0
 80008e4:	4090      	lsls	r0, r2
 80008e6:	4094      	lsls	r4, r2
 80008e8:	1e42      	subs	r2, r0, #1
 80008ea:	4190      	sbcs	r0, r2
 80008ec:	4662      	mov	r2, ip
 80008ee:	46a0      	mov	r8, r4
 80008f0:	4664      	mov	r4, ip
 80008f2:	40d7      	lsrs	r7, r2
 80008f4:	464a      	mov	r2, r9
 80008f6:	40e1      	lsrs	r1, r4
 80008f8:	4644      	mov	r4, r8
 80008fa:	1bd2      	subs	r2, r2, r7
 80008fc:	4691      	mov	r9, r2
 80008fe:	430c      	orrs	r4, r1
 8000900:	4304      	orrs	r4, r0
 8000902:	1b1c      	subs	r4, r3, r4
 8000904:	42a3      	cmp	r3, r4
 8000906:	4192      	sbcs	r2, r2
 8000908:	464b      	mov	r3, r9
 800090a:	4252      	negs	r2, r2
 800090c:	1a9b      	subs	r3, r3, r2
 800090e:	469a      	mov	sl, r3
 8000910:	4653      	mov	r3, sl
 8000912:	021b      	lsls	r3, r3, #8
 8000914:	d400      	bmi.n	8000918 <__aeabi_dsub+0xbc>
 8000916:	e12b      	b.n	8000b70 <__aeabi_dsub+0x314>
 8000918:	4653      	mov	r3, sl
 800091a:	025a      	lsls	r2, r3, #9
 800091c:	0a53      	lsrs	r3, r2, #9
 800091e:	469a      	mov	sl, r3
 8000920:	4653      	mov	r3, sl
 8000922:	2b00      	cmp	r3, #0
 8000924:	d100      	bne.n	8000928 <__aeabi_dsub+0xcc>
 8000926:	e166      	b.n	8000bf6 <__aeabi_dsub+0x39a>
 8000928:	4650      	mov	r0, sl
 800092a:	f000 fbb3 	bl	8001094 <__clzsi2>
 800092e:	0003      	movs	r3, r0
 8000930:	3b08      	subs	r3, #8
 8000932:	2220      	movs	r2, #32
 8000934:	0020      	movs	r0, r4
 8000936:	1ad2      	subs	r2, r2, r3
 8000938:	4651      	mov	r1, sl
 800093a:	40d0      	lsrs	r0, r2
 800093c:	4099      	lsls	r1, r3
 800093e:	0002      	movs	r2, r0
 8000940:	409c      	lsls	r4, r3
 8000942:	430a      	orrs	r2, r1
 8000944:	429e      	cmp	r6, r3
 8000946:	dd00      	ble.n	800094a <__aeabi_dsub+0xee>
 8000948:	e164      	b.n	8000c14 <__aeabi_dsub+0x3b8>
 800094a:	1b9b      	subs	r3, r3, r6
 800094c:	1c59      	adds	r1, r3, #1
 800094e:	291f      	cmp	r1, #31
 8000950:	dd00      	ble.n	8000954 <__aeabi_dsub+0xf8>
 8000952:	e0fe      	b.n	8000b52 <__aeabi_dsub+0x2f6>
 8000954:	2320      	movs	r3, #32
 8000956:	0010      	movs	r0, r2
 8000958:	0026      	movs	r6, r4
 800095a:	1a5b      	subs	r3, r3, r1
 800095c:	409c      	lsls	r4, r3
 800095e:	4098      	lsls	r0, r3
 8000960:	40ce      	lsrs	r6, r1
 8000962:	40ca      	lsrs	r2, r1
 8000964:	1e63      	subs	r3, r4, #1
 8000966:	419c      	sbcs	r4, r3
 8000968:	4330      	orrs	r0, r6
 800096a:	4692      	mov	sl, r2
 800096c:	2600      	movs	r6, #0
 800096e:	4304      	orrs	r4, r0
 8000970:	0763      	lsls	r3, r4, #29
 8000972:	d009      	beq.n	8000988 <__aeabi_dsub+0x12c>
 8000974:	230f      	movs	r3, #15
 8000976:	4023      	ands	r3, r4
 8000978:	2b04      	cmp	r3, #4
 800097a:	d005      	beq.n	8000988 <__aeabi_dsub+0x12c>
 800097c:	1d23      	adds	r3, r4, #4
 800097e:	42a3      	cmp	r3, r4
 8000980:	41a4      	sbcs	r4, r4
 8000982:	4264      	negs	r4, r4
 8000984:	44a2      	add	sl, r4
 8000986:	001c      	movs	r4, r3
 8000988:	4653      	mov	r3, sl
 800098a:	021b      	lsls	r3, r3, #8
 800098c:	d400      	bmi.n	8000990 <__aeabi_dsub+0x134>
 800098e:	e0f2      	b.n	8000b76 <__aeabi_dsub+0x31a>
 8000990:	4b8c      	ldr	r3, [pc, #560]	; (8000bc4 <__aeabi_dsub+0x368>)
 8000992:	3601      	adds	r6, #1
 8000994:	429e      	cmp	r6, r3
 8000996:	d100      	bne.n	800099a <__aeabi_dsub+0x13e>
 8000998:	e10f      	b.n	8000bba <__aeabi_dsub+0x35e>
 800099a:	4653      	mov	r3, sl
 800099c:	498a      	ldr	r1, [pc, #552]	; (8000bc8 <__aeabi_dsub+0x36c>)
 800099e:	08e4      	lsrs	r4, r4, #3
 80009a0:	400b      	ands	r3, r1
 80009a2:	0019      	movs	r1, r3
 80009a4:	075b      	lsls	r3, r3, #29
 80009a6:	4323      	orrs	r3, r4
 80009a8:	0572      	lsls	r2, r6, #21
 80009aa:	024c      	lsls	r4, r1, #9
 80009ac:	0b24      	lsrs	r4, r4, #12
 80009ae:	0d52      	lsrs	r2, r2, #21
 80009b0:	0512      	lsls	r2, r2, #20
 80009b2:	4322      	orrs	r2, r4
 80009b4:	07ed      	lsls	r5, r5, #31
 80009b6:	432a      	orrs	r2, r5
 80009b8:	0018      	movs	r0, r3
 80009ba:	0011      	movs	r1, r2
 80009bc:	b003      	add	sp, #12
 80009be:	bcf0      	pop	{r4, r5, r6, r7}
 80009c0:	46bb      	mov	fp, r7
 80009c2:	46b2      	mov	sl, r6
 80009c4:	46a9      	mov	r9, r5
 80009c6:	46a0      	mov	r8, r4
 80009c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009ca:	1ab4      	subs	r4, r6, r2
 80009cc:	46a4      	mov	ip, r4
 80009ce:	2c00      	cmp	r4, #0
 80009d0:	dd59      	ble.n	8000a86 <__aeabi_dsub+0x22a>
 80009d2:	2a00      	cmp	r2, #0
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dsub+0x17c>
 80009d6:	e0b0      	b.n	8000b3a <__aeabi_dsub+0x2de>
 80009d8:	4556      	cmp	r6, sl
 80009da:	d100      	bne.n	80009de <__aeabi_dsub+0x182>
 80009dc:	e0fa      	b.n	8000bd4 <__aeabi_dsub+0x378>
 80009de:	2280      	movs	r2, #128	; 0x80
 80009e0:	0412      	lsls	r2, r2, #16
 80009e2:	4317      	orrs	r7, r2
 80009e4:	4662      	mov	r2, ip
 80009e6:	2a38      	cmp	r2, #56	; 0x38
 80009e8:	dd00      	ble.n	80009ec <__aeabi_dsub+0x190>
 80009ea:	e0d4      	b.n	8000b96 <__aeabi_dsub+0x33a>
 80009ec:	2a1f      	cmp	r2, #31
 80009ee:	dc00      	bgt.n	80009f2 <__aeabi_dsub+0x196>
 80009f0:	e1c0      	b.n	8000d74 <__aeabi_dsub+0x518>
 80009f2:	0039      	movs	r1, r7
 80009f4:	3a20      	subs	r2, #32
 80009f6:	40d1      	lsrs	r1, r2
 80009f8:	4662      	mov	r2, ip
 80009fa:	2a20      	cmp	r2, #32
 80009fc:	d006      	beq.n	8000a0c <__aeabi_dsub+0x1b0>
 80009fe:	4664      	mov	r4, ip
 8000a00:	2240      	movs	r2, #64	; 0x40
 8000a02:	1b12      	subs	r2, r2, r4
 8000a04:	003c      	movs	r4, r7
 8000a06:	4094      	lsls	r4, r2
 8000a08:	4304      	orrs	r4, r0
 8000a0a:	9401      	str	r4, [sp, #4]
 8000a0c:	9c01      	ldr	r4, [sp, #4]
 8000a0e:	1e62      	subs	r2, r4, #1
 8000a10:	4194      	sbcs	r4, r2
 8000a12:	430c      	orrs	r4, r1
 8000a14:	e0c3      	b.n	8000b9e <__aeabi_dsub+0x342>
 8000a16:	003c      	movs	r4, r7
 8000a18:	4304      	orrs	r4, r0
 8000a1a:	d02b      	beq.n	8000a74 <__aeabi_dsub+0x218>
 8000a1c:	468b      	mov	fp, r1
 8000a1e:	428d      	cmp	r5, r1
 8000a20:	d02e      	beq.n	8000a80 <__aeabi_dsub+0x224>
 8000a22:	4c6a      	ldr	r4, [pc, #424]	; (8000bcc <__aeabi_dsub+0x370>)
 8000a24:	46a4      	mov	ip, r4
 8000a26:	44b4      	add	ip, r6
 8000a28:	4664      	mov	r4, ip
 8000a2a:	2c00      	cmp	r4, #0
 8000a2c:	d05f      	beq.n	8000aee <__aeabi_dsub+0x292>
 8000a2e:	1b94      	subs	r4, r2, r6
 8000a30:	46a4      	mov	ip, r4
 8000a32:	2e00      	cmp	r6, #0
 8000a34:	d000      	beq.n	8000a38 <__aeabi_dsub+0x1dc>
 8000a36:	e120      	b.n	8000c7a <__aeabi_dsub+0x41e>
 8000a38:	464c      	mov	r4, r9
 8000a3a:	431c      	orrs	r4, r3
 8000a3c:	d100      	bne.n	8000a40 <__aeabi_dsub+0x1e4>
 8000a3e:	e1c7      	b.n	8000dd0 <__aeabi_dsub+0x574>
 8000a40:	4661      	mov	r1, ip
 8000a42:	1e4c      	subs	r4, r1, #1
 8000a44:	2901      	cmp	r1, #1
 8000a46:	d100      	bne.n	8000a4a <__aeabi_dsub+0x1ee>
 8000a48:	e223      	b.n	8000e92 <__aeabi_dsub+0x636>
 8000a4a:	4d5e      	ldr	r5, [pc, #376]	; (8000bc4 <__aeabi_dsub+0x368>)
 8000a4c:	45ac      	cmp	ip, r5
 8000a4e:	d100      	bne.n	8000a52 <__aeabi_dsub+0x1f6>
 8000a50:	e1d8      	b.n	8000e04 <__aeabi_dsub+0x5a8>
 8000a52:	46a4      	mov	ip, r4
 8000a54:	e11a      	b.n	8000c8c <__aeabi_dsub+0x430>
 8000a56:	003a      	movs	r2, r7
 8000a58:	4302      	orrs	r2, r0
 8000a5a:	d100      	bne.n	8000a5e <__aeabi_dsub+0x202>
 8000a5c:	e0e4      	b.n	8000c28 <__aeabi_dsub+0x3cc>
 8000a5e:	0022      	movs	r2, r4
 8000a60:	3a01      	subs	r2, #1
 8000a62:	2c01      	cmp	r4, #1
 8000a64:	d100      	bne.n	8000a68 <__aeabi_dsub+0x20c>
 8000a66:	e1c3      	b.n	8000df0 <__aeabi_dsub+0x594>
 8000a68:	4956      	ldr	r1, [pc, #344]	; (8000bc4 <__aeabi_dsub+0x368>)
 8000a6a:	428c      	cmp	r4, r1
 8000a6c:	d100      	bne.n	8000a70 <__aeabi_dsub+0x214>
 8000a6e:	e0b1      	b.n	8000bd4 <__aeabi_dsub+0x378>
 8000a70:	4694      	mov	ip, r2
 8000a72:	e72b      	b.n	80008cc <__aeabi_dsub+0x70>
 8000a74:	2401      	movs	r4, #1
 8000a76:	4061      	eors	r1, r4
 8000a78:	468b      	mov	fp, r1
 8000a7a:	428d      	cmp	r5, r1
 8000a7c:	d000      	beq.n	8000a80 <__aeabi_dsub+0x224>
 8000a7e:	e716      	b.n	80008ae <__aeabi_dsub+0x52>
 8000a80:	4952      	ldr	r1, [pc, #328]	; (8000bcc <__aeabi_dsub+0x370>)
 8000a82:	468c      	mov	ip, r1
 8000a84:	44b4      	add	ip, r6
 8000a86:	4664      	mov	r4, ip
 8000a88:	2c00      	cmp	r4, #0
 8000a8a:	d100      	bne.n	8000a8e <__aeabi_dsub+0x232>
 8000a8c:	e0d3      	b.n	8000c36 <__aeabi_dsub+0x3da>
 8000a8e:	1b91      	subs	r1, r2, r6
 8000a90:	468c      	mov	ip, r1
 8000a92:	2e00      	cmp	r6, #0
 8000a94:	d100      	bne.n	8000a98 <__aeabi_dsub+0x23c>
 8000a96:	e15e      	b.n	8000d56 <__aeabi_dsub+0x4fa>
 8000a98:	494a      	ldr	r1, [pc, #296]	; (8000bc4 <__aeabi_dsub+0x368>)
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	d100      	bne.n	8000aa0 <__aeabi_dsub+0x244>
 8000a9e:	e1be      	b.n	8000e1e <__aeabi_dsub+0x5c2>
 8000aa0:	2180      	movs	r1, #128	; 0x80
 8000aa2:	464c      	mov	r4, r9
 8000aa4:	0409      	lsls	r1, r1, #16
 8000aa6:	430c      	orrs	r4, r1
 8000aa8:	46a1      	mov	r9, r4
 8000aaa:	4661      	mov	r1, ip
 8000aac:	2938      	cmp	r1, #56	; 0x38
 8000aae:	dd00      	ble.n	8000ab2 <__aeabi_dsub+0x256>
 8000ab0:	e1ba      	b.n	8000e28 <__aeabi_dsub+0x5cc>
 8000ab2:	291f      	cmp	r1, #31
 8000ab4:	dd00      	ble.n	8000ab8 <__aeabi_dsub+0x25c>
 8000ab6:	e227      	b.n	8000f08 <__aeabi_dsub+0x6ac>
 8000ab8:	2420      	movs	r4, #32
 8000aba:	1a64      	subs	r4, r4, r1
 8000abc:	4649      	mov	r1, r9
 8000abe:	40a1      	lsls	r1, r4
 8000ac0:	001e      	movs	r6, r3
 8000ac2:	4688      	mov	r8, r1
 8000ac4:	4661      	mov	r1, ip
 8000ac6:	40a3      	lsls	r3, r4
 8000ac8:	40ce      	lsrs	r6, r1
 8000aca:	4641      	mov	r1, r8
 8000acc:	1e5c      	subs	r4, r3, #1
 8000ace:	41a3      	sbcs	r3, r4
 8000ad0:	4331      	orrs	r1, r6
 8000ad2:	4319      	orrs	r1, r3
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	4663      	mov	r3, ip
 8000ad8:	4649      	mov	r1, r9
 8000ada:	40d9      	lsrs	r1, r3
 8000adc:	187f      	adds	r7, r7, r1
 8000ade:	1824      	adds	r4, r4, r0
 8000ae0:	4284      	cmp	r4, r0
 8000ae2:	419b      	sbcs	r3, r3
 8000ae4:	425b      	negs	r3, r3
 8000ae6:	469a      	mov	sl, r3
 8000ae8:	0016      	movs	r6, r2
 8000aea:	44ba      	add	sl, r7
 8000aec:	e05d      	b.n	8000baa <__aeabi_dsub+0x34e>
 8000aee:	4c38      	ldr	r4, [pc, #224]	; (8000bd0 <__aeabi_dsub+0x374>)
 8000af0:	1c72      	adds	r2, r6, #1
 8000af2:	4222      	tst	r2, r4
 8000af4:	d000      	beq.n	8000af8 <__aeabi_dsub+0x29c>
 8000af6:	e0df      	b.n	8000cb8 <__aeabi_dsub+0x45c>
 8000af8:	464a      	mov	r2, r9
 8000afa:	431a      	orrs	r2, r3
 8000afc:	2e00      	cmp	r6, #0
 8000afe:	d000      	beq.n	8000b02 <__aeabi_dsub+0x2a6>
 8000b00:	e15c      	b.n	8000dbc <__aeabi_dsub+0x560>
 8000b02:	2a00      	cmp	r2, #0
 8000b04:	d100      	bne.n	8000b08 <__aeabi_dsub+0x2ac>
 8000b06:	e1cf      	b.n	8000ea8 <__aeabi_dsub+0x64c>
 8000b08:	003a      	movs	r2, r7
 8000b0a:	4302      	orrs	r2, r0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dsub+0x2b4>
 8000b0e:	e17f      	b.n	8000e10 <__aeabi_dsub+0x5b4>
 8000b10:	1a1c      	subs	r4, r3, r0
 8000b12:	464a      	mov	r2, r9
 8000b14:	42a3      	cmp	r3, r4
 8000b16:	4189      	sbcs	r1, r1
 8000b18:	1bd2      	subs	r2, r2, r7
 8000b1a:	4249      	negs	r1, r1
 8000b1c:	1a52      	subs	r2, r2, r1
 8000b1e:	4692      	mov	sl, r2
 8000b20:	0212      	lsls	r2, r2, #8
 8000b22:	d400      	bmi.n	8000b26 <__aeabi_dsub+0x2ca>
 8000b24:	e20a      	b.n	8000f3c <__aeabi_dsub+0x6e0>
 8000b26:	1ac4      	subs	r4, r0, r3
 8000b28:	42a0      	cmp	r0, r4
 8000b2a:	4180      	sbcs	r0, r0
 8000b2c:	464b      	mov	r3, r9
 8000b2e:	4240      	negs	r0, r0
 8000b30:	1aff      	subs	r7, r7, r3
 8000b32:	1a3b      	subs	r3, r7, r0
 8000b34:	469a      	mov	sl, r3
 8000b36:	465d      	mov	r5, fp
 8000b38:	e71a      	b.n	8000970 <__aeabi_dsub+0x114>
 8000b3a:	003a      	movs	r2, r7
 8000b3c:	4302      	orrs	r2, r0
 8000b3e:	d073      	beq.n	8000c28 <__aeabi_dsub+0x3cc>
 8000b40:	0022      	movs	r2, r4
 8000b42:	3a01      	subs	r2, #1
 8000b44:	2c01      	cmp	r4, #1
 8000b46:	d100      	bne.n	8000b4a <__aeabi_dsub+0x2ee>
 8000b48:	e0cb      	b.n	8000ce2 <__aeabi_dsub+0x486>
 8000b4a:	4554      	cmp	r4, sl
 8000b4c:	d042      	beq.n	8000bd4 <__aeabi_dsub+0x378>
 8000b4e:	4694      	mov	ip, r2
 8000b50:	e748      	b.n	80009e4 <__aeabi_dsub+0x188>
 8000b52:	0010      	movs	r0, r2
 8000b54:	3b1f      	subs	r3, #31
 8000b56:	40d8      	lsrs	r0, r3
 8000b58:	2920      	cmp	r1, #32
 8000b5a:	d003      	beq.n	8000b64 <__aeabi_dsub+0x308>
 8000b5c:	2340      	movs	r3, #64	; 0x40
 8000b5e:	1a5b      	subs	r3, r3, r1
 8000b60:	409a      	lsls	r2, r3
 8000b62:	4314      	orrs	r4, r2
 8000b64:	1e63      	subs	r3, r4, #1
 8000b66:	419c      	sbcs	r4, r3
 8000b68:	2300      	movs	r3, #0
 8000b6a:	2600      	movs	r6, #0
 8000b6c:	469a      	mov	sl, r3
 8000b6e:	4304      	orrs	r4, r0
 8000b70:	0763      	lsls	r3, r4, #29
 8000b72:	d000      	beq.n	8000b76 <__aeabi_dsub+0x31a>
 8000b74:	e6fe      	b.n	8000974 <__aeabi_dsub+0x118>
 8000b76:	4652      	mov	r2, sl
 8000b78:	08e3      	lsrs	r3, r4, #3
 8000b7a:	0752      	lsls	r2, r2, #29
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	4652      	mov	r2, sl
 8000b80:	46b4      	mov	ip, r6
 8000b82:	08d2      	lsrs	r2, r2, #3
 8000b84:	490f      	ldr	r1, [pc, #60]	; (8000bc4 <__aeabi_dsub+0x368>)
 8000b86:	458c      	cmp	ip, r1
 8000b88:	d02a      	beq.n	8000be0 <__aeabi_dsub+0x384>
 8000b8a:	0312      	lsls	r2, r2, #12
 8000b8c:	0b14      	lsrs	r4, r2, #12
 8000b8e:	4662      	mov	r2, ip
 8000b90:	0552      	lsls	r2, r2, #21
 8000b92:	0d52      	lsrs	r2, r2, #21
 8000b94:	e70c      	b.n	80009b0 <__aeabi_dsub+0x154>
 8000b96:	003c      	movs	r4, r7
 8000b98:	4304      	orrs	r4, r0
 8000b9a:	1e62      	subs	r2, r4, #1
 8000b9c:	4194      	sbcs	r4, r2
 8000b9e:	18e4      	adds	r4, r4, r3
 8000ba0:	429c      	cmp	r4, r3
 8000ba2:	4192      	sbcs	r2, r2
 8000ba4:	4252      	negs	r2, r2
 8000ba6:	444a      	add	r2, r9
 8000ba8:	4692      	mov	sl, r2
 8000baa:	4653      	mov	r3, sl
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	d5df      	bpl.n	8000b70 <__aeabi_dsub+0x314>
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <__aeabi_dsub+0x368>)
 8000bb2:	3601      	adds	r6, #1
 8000bb4:	429e      	cmp	r6, r3
 8000bb6:	d000      	beq.n	8000bba <__aeabi_dsub+0x35e>
 8000bb8:	e0a0      	b.n	8000cfc <__aeabi_dsub+0x4a0>
 8000bba:	0032      	movs	r2, r6
 8000bbc:	2400      	movs	r4, #0
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	e6f6      	b.n	80009b0 <__aeabi_dsub+0x154>
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	000007ff 	.word	0x000007ff
 8000bc8:	ff7fffff 	.word	0xff7fffff
 8000bcc:	fffff801 	.word	0xfffff801
 8000bd0:	000007fe 	.word	0x000007fe
 8000bd4:	08db      	lsrs	r3, r3, #3
 8000bd6:	464a      	mov	r2, r9
 8000bd8:	0752      	lsls	r2, r2, #29
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	464a      	mov	r2, r9
 8000bde:	08d2      	lsrs	r2, r2, #3
 8000be0:	0019      	movs	r1, r3
 8000be2:	4311      	orrs	r1, r2
 8000be4:	d100      	bne.n	8000be8 <__aeabi_dsub+0x38c>
 8000be6:	e1b5      	b.n	8000f54 <__aeabi_dsub+0x6f8>
 8000be8:	2480      	movs	r4, #128	; 0x80
 8000bea:	0324      	lsls	r4, r4, #12
 8000bec:	4314      	orrs	r4, r2
 8000bee:	0324      	lsls	r4, r4, #12
 8000bf0:	4ad5      	ldr	r2, [pc, #852]	; (8000f48 <__aeabi_dsub+0x6ec>)
 8000bf2:	0b24      	lsrs	r4, r4, #12
 8000bf4:	e6dc      	b.n	80009b0 <__aeabi_dsub+0x154>
 8000bf6:	0020      	movs	r0, r4
 8000bf8:	f000 fa4c 	bl	8001094 <__clzsi2>
 8000bfc:	0003      	movs	r3, r0
 8000bfe:	3318      	adds	r3, #24
 8000c00:	2b1f      	cmp	r3, #31
 8000c02:	dc00      	bgt.n	8000c06 <__aeabi_dsub+0x3aa>
 8000c04:	e695      	b.n	8000932 <__aeabi_dsub+0xd6>
 8000c06:	0022      	movs	r2, r4
 8000c08:	3808      	subs	r0, #8
 8000c0a:	4082      	lsls	r2, r0
 8000c0c:	2400      	movs	r4, #0
 8000c0e:	429e      	cmp	r6, r3
 8000c10:	dc00      	bgt.n	8000c14 <__aeabi_dsub+0x3b8>
 8000c12:	e69a      	b.n	800094a <__aeabi_dsub+0xee>
 8000c14:	1af6      	subs	r6, r6, r3
 8000c16:	4bcd      	ldr	r3, [pc, #820]	; (8000f4c <__aeabi_dsub+0x6f0>)
 8000c18:	401a      	ands	r2, r3
 8000c1a:	4692      	mov	sl, r2
 8000c1c:	e6a8      	b.n	8000970 <__aeabi_dsub+0x114>
 8000c1e:	003c      	movs	r4, r7
 8000c20:	4304      	orrs	r4, r0
 8000c22:	1e62      	subs	r2, r4, #1
 8000c24:	4194      	sbcs	r4, r2
 8000c26:	e66c      	b.n	8000902 <__aeabi_dsub+0xa6>
 8000c28:	464a      	mov	r2, r9
 8000c2a:	08db      	lsrs	r3, r3, #3
 8000c2c:	0752      	lsls	r2, r2, #29
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	464a      	mov	r2, r9
 8000c32:	08d2      	lsrs	r2, r2, #3
 8000c34:	e7a6      	b.n	8000b84 <__aeabi_dsub+0x328>
 8000c36:	4cc6      	ldr	r4, [pc, #792]	; (8000f50 <__aeabi_dsub+0x6f4>)
 8000c38:	1c72      	adds	r2, r6, #1
 8000c3a:	4222      	tst	r2, r4
 8000c3c:	d000      	beq.n	8000c40 <__aeabi_dsub+0x3e4>
 8000c3e:	e0ac      	b.n	8000d9a <__aeabi_dsub+0x53e>
 8000c40:	464a      	mov	r2, r9
 8000c42:	431a      	orrs	r2, r3
 8000c44:	2e00      	cmp	r6, #0
 8000c46:	d000      	beq.n	8000c4a <__aeabi_dsub+0x3ee>
 8000c48:	e105      	b.n	8000e56 <__aeabi_dsub+0x5fa>
 8000c4a:	2a00      	cmp	r2, #0
 8000c4c:	d100      	bne.n	8000c50 <__aeabi_dsub+0x3f4>
 8000c4e:	e156      	b.n	8000efe <__aeabi_dsub+0x6a2>
 8000c50:	003a      	movs	r2, r7
 8000c52:	4302      	orrs	r2, r0
 8000c54:	d100      	bne.n	8000c58 <__aeabi_dsub+0x3fc>
 8000c56:	e0db      	b.n	8000e10 <__aeabi_dsub+0x5b4>
 8000c58:	181c      	adds	r4, r3, r0
 8000c5a:	429c      	cmp	r4, r3
 8000c5c:	419b      	sbcs	r3, r3
 8000c5e:	444f      	add	r7, r9
 8000c60:	46ba      	mov	sl, r7
 8000c62:	425b      	negs	r3, r3
 8000c64:	449a      	add	sl, r3
 8000c66:	4653      	mov	r3, sl
 8000c68:	021b      	lsls	r3, r3, #8
 8000c6a:	d400      	bmi.n	8000c6e <__aeabi_dsub+0x412>
 8000c6c:	e780      	b.n	8000b70 <__aeabi_dsub+0x314>
 8000c6e:	4652      	mov	r2, sl
 8000c70:	4bb6      	ldr	r3, [pc, #728]	; (8000f4c <__aeabi_dsub+0x6f0>)
 8000c72:	2601      	movs	r6, #1
 8000c74:	401a      	ands	r2, r3
 8000c76:	4692      	mov	sl, r2
 8000c78:	e77a      	b.n	8000b70 <__aeabi_dsub+0x314>
 8000c7a:	4cb3      	ldr	r4, [pc, #716]	; (8000f48 <__aeabi_dsub+0x6ec>)
 8000c7c:	42a2      	cmp	r2, r4
 8000c7e:	d100      	bne.n	8000c82 <__aeabi_dsub+0x426>
 8000c80:	e0c0      	b.n	8000e04 <__aeabi_dsub+0x5a8>
 8000c82:	2480      	movs	r4, #128	; 0x80
 8000c84:	464d      	mov	r5, r9
 8000c86:	0424      	lsls	r4, r4, #16
 8000c88:	4325      	orrs	r5, r4
 8000c8a:	46a9      	mov	r9, r5
 8000c8c:	4664      	mov	r4, ip
 8000c8e:	2c38      	cmp	r4, #56	; 0x38
 8000c90:	dc53      	bgt.n	8000d3a <__aeabi_dsub+0x4de>
 8000c92:	4661      	mov	r1, ip
 8000c94:	2c1f      	cmp	r4, #31
 8000c96:	dd00      	ble.n	8000c9a <__aeabi_dsub+0x43e>
 8000c98:	e0cd      	b.n	8000e36 <__aeabi_dsub+0x5da>
 8000c9a:	2520      	movs	r5, #32
 8000c9c:	001e      	movs	r6, r3
 8000c9e:	1b2d      	subs	r5, r5, r4
 8000ca0:	464c      	mov	r4, r9
 8000ca2:	40ab      	lsls	r3, r5
 8000ca4:	40ac      	lsls	r4, r5
 8000ca6:	40ce      	lsrs	r6, r1
 8000ca8:	1e5d      	subs	r5, r3, #1
 8000caa:	41ab      	sbcs	r3, r5
 8000cac:	4334      	orrs	r4, r6
 8000cae:	4323      	orrs	r3, r4
 8000cb0:	464c      	mov	r4, r9
 8000cb2:	40cc      	lsrs	r4, r1
 8000cb4:	1b3f      	subs	r7, r7, r4
 8000cb6:	e045      	b.n	8000d44 <__aeabi_dsub+0x4e8>
 8000cb8:	464a      	mov	r2, r9
 8000cba:	1a1c      	subs	r4, r3, r0
 8000cbc:	1bd1      	subs	r1, r2, r7
 8000cbe:	42a3      	cmp	r3, r4
 8000cc0:	4192      	sbcs	r2, r2
 8000cc2:	4252      	negs	r2, r2
 8000cc4:	4692      	mov	sl, r2
 8000cc6:	000a      	movs	r2, r1
 8000cc8:	4651      	mov	r1, sl
 8000cca:	1a52      	subs	r2, r2, r1
 8000ccc:	4692      	mov	sl, r2
 8000cce:	0212      	lsls	r2, r2, #8
 8000cd0:	d500      	bpl.n	8000cd4 <__aeabi_dsub+0x478>
 8000cd2:	e083      	b.n	8000ddc <__aeabi_dsub+0x580>
 8000cd4:	4653      	mov	r3, sl
 8000cd6:	4323      	orrs	r3, r4
 8000cd8:	d000      	beq.n	8000cdc <__aeabi_dsub+0x480>
 8000cda:	e621      	b.n	8000920 <__aeabi_dsub+0xc4>
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2500      	movs	r5, #0
 8000ce0:	e753      	b.n	8000b8a <__aeabi_dsub+0x32e>
 8000ce2:	181c      	adds	r4, r3, r0
 8000ce4:	429c      	cmp	r4, r3
 8000ce6:	419b      	sbcs	r3, r3
 8000ce8:	444f      	add	r7, r9
 8000cea:	46ba      	mov	sl, r7
 8000cec:	425b      	negs	r3, r3
 8000cee:	449a      	add	sl, r3
 8000cf0:	4653      	mov	r3, sl
 8000cf2:	2601      	movs	r6, #1
 8000cf4:	021b      	lsls	r3, r3, #8
 8000cf6:	d400      	bmi.n	8000cfa <__aeabi_dsub+0x49e>
 8000cf8:	e73a      	b.n	8000b70 <__aeabi_dsub+0x314>
 8000cfa:	2602      	movs	r6, #2
 8000cfc:	4652      	mov	r2, sl
 8000cfe:	4b93      	ldr	r3, [pc, #588]	; (8000f4c <__aeabi_dsub+0x6f0>)
 8000d00:	2101      	movs	r1, #1
 8000d02:	401a      	ands	r2, r3
 8000d04:	0013      	movs	r3, r2
 8000d06:	4021      	ands	r1, r4
 8000d08:	0862      	lsrs	r2, r4, #1
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	07dc      	lsls	r4, r3, #31
 8000d0e:	085b      	lsrs	r3, r3, #1
 8000d10:	469a      	mov	sl, r3
 8000d12:	4314      	orrs	r4, r2
 8000d14:	e62c      	b.n	8000970 <__aeabi_dsub+0x114>
 8000d16:	0039      	movs	r1, r7
 8000d18:	3a20      	subs	r2, #32
 8000d1a:	40d1      	lsrs	r1, r2
 8000d1c:	4662      	mov	r2, ip
 8000d1e:	2a20      	cmp	r2, #32
 8000d20:	d006      	beq.n	8000d30 <__aeabi_dsub+0x4d4>
 8000d22:	4664      	mov	r4, ip
 8000d24:	2240      	movs	r2, #64	; 0x40
 8000d26:	1b12      	subs	r2, r2, r4
 8000d28:	003c      	movs	r4, r7
 8000d2a:	4094      	lsls	r4, r2
 8000d2c:	4304      	orrs	r4, r0
 8000d2e:	9401      	str	r4, [sp, #4]
 8000d30:	9c01      	ldr	r4, [sp, #4]
 8000d32:	1e62      	subs	r2, r4, #1
 8000d34:	4194      	sbcs	r4, r2
 8000d36:	430c      	orrs	r4, r1
 8000d38:	e5e3      	b.n	8000902 <__aeabi_dsub+0xa6>
 8000d3a:	4649      	mov	r1, r9
 8000d3c:	4319      	orrs	r1, r3
 8000d3e:	000b      	movs	r3, r1
 8000d40:	1e5c      	subs	r4, r3, #1
 8000d42:	41a3      	sbcs	r3, r4
 8000d44:	1ac4      	subs	r4, r0, r3
 8000d46:	42a0      	cmp	r0, r4
 8000d48:	419b      	sbcs	r3, r3
 8000d4a:	425b      	negs	r3, r3
 8000d4c:	1afb      	subs	r3, r7, r3
 8000d4e:	469a      	mov	sl, r3
 8000d50:	465d      	mov	r5, fp
 8000d52:	0016      	movs	r6, r2
 8000d54:	e5dc      	b.n	8000910 <__aeabi_dsub+0xb4>
 8000d56:	4649      	mov	r1, r9
 8000d58:	4319      	orrs	r1, r3
 8000d5a:	d100      	bne.n	8000d5e <__aeabi_dsub+0x502>
 8000d5c:	e0ae      	b.n	8000ebc <__aeabi_dsub+0x660>
 8000d5e:	4661      	mov	r1, ip
 8000d60:	4664      	mov	r4, ip
 8000d62:	3901      	subs	r1, #1
 8000d64:	2c01      	cmp	r4, #1
 8000d66:	d100      	bne.n	8000d6a <__aeabi_dsub+0x50e>
 8000d68:	e0e0      	b.n	8000f2c <__aeabi_dsub+0x6d0>
 8000d6a:	4c77      	ldr	r4, [pc, #476]	; (8000f48 <__aeabi_dsub+0x6ec>)
 8000d6c:	45a4      	cmp	ip, r4
 8000d6e:	d056      	beq.n	8000e1e <__aeabi_dsub+0x5c2>
 8000d70:	468c      	mov	ip, r1
 8000d72:	e69a      	b.n	8000aaa <__aeabi_dsub+0x24e>
 8000d74:	4661      	mov	r1, ip
 8000d76:	2220      	movs	r2, #32
 8000d78:	003c      	movs	r4, r7
 8000d7a:	1a52      	subs	r2, r2, r1
 8000d7c:	4094      	lsls	r4, r2
 8000d7e:	0001      	movs	r1, r0
 8000d80:	4090      	lsls	r0, r2
 8000d82:	46a0      	mov	r8, r4
 8000d84:	4664      	mov	r4, ip
 8000d86:	1e42      	subs	r2, r0, #1
 8000d88:	4190      	sbcs	r0, r2
 8000d8a:	4662      	mov	r2, ip
 8000d8c:	40e1      	lsrs	r1, r4
 8000d8e:	4644      	mov	r4, r8
 8000d90:	40d7      	lsrs	r7, r2
 8000d92:	430c      	orrs	r4, r1
 8000d94:	4304      	orrs	r4, r0
 8000d96:	44b9      	add	r9, r7
 8000d98:	e701      	b.n	8000b9e <__aeabi_dsub+0x342>
 8000d9a:	496b      	ldr	r1, [pc, #428]	; (8000f48 <__aeabi_dsub+0x6ec>)
 8000d9c:	428a      	cmp	r2, r1
 8000d9e:	d100      	bne.n	8000da2 <__aeabi_dsub+0x546>
 8000da0:	e70c      	b.n	8000bbc <__aeabi_dsub+0x360>
 8000da2:	1818      	adds	r0, r3, r0
 8000da4:	4298      	cmp	r0, r3
 8000da6:	419b      	sbcs	r3, r3
 8000da8:	444f      	add	r7, r9
 8000daa:	425b      	negs	r3, r3
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	07dc      	lsls	r4, r3, #31
 8000db0:	0840      	lsrs	r0, r0, #1
 8000db2:	085b      	lsrs	r3, r3, #1
 8000db4:	469a      	mov	sl, r3
 8000db6:	0016      	movs	r6, r2
 8000db8:	4304      	orrs	r4, r0
 8000dba:	e6d9      	b.n	8000b70 <__aeabi_dsub+0x314>
 8000dbc:	2a00      	cmp	r2, #0
 8000dbe:	d000      	beq.n	8000dc2 <__aeabi_dsub+0x566>
 8000dc0:	e081      	b.n	8000ec6 <__aeabi_dsub+0x66a>
 8000dc2:	003b      	movs	r3, r7
 8000dc4:	4303      	orrs	r3, r0
 8000dc6:	d11d      	bne.n	8000e04 <__aeabi_dsub+0x5a8>
 8000dc8:	2280      	movs	r2, #128	; 0x80
 8000dca:	2500      	movs	r5, #0
 8000dcc:	0312      	lsls	r2, r2, #12
 8000dce:	e70b      	b.n	8000be8 <__aeabi_dsub+0x38c>
 8000dd0:	08c0      	lsrs	r0, r0, #3
 8000dd2:	077b      	lsls	r3, r7, #29
 8000dd4:	465d      	mov	r5, fp
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	08fa      	lsrs	r2, r7, #3
 8000dda:	e6d3      	b.n	8000b84 <__aeabi_dsub+0x328>
 8000ddc:	1ac4      	subs	r4, r0, r3
 8000dde:	42a0      	cmp	r0, r4
 8000de0:	4180      	sbcs	r0, r0
 8000de2:	464b      	mov	r3, r9
 8000de4:	4240      	negs	r0, r0
 8000de6:	1aff      	subs	r7, r7, r3
 8000de8:	1a3b      	subs	r3, r7, r0
 8000dea:	469a      	mov	sl, r3
 8000dec:	465d      	mov	r5, fp
 8000dee:	e597      	b.n	8000920 <__aeabi_dsub+0xc4>
 8000df0:	1a1c      	subs	r4, r3, r0
 8000df2:	464a      	mov	r2, r9
 8000df4:	42a3      	cmp	r3, r4
 8000df6:	419b      	sbcs	r3, r3
 8000df8:	1bd7      	subs	r7, r2, r7
 8000dfa:	425b      	negs	r3, r3
 8000dfc:	1afb      	subs	r3, r7, r3
 8000dfe:	469a      	mov	sl, r3
 8000e00:	2601      	movs	r6, #1
 8000e02:	e585      	b.n	8000910 <__aeabi_dsub+0xb4>
 8000e04:	08c0      	lsrs	r0, r0, #3
 8000e06:	077b      	lsls	r3, r7, #29
 8000e08:	465d      	mov	r5, fp
 8000e0a:	4303      	orrs	r3, r0
 8000e0c:	08fa      	lsrs	r2, r7, #3
 8000e0e:	e6e7      	b.n	8000be0 <__aeabi_dsub+0x384>
 8000e10:	464a      	mov	r2, r9
 8000e12:	08db      	lsrs	r3, r3, #3
 8000e14:	0752      	lsls	r2, r2, #29
 8000e16:	4313      	orrs	r3, r2
 8000e18:	464a      	mov	r2, r9
 8000e1a:	08d2      	lsrs	r2, r2, #3
 8000e1c:	e6b5      	b.n	8000b8a <__aeabi_dsub+0x32e>
 8000e1e:	08c0      	lsrs	r0, r0, #3
 8000e20:	077b      	lsls	r3, r7, #29
 8000e22:	4303      	orrs	r3, r0
 8000e24:	08fa      	lsrs	r2, r7, #3
 8000e26:	e6db      	b.n	8000be0 <__aeabi_dsub+0x384>
 8000e28:	4649      	mov	r1, r9
 8000e2a:	4319      	orrs	r1, r3
 8000e2c:	000b      	movs	r3, r1
 8000e2e:	1e59      	subs	r1, r3, #1
 8000e30:	418b      	sbcs	r3, r1
 8000e32:	001c      	movs	r4, r3
 8000e34:	e653      	b.n	8000ade <__aeabi_dsub+0x282>
 8000e36:	464d      	mov	r5, r9
 8000e38:	3c20      	subs	r4, #32
 8000e3a:	40e5      	lsrs	r5, r4
 8000e3c:	2920      	cmp	r1, #32
 8000e3e:	d005      	beq.n	8000e4c <__aeabi_dsub+0x5f0>
 8000e40:	2440      	movs	r4, #64	; 0x40
 8000e42:	1a64      	subs	r4, r4, r1
 8000e44:	4649      	mov	r1, r9
 8000e46:	40a1      	lsls	r1, r4
 8000e48:	430b      	orrs	r3, r1
 8000e4a:	4698      	mov	r8, r3
 8000e4c:	4643      	mov	r3, r8
 8000e4e:	1e5c      	subs	r4, r3, #1
 8000e50:	41a3      	sbcs	r3, r4
 8000e52:	432b      	orrs	r3, r5
 8000e54:	e776      	b.n	8000d44 <__aeabi_dsub+0x4e8>
 8000e56:	2a00      	cmp	r2, #0
 8000e58:	d0e1      	beq.n	8000e1e <__aeabi_dsub+0x5c2>
 8000e5a:	003a      	movs	r2, r7
 8000e5c:	08db      	lsrs	r3, r3, #3
 8000e5e:	4302      	orrs	r2, r0
 8000e60:	d100      	bne.n	8000e64 <__aeabi_dsub+0x608>
 8000e62:	e6b8      	b.n	8000bd6 <__aeabi_dsub+0x37a>
 8000e64:	464a      	mov	r2, r9
 8000e66:	0752      	lsls	r2, r2, #29
 8000e68:	2480      	movs	r4, #128	; 0x80
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	464a      	mov	r2, r9
 8000e6e:	0324      	lsls	r4, r4, #12
 8000e70:	08d2      	lsrs	r2, r2, #3
 8000e72:	4222      	tst	r2, r4
 8000e74:	d007      	beq.n	8000e86 <__aeabi_dsub+0x62a>
 8000e76:	08fe      	lsrs	r6, r7, #3
 8000e78:	4226      	tst	r6, r4
 8000e7a:	d104      	bne.n	8000e86 <__aeabi_dsub+0x62a>
 8000e7c:	465d      	mov	r5, fp
 8000e7e:	0032      	movs	r2, r6
 8000e80:	08c3      	lsrs	r3, r0, #3
 8000e82:	077f      	lsls	r7, r7, #29
 8000e84:	433b      	orrs	r3, r7
 8000e86:	0f59      	lsrs	r1, r3, #29
 8000e88:	00db      	lsls	r3, r3, #3
 8000e8a:	0749      	lsls	r1, r1, #29
 8000e8c:	08db      	lsrs	r3, r3, #3
 8000e8e:	430b      	orrs	r3, r1
 8000e90:	e6a6      	b.n	8000be0 <__aeabi_dsub+0x384>
 8000e92:	1ac4      	subs	r4, r0, r3
 8000e94:	42a0      	cmp	r0, r4
 8000e96:	4180      	sbcs	r0, r0
 8000e98:	464b      	mov	r3, r9
 8000e9a:	4240      	negs	r0, r0
 8000e9c:	1aff      	subs	r7, r7, r3
 8000e9e:	1a3b      	subs	r3, r7, r0
 8000ea0:	469a      	mov	sl, r3
 8000ea2:	465d      	mov	r5, fp
 8000ea4:	2601      	movs	r6, #1
 8000ea6:	e533      	b.n	8000910 <__aeabi_dsub+0xb4>
 8000ea8:	003b      	movs	r3, r7
 8000eaa:	4303      	orrs	r3, r0
 8000eac:	d100      	bne.n	8000eb0 <__aeabi_dsub+0x654>
 8000eae:	e715      	b.n	8000cdc <__aeabi_dsub+0x480>
 8000eb0:	08c0      	lsrs	r0, r0, #3
 8000eb2:	077b      	lsls	r3, r7, #29
 8000eb4:	465d      	mov	r5, fp
 8000eb6:	4303      	orrs	r3, r0
 8000eb8:	08fa      	lsrs	r2, r7, #3
 8000eba:	e666      	b.n	8000b8a <__aeabi_dsub+0x32e>
 8000ebc:	08c0      	lsrs	r0, r0, #3
 8000ebe:	077b      	lsls	r3, r7, #29
 8000ec0:	4303      	orrs	r3, r0
 8000ec2:	08fa      	lsrs	r2, r7, #3
 8000ec4:	e65e      	b.n	8000b84 <__aeabi_dsub+0x328>
 8000ec6:	003a      	movs	r2, r7
 8000ec8:	08db      	lsrs	r3, r3, #3
 8000eca:	4302      	orrs	r2, r0
 8000ecc:	d100      	bne.n	8000ed0 <__aeabi_dsub+0x674>
 8000ece:	e682      	b.n	8000bd6 <__aeabi_dsub+0x37a>
 8000ed0:	464a      	mov	r2, r9
 8000ed2:	0752      	lsls	r2, r2, #29
 8000ed4:	2480      	movs	r4, #128	; 0x80
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	464a      	mov	r2, r9
 8000eda:	0324      	lsls	r4, r4, #12
 8000edc:	08d2      	lsrs	r2, r2, #3
 8000ede:	4222      	tst	r2, r4
 8000ee0:	d007      	beq.n	8000ef2 <__aeabi_dsub+0x696>
 8000ee2:	08fe      	lsrs	r6, r7, #3
 8000ee4:	4226      	tst	r6, r4
 8000ee6:	d104      	bne.n	8000ef2 <__aeabi_dsub+0x696>
 8000ee8:	465d      	mov	r5, fp
 8000eea:	0032      	movs	r2, r6
 8000eec:	08c3      	lsrs	r3, r0, #3
 8000eee:	077f      	lsls	r7, r7, #29
 8000ef0:	433b      	orrs	r3, r7
 8000ef2:	0f59      	lsrs	r1, r3, #29
 8000ef4:	00db      	lsls	r3, r3, #3
 8000ef6:	08db      	lsrs	r3, r3, #3
 8000ef8:	0749      	lsls	r1, r1, #29
 8000efa:	430b      	orrs	r3, r1
 8000efc:	e670      	b.n	8000be0 <__aeabi_dsub+0x384>
 8000efe:	08c0      	lsrs	r0, r0, #3
 8000f00:	077b      	lsls	r3, r7, #29
 8000f02:	4303      	orrs	r3, r0
 8000f04:	08fa      	lsrs	r2, r7, #3
 8000f06:	e640      	b.n	8000b8a <__aeabi_dsub+0x32e>
 8000f08:	464c      	mov	r4, r9
 8000f0a:	3920      	subs	r1, #32
 8000f0c:	40cc      	lsrs	r4, r1
 8000f0e:	4661      	mov	r1, ip
 8000f10:	2920      	cmp	r1, #32
 8000f12:	d006      	beq.n	8000f22 <__aeabi_dsub+0x6c6>
 8000f14:	4666      	mov	r6, ip
 8000f16:	2140      	movs	r1, #64	; 0x40
 8000f18:	1b89      	subs	r1, r1, r6
 8000f1a:	464e      	mov	r6, r9
 8000f1c:	408e      	lsls	r6, r1
 8000f1e:	4333      	orrs	r3, r6
 8000f20:	4698      	mov	r8, r3
 8000f22:	4643      	mov	r3, r8
 8000f24:	1e59      	subs	r1, r3, #1
 8000f26:	418b      	sbcs	r3, r1
 8000f28:	431c      	orrs	r4, r3
 8000f2a:	e5d8      	b.n	8000ade <__aeabi_dsub+0x282>
 8000f2c:	181c      	adds	r4, r3, r0
 8000f2e:	4284      	cmp	r4, r0
 8000f30:	4180      	sbcs	r0, r0
 8000f32:	444f      	add	r7, r9
 8000f34:	46ba      	mov	sl, r7
 8000f36:	4240      	negs	r0, r0
 8000f38:	4482      	add	sl, r0
 8000f3a:	e6d9      	b.n	8000cf0 <__aeabi_dsub+0x494>
 8000f3c:	4653      	mov	r3, sl
 8000f3e:	4323      	orrs	r3, r4
 8000f40:	d100      	bne.n	8000f44 <__aeabi_dsub+0x6e8>
 8000f42:	e6cb      	b.n	8000cdc <__aeabi_dsub+0x480>
 8000f44:	e614      	b.n	8000b70 <__aeabi_dsub+0x314>
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	000007ff 	.word	0x000007ff
 8000f4c:	ff7fffff 	.word	0xff7fffff
 8000f50:	000007fe 	.word	0x000007fe
 8000f54:	2300      	movs	r3, #0
 8000f56:	4a01      	ldr	r2, [pc, #4]	; (8000f5c <__aeabi_dsub+0x700>)
 8000f58:	001c      	movs	r4, r3
 8000f5a:	e529      	b.n	80009b0 <__aeabi_dsub+0x154>
 8000f5c:	000007ff 	.word	0x000007ff

08000f60 <__aeabi_d2iz>:
 8000f60:	000a      	movs	r2, r1
 8000f62:	b530      	push	{r4, r5, lr}
 8000f64:	4c13      	ldr	r4, [pc, #76]	; (8000fb4 <__aeabi_d2iz+0x54>)
 8000f66:	0053      	lsls	r3, r2, #1
 8000f68:	0309      	lsls	r1, r1, #12
 8000f6a:	0005      	movs	r5, r0
 8000f6c:	0b09      	lsrs	r1, r1, #12
 8000f6e:	2000      	movs	r0, #0
 8000f70:	0d5b      	lsrs	r3, r3, #21
 8000f72:	0fd2      	lsrs	r2, r2, #31
 8000f74:	42a3      	cmp	r3, r4
 8000f76:	dd04      	ble.n	8000f82 <__aeabi_d2iz+0x22>
 8000f78:	480f      	ldr	r0, [pc, #60]	; (8000fb8 <__aeabi_d2iz+0x58>)
 8000f7a:	4283      	cmp	r3, r0
 8000f7c:	dd02      	ble.n	8000f84 <__aeabi_d2iz+0x24>
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <__aeabi_d2iz+0x5c>)
 8000f80:	18d0      	adds	r0, r2, r3
 8000f82:	bd30      	pop	{r4, r5, pc}
 8000f84:	2080      	movs	r0, #128	; 0x80
 8000f86:	0340      	lsls	r0, r0, #13
 8000f88:	4301      	orrs	r1, r0
 8000f8a:	480d      	ldr	r0, [pc, #52]	; (8000fc0 <__aeabi_d2iz+0x60>)
 8000f8c:	1ac0      	subs	r0, r0, r3
 8000f8e:	281f      	cmp	r0, #31
 8000f90:	dd08      	ble.n	8000fa4 <__aeabi_d2iz+0x44>
 8000f92:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <__aeabi_d2iz+0x64>)
 8000f94:	1ac3      	subs	r3, r0, r3
 8000f96:	40d9      	lsrs	r1, r3
 8000f98:	000b      	movs	r3, r1
 8000f9a:	4258      	negs	r0, r3
 8000f9c:	2a00      	cmp	r2, #0
 8000f9e:	d1f0      	bne.n	8000f82 <__aeabi_d2iz+0x22>
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	e7ee      	b.n	8000f82 <__aeabi_d2iz+0x22>
 8000fa4:	4c08      	ldr	r4, [pc, #32]	; (8000fc8 <__aeabi_d2iz+0x68>)
 8000fa6:	40c5      	lsrs	r5, r0
 8000fa8:	46a4      	mov	ip, r4
 8000faa:	4463      	add	r3, ip
 8000fac:	4099      	lsls	r1, r3
 8000fae:	000b      	movs	r3, r1
 8000fb0:	432b      	orrs	r3, r5
 8000fb2:	e7f2      	b.n	8000f9a <__aeabi_d2iz+0x3a>
 8000fb4:	000003fe 	.word	0x000003fe
 8000fb8:	0000041d 	.word	0x0000041d
 8000fbc:	7fffffff 	.word	0x7fffffff
 8000fc0:	00000433 	.word	0x00000433
 8000fc4:	00000413 	.word	0x00000413
 8000fc8:	fffffbed 	.word	0xfffffbed

08000fcc <__aeabi_ui2d>:
 8000fcc:	b510      	push	{r4, lr}
 8000fce:	1e04      	subs	r4, r0, #0
 8000fd0:	d010      	beq.n	8000ff4 <__aeabi_ui2d+0x28>
 8000fd2:	f000 f85f 	bl	8001094 <__clzsi2>
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <__aeabi_ui2d+0x48>)
 8000fd8:	1a1b      	subs	r3, r3, r0
 8000fda:	280a      	cmp	r0, #10
 8000fdc:	dc11      	bgt.n	8001002 <__aeabi_ui2d+0x36>
 8000fde:	220b      	movs	r2, #11
 8000fe0:	0021      	movs	r1, r4
 8000fe2:	1a12      	subs	r2, r2, r0
 8000fe4:	40d1      	lsrs	r1, r2
 8000fe6:	3015      	adds	r0, #21
 8000fe8:	030a      	lsls	r2, r1, #12
 8000fea:	055b      	lsls	r3, r3, #21
 8000fec:	4084      	lsls	r4, r0
 8000fee:	0b12      	lsrs	r2, r2, #12
 8000ff0:	0d5b      	lsrs	r3, r3, #21
 8000ff2:	e001      	b.n	8000ff8 <__aeabi_ui2d+0x2c>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	051b      	lsls	r3, r3, #20
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	0020      	movs	r0, r4
 8000ffe:	0019      	movs	r1, r3
 8001000:	bd10      	pop	{r4, pc}
 8001002:	0022      	movs	r2, r4
 8001004:	380b      	subs	r0, #11
 8001006:	4082      	lsls	r2, r0
 8001008:	055b      	lsls	r3, r3, #21
 800100a:	0312      	lsls	r2, r2, #12
 800100c:	2400      	movs	r4, #0
 800100e:	0b12      	lsrs	r2, r2, #12
 8001010:	0d5b      	lsrs	r3, r3, #21
 8001012:	e7f1      	b.n	8000ff8 <__aeabi_ui2d+0x2c>
 8001014:	0000041e 	.word	0x0000041e

08001018 <__aeabi_cdrcmple>:
 8001018:	4684      	mov	ip, r0
 800101a:	0010      	movs	r0, r2
 800101c:	4662      	mov	r2, ip
 800101e:	468c      	mov	ip, r1
 8001020:	0019      	movs	r1, r3
 8001022:	4663      	mov	r3, ip
 8001024:	e000      	b.n	8001028 <__aeabi_cdcmpeq>
 8001026:	46c0      	nop			; (mov r8, r8)

08001028 <__aeabi_cdcmpeq>:
 8001028:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800102a:	f000 f8f9 	bl	8001220 <__ledf2>
 800102e:	2800      	cmp	r0, #0
 8001030:	d401      	bmi.n	8001036 <__aeabi_cdcmpeq+0xe>
 8001032:	2100      	movs	r1, #0
 8001034:	42c8      	cmn	r0, r1
 8001036:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001038 <__aeabi_dcmpeq>:
 8001038:	b510      	push	{r4, lr}
 800103a:	f000 f849 	bl	80010d0 <__eqdf2>
 800103e:	4240      	negs	r0, r0
 8001040:	3001      	adds	r0, #1
 8001042:	bd10      	pop	{r4, pc}

08001044 <__aeabi_dcmplt>:
 8001044:	b510      	push	{r4, lr}
 8001046:	f000 f8eb 	bl	8001220 <__ledf2>
 800104a:	2800      	cmp	r0, #0
 800104c:	db01      	blt.n	8001052 <__aeabi_dcmplt+0xe>
 800104e:	2000      	movs	r0, #0
 8001050:	bd10      	pop	{r4, pc}
 8001052:	2001      	movs	r0, #1
 8001054:	bd10      	pop	{r4, pc}
 8001056:	46c0      	nop			; (mov r8, r8)

08001058 <__aeabi_dcmple>:
 8001058:	b510      	push	{r4, lr}
 800105a:	f000 f8e1 	bl	8001220 <__ledf2>
 800105e:	2800      	cmp	r0, #0
 8001060:	dd01      	ble.n	8001066 <__aeabi_dcmple+0xe>
 8001062:	2000      	movs	r0, #0
 8001064:	bd10      	pop	{r4, pc}
 8001066:	2001      	movs	r0, #1
 8001068:	bd10      	pop	{r4, pc}
 800106a:	46c0      	nop			; (mov r8, r8)

0800106c <__aeabi_dcmpgt>:
 800106c:	b510      	push	{r4, lr}
 800106e:	f000 f871 	bl	8001154 <__gedf2>
 8001072:	2800      	cmp	r0, #0
 8001074:	dc01      	bgt.n	800107a <__aeabi_dcmpgt+0xe>
 8001076:	2000      	movs	r0, #0
 8001078:	bd10      	pop	{r4, pc}
 800107a:	2001      	movs	r0, #1
 800107c:	bd10      	pop	{r4, pc}
 800107e:	46c0      	nop			; (mov r8, r8)

08001080 <__aeabi_dcmpge>:
 8001080:	b510      	push	{r4, lr}
 8001082:	f000 f867 	bl	8001154 <__gedf2>
 8001086:	2800      	cmp	r0, #0
 8001088:	da01      	bge.n	800108e <__aeabi_dcmpge+0xe>
 800108a:	2000      	movs	r0, #0
 800108c:	bd10      	pop	{r4, pc}
 800108e:	2001      	movs	r0, #1
 8001090:	bd10      	pop	{r4, pc}
 8001092:	46c0      	nop			; (mov r8, r8)

08001094 <__clzsi2>:
 8001094:	211c      	movs	r1, #28
 8001096:	2301      	movs	r3, #1
 8001098:	041b      	lsls	r3, r3, #16
 800109a:	4298      	cmp	r0, r3
 800109c:	d301      	bcc.n	80010a2 <__clzsi2+0xe>
 800109e:	0c00      	lsrs	r0, r0, #16
 80010a0:	3910      	subs	r1, #16
 80010a2:	0a1b      	lsrs	r3, r3, #8
 80010a4:	4298      	cmp	r0, r3
 80010a6:	d301      	bcc.n	80010ac <__clzsi2+0x18>
 80010a8:	0a00      	lsrs	r0, r0, #8
 80010aa:	3908      	subs	r1, #8
 80010ac:	091b      	lsrs	r3, r3, #4
 80010ae:	4298      	cmp	r0, r3
 80010b0:	d301      	bcc.n	80010b6 <__clzsi2+0x22>
 80010b2:	0900      	lsrs	r0, r0, #4
 80010b4:	3904      	subs	r1, #4
 80010b6:	a202      	add	r2, pc, #8	; (adr r2, 80010c0 <__clzsi2+0x2c>)
 80010b8:	5c10      	ldrb	r0, [r2, r0]
 80010ba:	1840      	adds	r0, r0, r1
 80010bc:	4770      	bx	lr
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	02020304 	.word	0x02020304
 80010c4:	01010101 	.word	0x01010101
	...

080010d0 <__eqdf2>:
 80010d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010d2:	464e      	mov	r6, r9
 80010d4:	4645      	mov	r5, r8
 80010d6:	46de      	mov	lr, fp
 80010d8:	4657      	mov	r7, sl
 80010da:	4690      	mov	r8, r2
 80010dc:	b5e0      	push	{r5, r6, r7, lr}
 80010de:	0017      	movs	r7, r2
 80010e0:	031a      	lsls	r2, r3, #12
 80010e2:	0b12      	lsrs	r2, r2, #12
 80010e4:	0005      	movs	r5, r0
 80010e6:	4684      	mov	ip, r0
 80010e8:	4819      	ldr	r0, [pc, #100]	; (8001150 <__eqdf2+0x80>)
 80010ea:	030e      	lsls	r6, r1, #12
 80010ec:	004c      	lsls	r4, r1, #1
 80010ee:	4691      	mov	r9, r2
 80010f0:	005a      	lsls	r2, r3, #1
 80010f2:	0fdb      	lsrs	r3, r3, #31
 80010f4:	469b      	mov	fp, r3
 80010f6:	0b36      	lsrs	r6, r6, #12
 80010f8:	0d64      	lsrs	r4, r4, #21
 80010fa:	0fc9      	lsrs	r1, r1, #31
 80010fc:	0d52      	lsrs	r2, r2, #21
 80010fe:	4284      	cmp	r4, r0
 8001100:	d019      	beq.n	8001136 <__eqdf2+0x66>
 8001102:	4282      	cmp	r2, r0
 8001104:	d010      	beq.n	8001128 <__eqdf2+0x58>
 8001106:	2001      	movs	r0, #1
 8001108:	4294      	cmp	r4, r2
 800110a:	d10e      	bne.n	800112a <__eqdf2+0x5a>
 800110c:	454e      	cmp	r6, r9
 800110e:	d10c      	bne.n	800112a <__eqdf2+0x5a>
 8001110:	2001      	movs	r0, #1
 8001112:	45c4      	cmp	ip, r8
 8001114:	d109      	bne.n	800112a <__eqdf2+0x5a>
 8001116:	4559      	cmp	r1, fp
 8001118:	d017      	beq.n	800114a <__eqdf2+0x7a>
 800111a:	2c00      	cmp	r4, #0
 800111c:	d105      	bne.n	800112a <__eqdf2+0x5a>
 800111e:	0030      	movs	r0, r6
 8001120:	4328      	orrs	r0, r5
 8001122:	1e43      	subs	r3, r0, #1
 8001124:	4198      	sbcs	r0, r3
 8001126:	e000      	b.n	800112a <__eqdf2+0x5a>
 8001128:	2001      	movs	r0, #1
 800112a:	bcf0      	pop	{r4, r5, r6, r7}
 800112c:	46bb      	mov	fp, r7
 800112e:	46b2      	mov	sl, r6
 8001130:	46a9      	mov	r9, r5
 8001132:	46a0      	mov	r8, r4
 8001134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001136:	0033      	movs	r3, r6
 8001138:	2001      	movs	r0, #1
 800113a:	432b      	orrs	r3, r5
 800113c:	d1f5      	bne.n	800112a <__eqdf2+0x5a>
 800113e:	42a2      	cmp	r2, r4
 8001140:	d1f3      	bne.n	800112a <__eqdf2+0x5a>
 8001142:	464b      	mov	r3, r9
 8001144:	433b      	orrs	r3, r7
 8001146:	d1f0      	bne.n	800112a <__eqdf2+0x5a>
 8001148:	e7e2      	b.n	8001110 <__eqdf2+0x40>
 800114a:	2000      	movs	r0, #0
 800114c:	e7ed      	b.n	800112a <__eqdf2+0x5a>
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	000007ff 	.word	0x000007ff

08001154 <__gedf2>:
 8001154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001156:	4647      	mov	r7, r8
 8001158:	46ce      	mov	lr, r9
 800115a:	0004      	movs	r4, r0
 800115c:	0018      	movs	r0, r3
 800115e:	0016      	movs	r6, r2
 8001160:	031b      	lsls	r3, r3, #12
 8001162:	0b1b      	lsrs	r3, r3, #12
 8001164:	4d2d      	ldr	r5, [pc, #180]	; (800121c <__gedf2+0xc8>)
 8001166:	004a      	lsls	r2, r1, #1
 8001168:	4699      	mov	r9, r3
 800116a:	b580      	push	{r7, lr}
 800116c:	0043      	lsls	r3, r0, #1
 800116e:	030f      	lsls	r7, r1, #12
 8001170:	46a4      	mov	ip, r4
 8001172:	46b0      	mov	r8, r6
 8001174:	0b3f      	lsrs	r7, r7, #12
 8001176:	0d52      	lsrs	r2, r2, #21
 8001178:	0fc9      	lsrs	r1, r1, #31
 800117a:	0d5b      	lsrs	r3, r3, #21
 800117c:	0fc0      	lsrs	r0, r0, #31
 800117e:	42aa      	cmp	r2, r5
 8001180:	d021      	beq.n	80011c6 <__gedf2+0x72>
 8001182:	42ab      	cmp	r3, r5
 8001184:	d013      	beq.n	80011ae <__gedf2+0x5a>
 8001186:	2a00      	cmp	r2, #0
 8001188:	d122      	bne.n	80011d0 <__gedf2+0x7c>
 800118a:	433c      	orrs	r4, r7
 800118c:	2b00      	cmp	r3, #0
 800118e:	d102      	bne.n	8001196 <__gedf2+0x42>
 8001190:	464d      	mov	r5, r9
 8001192:	432e      	orrs	r6, r5
 8001194:	d022      	beq.n	80011dc <__gedf2+0x88>
 8001196:	2c00      	cmp	r4, #0
 8001198:	d010      	beq.n	80011bc <__gedf2+0x68>
 800119a:	4281      	cmp	r1, r0
 800119c:	d022      	beq.n	80011e4 <__gedf2+0x90>
 800119e:	2002      	movs	r0, #2
 80011a0:	3901      	subs	r1, #1
 80011a2:	4008      	ands	r0, r1
 80011a4:	3801      	subs	r0, #1
 80011a6:	bcc0      	pop	{r6, r7}
 80011a8:	46b9      	mov	r9, r7
 80011aa:	46b0      	mov	r8, r6
 80011ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ae:	464d      	mov	r5, r9
 80011b0:	432e      	orrs	r6, r5
 80011b2:	d129      	bne.n	8001208 <__gedf2+0xb4>
 80011b4:	2a00      	cmp	r2, #0
 80011b6:	d1f0      	bne.n	800119a <__gedf2+0x46>
 80011b8:	433c      	orrs	r4, r7
 80011ba:	d1ee      	bne.n	800119a <__gedf2+0x46>
 80011bc:	2800      	cmp	r0, #0
 80011be:	d1f2      	bne.n	80011a6 <__gedf2+0x52>
 80011c0:	2001      	movs	r0, #1
 80011c2:	4240      	negs	r0, r0
 80011c4:	e7ef      	b.n	80011a6 <__gedf2+0x52>
 80011c6:	003d      	movs	r5, r7
 80011c8:	4325      	orrs	r5, r4
 80011ca:	d11d      	bne.n	8001208 <__gedf2+0xb4>
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d0ee      	beq.n	80011ae <__gedf2+0x5a>
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1e2      	bne.n	800119a <__gedf2+0x46>
 80011d4:	464c      	mov	r4, r9
 80011d6:	4326      	orrs	r6, r4
 80011d8:	d1df      	bne.n	800119a <__gedf2+0x46>
 80011da:	e7e0      	b.n	800119e <__gedf2+0x4a>
 80011dc:	2000      	movs	r0, #0
 80011de:	2c00      	cmp	r4, #0
 80011e0:	d0e1      	beq.n	80011a6 <__gedf2+0x52>
 80011e2:	e7dc      	b.n	800119e <__gedf2+0x4a>
 80011e4:	429a      	cmp	r2, r3
 80011e6:	dc0a      	bgt.n	80011fe <__gedf2+0xaa>
 80011e8:	dbe8      	blt.n	80011bc <__gedf2+0x68>
 80011ea:	454f      	cmp	r7, r9
 80011ec:	d8d7      	bhi.n	800119e <__gedf2+0x4a>
 80011ee:	d00e      	beq.n	800120e <__gedf2+0xba>
 80011f0:	2000      	movs	r0, #0
 80011f2:	454f      	cmp	r7, r9
 80011f4:	d2d7      	bcs.n	80011a6 <__gedf2+0x52>
 80011f6:	2900      	cmp	r1, #0
 80011f8:	d0e2      	beq.n	80011c0 <__gedf2+0x6c>
 80011fa:	0008      	movs	r0, r1
 80011fc:	e7d3      	b.n	80011a6 <__gedf2+0x52>
 80011fe:	4243      	negs	r3, r0
 8001200:	4158      	adcs	r0, r3
 8001202:	0040      	lsls	r0, r0, #1
 8001204:	3801      	subs	r0, #1
 8001206:	e7ce      	b.n	80011a6 <__gedf2+0x52>
 8001208:	2002      	movs	r0, #2
 800120a:	4240      	negs	r0, r0
 800120c:	e7cb      	b.n	80011a6 <__gedf2+0x52>
 800120e:	45c4      	cmp	ip, r8
 8001210:	d8c5      	bhi.n	800119e <__gedf2+0x4a>
 8001212:	2000      	movs	r0, #0
 8001214:	45c4      	cmp	ip, r8
 8001216:	d2c6      	bcs.n	80011a6 <__gedf2+0x52>
 8001218:	e7ed      	b.n	80011f6 <__gedf2+0xa2>
 800121a:	46c0      	nop			; (mov r8, r8)
 800121c:	000007ff 	.word	0x000007ff

08001220 <__ledf2>:
 8001220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001222:	4647      	mov	r7, r8
 8001224:	46ce      	mov	lr, r9
 8001226:	0004      	movs	r4, r0
 8001228:	0018      	movs	r0, r3
 800122a:	0016      	movs	r6, r2
 800122c:	031b      	lsls	r3, r3, #12
 800122e:	0b1b      	lsrs	r3, r3, #12
 8001230:	4d2c      	ldr	r5, [pc, #176]	; (80012e4 <__ledf2+0xc4>)
 8001232:	004a      	lsls	r2, r1, #1
 8001234:	4699      	mov	r9, r3
 8001236:	b580      	push	{r7, lr}
 8001238:	0043      	lsls	r3, r0, #1
 800123a:	030f      	lsls	r7, r1, #12
 800123c:	46a4      	mov	ip, r4
 800123e:	46b0      	mov	r8, r6
 8001240:	0b3f      	lsrs	r7, r7, #12
 8001242:	0d52      	lsrs	r2, r2, #21
 8001244:	0fc9      	lsrs	r1, r1, #31
 8001246:	0d5b      	lsrs	r3, r3, #21
 8001248:	0fc0      	lsrs	r0, r0, #31
 800124a:	42aa      	cmp	r2, r5
 800124c:	d00d      	beq.n	800126a <__ledf2+0x4a>
 800124e:	42ab      	cmp	r3, r5
 8001250:	d010      	beq.n	8001274 <__ledf2+0x54>
 8001252:	2a00      	cmp	r2, #0
 8001254:	d127      	bne.n	80012a6 <__ledf2+0x86>
 8001256:	433c      	orrs	r4, r7
 8001258:	2b00      	cmp	r3, #0
 800125a:	d111      	bne.n	8001280 <__ledf2+0x60>
 800125c:	464d      	mov	r5, r9
 800125e:	432e      	orrs	r6, r5
 8001260:	d10e      	bne.n	8001280 <__ledf2+0x60>
 8001262:	2000      	movs	r0, #0
 8001264:	2c00      	cmp	r4, #0
 8001266:	d015      	beq.n	8001294 <__ledf2+0x74>
 8001268:	e00e      	b.n	8001288 <__ledf2+0x68>
 800126a:	003d      	movs	r5, r7
 800126c:	4325      	orrs	r5, r4
 800126e:	d110      	bne.n	8001292 <__ledf2+0x72>
 8001270:	4293      	cmp	r3, r2
 8001272:	d118      	bne.n	80012a6 <__ledf2+0x86>
 8001274:	464d      	mov	r5, r9
 8001276:	432e      	orrs	r6, r5
 8001278:	d10b      	bne.n	8001292 <__ledf2+0x72>
 800127a:	2a00      	cmp	r2, #0
 800127c:	d102      	bne.n	8001284 <__ledf2+0x64>
 800127e:	433c      	orrs	r4, r7
 8001280:	2c00      	cmp	r4, #0
 8001282:	d00b      	beq.n	800129c <__ledf2+0x7c>
 8001284:	4281      	cmp	r1, r0
 8001286:	d014      	beq.n	80012b2 <__ledf2+0x92>
 8001288:	2002      	movs	r0, #2
 800128a:	3901      	subs	r1, #1
 800128c:	4008      	ands	r0, r1
 800128e:	3801      	subs	r0, #1
 8001290:	e000      	b.n	8001294 <__ledf2+0x74>
 8001292:	2002      	movs	r0, #2
 8001294:	bcc0      	pop	{r6, r7}
 8001296:	46b9      	mov	r9, r7
 8001298:	46b0      	mov	r8, r6
 800129a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800129c:	2800      	cmp	r0, #0
 800129e:	d1f9      	bne.n	8001294 <__ledf2+0x74>
 80012a0:	2001      	movs	r0, #1
 80012a2:	4240      	negs	r0, r0
 80012a4:	e7f6      	b.n	8001294 <__ledf2+0x74>
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1ec      	bne.n	8001284 <__ledf2+0x64>
 80012aa:	464c      	mov	r4, r9
 80012ac:	4326      	orrs	r6, r4
 80012ae:	d1e9      	bne.n	8001284 <__ledf2+0x64>
 80012b0:	e7ea      	b.n	8001288 <__ledf2+0x68>
 80012b2:	429a      	cmp	r2, r3
 80012b4:	dd04      	ble.n	80012c0 <__ledf2+0xa0>
 80012b6:	4243      	negs	r3, r0
 80012b8:	4158      	adcs	r0, r3
 80012ba:	0040      	lsls	r0, r0, #1
 80012bc:	3801      	subs	r0, #1
 80012be:	e7e9      	b.n	8001294 <__ledf2+0x74>
 80012c0:	429a      	cmp	r2, r3
 80012c2:	dbeb      	blt.n	800129c <__ledf2+0x7c>
 80012c4:	454f      	cmp	r7, r9
 80012c6:	d8df      	bhi.n	8001288 <__ledf2+0x68>
 80012c8:	d006      	beq.n	80012d8 <__ledf2+0xb8>
 80012ca:	2000      	movs	r0, #0
 80012cc:	454f      	cmp	r7, r9
 80012ce:	d2e1      	bcs.n	8001294 <__ledf2+0x74>
 80012d0:	2900      	cmp	r1, #0
 80012d2:	d0e5      	beq.n	80012a0 <__ledf2+0x80>
 80012d4:	0008      	movs	r0, r1
 80012d6:	e7dd      	b.n	8001294 <__ledf2+0x74>
 80012d8:	45c4      	cmp	ip, r8
 80012da:	d8d5      	bhi.n	8001288 <__ledf2+0x68>
 80012dc:	2000      	movs	r0, #0
 80012de:	45c4      	cmp	ip, r8
 80012e0:	d2d8      	bcs.n	8001294 <__ledf2+0x74>
 80012e2:	e7f5      	b.n	80012d0 <__ledf2+0xb0>
 80012e4:	000007ff 	.word	0x000007ff

080012e8 <lcd_send_cmd>:

#define SLAVE_ADDRESS_LCD 0b01000000 // change this according to ur setup 01000000


void lcd_send_cmd (char cmd)
{
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b087      	sub	sp, #28
 80012ec:	af02      	add	r7, sp, #8
 80012ee:	0002      	movs	r2, r0
 80012f0:	1dfb      	adds	r3, r7, #7
 80012f2:	701a      	strb	r2, [r3, #0]
	unsigned char data_u, data_l;
	uint8_t data_t[4];

	data_u = (cmd&0xf0);
 80012f4:	200f      	movs	r0, #15
 80012f6:	183b      	adds	r3, r7, r0
 80012f8:	1dfa      	adds	r2, r7, #7
 80012fa:	7812      	ldrb	r2, [r2, #0]
 80012fc:	210f      	movs	r1, #15
 80012fe:	438a      	bics	r2, r1
 8001300:	701a      	strb	r2, [r3, #0]
	data_l = ((cmd<<4)&0xf0);
 8001302:	1dfb      	adds	r3, r7, #7
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	011a      	lsls	r2, r3, #4
 8001308:	240e      	movs	r4, #14
 800130a:	193b      	adds	r3, r7, r4
 800130c:	701a      	strb	r2, [r3, #0]

	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800130e:	183b      	adds	r3, r7, r0
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	220c      	movs	r2, #12
 8001314:	4313      	orrs	r3, r2
 8001316:	b2da      	uxtb	r2, r3
 8001318:	2108      	movs	r1, #8
 800131a:	187b      	adds	r3, r7, r1
 800131c:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800131e:	183b      	adds	r3, r7, r0
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2208      	movs	r2, #8
 8001324:	4313      	orrs	r3, r2
 8001326:	b2da      	uxtb	r2, r3
 8001328:	187b      	adds	r3, r7, r1
 800132a:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800132c:	193b      	adds	r3, r7, r4
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	220c      	movs	r2, #12
 8001332:	4313      	orrs	r3, r2
 8001334:	b2da      	uxtb	r2, r3
 8001336:	187b      	adds	r3, r7, r1
 8001338:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800133a:	193b      	adds	r3, r7, r4
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2208      	movs	r2, #8
 8001340:	4313      	orrs	r3, r2
 8001342:	b2da      	uxtb	r2, r3
 8001344:	187b      	adds	r3, r7, r1
 8001346:	70da      	strb	r2, [r3, #3]

	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, HAL_MAX_DELAY);
 8001348:	187a      	adds	r2, r7, r1
 800134a:	4806      	ldr	r0, [pc, #24]	; (8001364 <lcd_send_cmd+0x7c>)
 800134c:	2301      	movs	r3, #1
 800134e:	425b      	negs	r3, r3
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2304      	movs	r3, #4
 8001354:	2140      	movs	r1, #64	; 0x40
 8001356:	f002 fa0f 	bl	8003778 <HAL_I2C_Master_Transmit>
}
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	46bd      	mov	sp, r7
 800135e:	b005      	add	sp, #20
 8001360:	bd90      	pop	{r4, r7, pc}
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	20000158 	.word	0x20000158

08001368 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001368:	b590      	push	{r4, r7, lr}
 800136a:	b087      	sub	sp, #28
 800136c:	af02      	add	r7, sp, #8
 800136e:	0002      	movs	r2, r0
 8001370:	1dfb      	adds	r3, r7, #7
 8001372:	701a      	strb	r2, [r3, #0]
	if(data == 'Y')
 8001374:	1dfb      	adds	r3, r7, #7
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b59      	cmp	r3, #89	; 0x59
 800137a:	d102      	bne.n	8001382 <lcd_send_data+0x1a>
		data = 0xff;
 800137c:	1dfb      	adds	r3, r7, #7
 800137e:	22ff      	movs	r2, #255	; 0xff
 8001380:	701a      	strb	r2, [r3, #0]

	unsigned char data_u, data_l;
	uint8_t data_t[4];

	data_u = (data&0xf0);
 8001382:	200f      	movs	r0, #15
 8001384:	183b      	adds	r3, r7, r0
 8001386:	1dfa      	adds	r2, r7, #7
 8001388:	7812      	ldrb	r2, [r2, #0]
 800138a:	210f      	movs	r1, #15
 800138c:	438a      	bics	r2, r1
 800138e:	701a      	strb	r2, [r3, #0]
	data_l = ((data<<4)&0xf0);
 8001390:	1dfb      	adds	r3, r7, #7
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	011a      	lsls	r2, r3, #4
 8001396:	240e      	movs	r4, #14
 8001398:	193b      	adds	r3, r7, r4
 800139a:	701a      	strb	r2, [r3, #0]

	data_t[0] = data_u|0x0D;  //en=1, rs=1
 800139c:	183b      	adds	r3, r7, r0
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	220d      	movs	r2, #13
 80013a2:	4313      	orrs	r3, r2
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	2108      	movs	r1, #8
 80013a8:	187b      	adds	r3, r7, r1
 80013aa:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80013ac:	183b      	adds	r3, r7, r0
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2209      	movs	r2, #9
 80013b2:	4313      	orrs	r3, r2
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	187b      	adds	r3, r7, r1
 80013b8:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80013ba:	193b      	adds	r3, r7, r4
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	220d      	movs	r2, #13
 80013c0:	4313      	orrs	r3, r2
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	187b      	adds	r3, r7, r1
 80013c6:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80013c8:	193b      	adds	r3, r7, r4
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2209      	movs	r2, #9
 80013ce:	4313      	orrs	r3, r2
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	187b      	adds	r3, r7, r1
 80013d4:	70da      	strb	r2, [r3, #3]

	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80013d6:	187a      	adds	r2, r7, r1
 80013d8:	4805      	ldr	r0, [pc, #20]	; (80013f0 <lcd_send_data+0x88>)
 80013da:	2364      	movs	r3, #100	; 0x64
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	2304      	movs	r3, #4
 80013e0:	2140      	movs	r1, #64	; 0x40
 80013e2:	f002 f9c9 	bl	8003778 <HAL_I2C_Master_Transmit>
}
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	46bd      	mov	sp, r7
 80013ea:	b005      	add	sp, #20
 80013ec:	bd90      	pop	{r4, r7, pc}
 80013ee:	46c0      	nop			; (mov r8, r8)
 80013f0:	20000158 	.word	0x20000158

080013f4 <lcd_init>:
		lcd_send_data (' ');
	}
}

void lcd_init (void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80013f8:	2032      	movs	r0, #50	; 0x32
 80013fa:	f001 fb61 	bl	8002ac0 <HAL_Delay>
	lcd_send_cmd (swapNibble(0b00110000));
 80013fe:	2030      	movs	r0, #48	; 0x30
 8001400:	f000 f865 	bl	80014ce <swapNibble>
 8001404:	0003      	movs	r3, r0
 8001406:	0018      	movs	r0, r3
 8001408:	f7ff ff6e 	bl	80012e8 <lcd_send_cmd>
	HAL_Delay(10);  // wait for >4.1ms
 800140c:	200a      	movs	r0, #10
 800140e:	f001 fb57 	bl	8002ac0 <HAL_Delay>
	lcd_send_cmd (swapNibble(0b00110000));
 8001412:	2030      	movs	r0, #48	; 0x30
 8001414:	f000 f85b 	bl	80014ce <swapNibble>
 8001418:	0003      	movs	r3, r0
 800141a:	0018      	movs	r0, r3
 800141c:	f7ff ff64 	bl	80012e8 <lcd_send_cmd>
	HAL_Delay(10);  // wait for >100us
 8001420:	200a      	movs	r0, #10
 8001422:	f001 fb4d 	bl	8002ac0 <HAL_Delay>
	lcd_send_cmd (swapNibble(0b00110000));
 8001426:	2030      	movs	r0, #48	; 0x30
 8001428:	f000 f851 	bl	80014ce <swapNibble>
 800142c:	0003      	movs	r3, r0
 800142e:	0018      	movs	r0, r3
 8001430:	f7ff ff5a 	bl	80012e8 <lcd_send_cmd>
	HAL_Delay(10);
 8001434:	200a      	movs	r0, #10
 8001436:	f001 fb43 	bl	8002ac0 <HAL_Delay>
	lcd_send_cmd (swapNibble(0b00100000));  // 4bit mode
 800143a:	2020      	movs	r0, #32
 800143c:	f000 f847 	bl	80014ce <swapNibble>
 8001440:	0003      	movs	r3, r0
 8001442:	0018      	movs	r0, r3
 8001444:	f7ff ff50 	bl	80012e8 <lcd_send_cmd>
	HAL_Delay(10);
 8001448:	200a      	movs	r0, #10
 800144a:	f001 fb39 	bl	8002ac0 <HAL_Delay>

	lcd_send_cmd (swapNibble(0b00101000));  // Config
 800144e:	2028      	movs	r0, #40	; 0x28
 8001450:	f000 f83d 	bl	80014ce <swapNibble>
 8001454:	0003      	movs	r3, r0
 8001456:	0018      	movs	r0, r3
 8001458:	f7ff ff46 	bl	80012e8 <lcd_send_cmd>
	HAL_Delay(10);
 800145c:	200a      	movs	r0, #10
 800145e:	f001 fb2f 	bl	8002ac0 <HAL_Delay>
	lcd_send_cmd (swapNibble(0b00001100));  // Config
 8001462:	200c      	movs	r0, #12
 8001464:	f000 f833 	bl	80014ce <swapNibble>
 8001468:	0003      	movs	r3, r0
 800146a:	0018      	movs	r0, r3
 800146c:	f7ff ff3c 	bl	80012e8 <lcd_send_cmd>
	HAL_Delay(10);
 8001470:	200a      	movs	r0, #10
 8001472:	f001 fb25 	bl	8002ac0 <HAL_Delay>
	lcd_send_cmd (swapNibble(0b00001111));  // Config
 8001476:	200f      	movs	r0, #15
 8001478:	f000 f829 	bl	80014ce <swapNibble>
 800147c:	0003      	movs	r3, r0
 800147e:	0018      	movs	r0, r3
 8001480:	f7ff ff32 	bl	80012e8 <lcd_send_cmd>
	HAL_Delay(10);
 8001484:	200a      	movs	r0, #10
 8001486:	f001 fb1b 	bl	8002ac0 <HAL_Delay>
	lcd_send_cmd (swapNibble(0b00000110));  // Config
 800148a:	2006      	movs	r0, #6
 800148c:	f000 f81f 	bl	80014ce <swapNibble>
 8001490:	0003      	movs	r3, r0
 8001492:	0018      	movs	r0, r3
 8001494:	f7ff ff28 	bl	80012e8 <lcd_send_cmd>
	HAL_Delay(10);
 8001498:	200a      	movs	r0, #10
 800149a:	f001 fb11 	bl	8002ac0 <HAL_Delay>
}
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <lcd_send_string>:

void lcd_send_string(char *str) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
    while (*str) {
 80014ac:	e006      	b.n	80014bc <lcd_send_string+0x18>
        lcd_send_data(*str++);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	1c5a      	adds	r2, r3, #1
 80014b2:	607a      	str	r2, [r7, #4]
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	0018      	movs	r0, r3
 80014b8:	f7ff ff56 	bl	8001368 <lcd_send_data>
    while (*str) {
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1f4      	bne.n	80014ae <lcd_send_string+0xa>
    }
}
 80014c4:	46c0      	nop			; (mov r8, r8)
 80014c6:	46c0      	nop			; (mov r8, r8)
 80014c8:	46bd      	mov	sp, r7
 80014ca:	b002      	add	sp, #8
 80014cc:	bd80      	pop	{r7, pc}

080014ce <swapNibble>:

char swapNibble(char x) {
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	0002      	movs	r2, r0
 80014d6:	1dfb      	adds	r3, r7, #7
 80014d8:	701a      	strb	r2, [r3, #0]
    return ((x & 0x0F) << 4 | (x & 0xF0) >> 4);
 80014da:	1dfb      	adds	r3, r7, #7
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	011b      	lsls	r3, r3, #4
 80014e0:	b25a      	sxtb	r2, r3
 80014e2:	1dfb      	adds	r3, r7, #7
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	091b      	lsrs	r3, r3, #4
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	b25b      	sxtb	r3, r3
 80014ec:	4313      	orrs	r3, r2
 80014ee:	b25b      	sxtb	r3, r3
 80014f0:	b2db      	uxtb	r3, r3
}
 80014f2:	0018      	movs	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	b002      	add	sp, #8
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <HAL_TIM_IC_CaptureCallback>:
	uint8_t treble;
	uint8_t attenuateL;
	uint8_t attenuateR;
}versterkerValues;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af04      	add	r7, sp, #16
 8001502:	6078      	str	r0, [r7, #4]
	input = (uint8_t)__HAL_TIM_GET_COUNTER(htim);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150a:	b2db      	uxtb	r3, r3
 800150c:	001a      	movs	r2, r3
 800150e:	4b20      	ldr	r3, [pc, #128]	; (8001590 <HAL_TIM_IC_CaptureCallback+0x94>)
 8001510:	601a      	str	r2, [r3, #0]

	volume = (uint8_t)((255 - input) / 6.375);
 8001512:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <HAL_TIM_IC_CaptureCallback+0x94>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	22ff      	movs	r2, #255	; 0xff
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	0018      	movs	r0, r3
 800151c:	f7ff fd56 	bl	8000fcc <__aeabi_ui2d>
 8001520:	2200      	movs	r2, #0
 8001522:	4b1c      	ldr	r3, [pc, #112]	; (8001594 <HAL_TIM_IC_CaptureCallback+0x98>)
 8001524:	f7fe feac 	bl	8000280 <__aeabi_ddiv>
 8001528:	0002      	movs	r2, r0
 800152a:	000b      	movs	r3, r1
 800152c:	0010      	movs	r0, r2
 800152e:	0019      	movs	r1, r3
 8001530:	f7fe fe88 	bl	8000244 <__aeabi_d2uiz>
 8001534:	0003      	movs	r3, r0
 8001536:	b2db      	uxtb	r3, r3
 8001538:	b29a      	uxth	r2, r3
 800153a:	4b17      	ldr	r3, [pc, #92]	; (8001598 <HAL_TIM_IC_CaptureCallback+0x9c>)
 800153c:	801a      	strh	r2, [r3, #0]

	if(volume == 0){
 800153e:	4b16      	ldr	r3, [pc, #88]	; (8001598 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d102      	bne.n	800154c <HAL_TIM_IC_CaptureCallback+0x50>
		volume = 1;
 8001546:	4b14      	ldr	r3, [pc, #80]	; (8001598 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8001548:	2201      	movs	r2, #1
 800154a:	801a      	strh	r2, [r3, #0]
	}

	if (volume != prevVolume ) { //&& startup == 0
 800154c:	4b13      	ldr	r3, [pc, #76]	; (800159c <HAL_TIM_IC_CaptureCallback+0xa0>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	b29a      	uxth	r2, r3
 8001552:	4b11      	ldr	r3, [pc, #68]	; (8001598 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	429a      	cmp	r2, r3
 8001558:	d011      	beq.n	800157e <HAL_TIM_IC_CaptureCallback+0x82>
		// Display volume on LCD
		//lcd_write_string(VersterkerValuesString[0], row1);
		//lcd_write_bars(input, row2);

		// Update volume on TDA chip via I2C
		databuffer = volume;
 800155a:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <HAL_TIM_IC_CaptureCallback+0x9c>)
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	b2da      	uxtb	r2, r3
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001562:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, TDA7439DS, VolumeAddress, I2C_MEMADD_SIZE_8BIT, &databuffer, 1, HAL_MAX_DELAY);
 8001564:	480f      	ldr	r0, [pc, #60]	; (80015a4 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001566:	2301      	movs	r3, #1
 8001568:	425b      	negs	r3, r3
 800156a:	9302      	str	r3, [sp, #8]
 800156c:	2301      	movs	r3, #1
 800156e:	9301      	str	r3, [sp, #4]
 8001570:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	2301      	movs	r3, #1
 8001576:	2202      	movs	r2, #2
 8001578:	2188      	movs	r1, #136	; 0x88
 800157a:	f002 fa05 	bl	8003988 <HAL_I2C_Mem_Write>
	}

	// Update the previous volume
	prevVolume = volume;
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8001580:	881b      	ldrh	r3, [r3, #0]
 8001582:	b2da      	uxtb	r2, r3
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <HAL_TIM_IC_CaptureCallback+0xa0>)
 8001586:	701a      	strb	r2, [r3, #0]
}
 8001588:	46c0      	nop			; (mov r8, r8)
 800158a:	46bd      	mov	sp, r7
 800158c:	b002      	add	sp, #8
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000004 	.word	0x20000004
 8001594:	40198000 	.word	0x40198000
 8001598:	20000000 	.word	0x20000000
 800159c:	200002f7 	.word	0x200002f7
 80015a0:	200002f8 	.word	0x200002f8
 80015a4:	20000104 	.word	0x20000104

080015a8 <_write>:

//	printf function
int _write(int file, char *ptr, int len) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++){
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	e018      	b.n	80015ec <_write+0x44>
		if(ptr[i]=='\n'){
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	68ba      	ldr	r2, [r7, #8]
 80015be:	18d3      	adds	r3, r2, r3
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b0a      	cmp	r3, #10
 80015c4:	d106      	bne.n	80015d4 <_write+0x2c>
			HAL_UART_Transmit(&huart1, (uint8_t*)"\r", 1, HAL_MAX_DELAY);
 80015c6:	2301      	movs	r3, #1
 80015c8:	425b      	negs	r3, r3
 80015ca:	490d      	ldr	r1, [pc, #52]	; (8001600 <_write+0x58>)
 80015cc:	480d      	ldr	r0, [pc, #52]	; (8001604 <_write+0x5c>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	f004 f8a6 	bl	8005720 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart1, (uint8_t*)&ptr[i], 1, HAL_MAX_DELAY);
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	18d1      	adds	r1, r2, r3
 80015da:	2301      	movs	r3, #1
 80015dc:	425b      	negs	r3, r3
 80015de:	4809      	ldr	r0, [pc, #36]	; (8001604 <_write+0x5c>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	f004 f89d 	bl	8005720 <HAL_UART_Transmit>
	for(int i = 0; i < len; i++){
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	3301      	adds	r3, #1
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	697a      	ldr	r2, [r7, #20]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	dbe2      	blt.n	80015ba <_write+0x12>
	}
	return len;
 80015f4:	687b      	ldr	r3, [r7, #4]
}
 80015f6:	0018      	movs	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	b006      	add	sp, #24
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	08006fb0 	.word	0x08006fb0
 8001604:	2000023c 	.word	0x2000023c

08001608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001608:	b590      	push	{r4, r7, lr}
 800160a:	b089      	sub	sp, #36	; 0x24
 800160c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800160e:	f001 f9f3 	bl	80029f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001612:	f000 fa5d 	bl	8001ad0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001616:	f000 fca1 	bl	8001f5c <MX_GPIO_Init>
  MX_I2C1_Init();
 800161a:	f000 fb4d 	bl	8001cb8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800161e:	f000 fc6d 	bl	8001efc <MX_USART1_UART_Init>
  MX_ADC_Init();
 8001622:	f000 fab9 	bl	8001b98 <MX_ADC_Init>
  MX_TIM3_Init();
 8001626:	f000 fbc7 	bl	8001db8 <MX_TIM3_Init>
  MX_I2C2_Init();
 800162a:	f000 fb85 	bl	8001d38 <MX_I2C2_Init>
  MX_TIM6_Init();
 800162e:	f000 fc27 	bl	8001e80 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	//	leds on
	HAL_GPIO_WritePin(StereoMuteLed_GPIO_Port, StereoMuteLed_Pin, 1);
 8001632:	2390      	movs	r3, #144	; 0x90
 8001634:	05db      	lsls	r3, r3, #23
 8001636:	2201      	movs	r2, #1
 8001638:	2120      	movs	r1, #32
 800163a:	0018      	movs	r0, r3
 800163c:	f001 ffcd 	bl	80035da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MonoMuteLed_GPIO_Port, MonoMuteLed_Pin, 1);
 8001640:	2390      	movs	r3, #144	; 0x90
 8001642:	05db      	lsls	r3, r3, #23
 8001644:	2201      	movs	r2, #1
 8001646:	2110      	movs	r1, #16
 8001648:	0018      	movs	r0, r3
 800164a:	f001 ffc6 	bl	80035da <HAL_GPIO_WritePin>
	//volume = Flash_Read_Data(0x08001000);	//0

	versterkerValues amp;
	versterkerValues ampPrev;

	amp.inputSelect = 0;
 800164e:	2408      	movs	r4, #8
 8001650:	193b      	adds	r3, r7, r4
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]
	amp.gain = 0;
 8001656:	193b      	adds	r3, r7, r4
 8001658:	2200      	movs	r2, #0
 800165a:	705a      	strb	r2, [r3, #1]
	amp.bass = 0;
 800165c:	193b      	adds	r3, r7, r4
 800165e:	2200      	movs	r2, #0
 8001660:	709a      	strb	r2, [r3, #2]
	amp.midrange = 0;
 8001662:	193b      	adds	r3, r7, r4
 8001664:	2200      	movs	r2, #0
 8001666:	70da      	strb	r2, [r3, #3]
	amp.treble = 0;
 8001668:	193b      	adds	r3, r7, r4
 800166a:	2200      	movs	r2, #0
 800166c:	711a      	strb	r2, [r3, #4]
	amp.attenuateL = 0;
 800166e:	193b      	adds	r3, r7, r4
 8001670:	2200      	movs	r2, #0
 8001672:	715a      	strb	r2, [r3, #5]
	amp.attenuateR = 0;
 8001674:	193b      	adds	r3, r7, r4
 8001676:	2200      	movs	r2, #0
 8001678:	719a      	strb	r2, [r3, #6]

	// 	Initialize ADC channel(s)
	HAL_ADCEx_Calibration_Start(&hadc);
 800167a:	4b98      	ldr	r3, [pc, #608]	; (80018dc <main+0x2d4>)
 800167c:	0018      	movs	r0, r3
 800167e:	f001 fc91 	bl	8002fa4 <HAL_ADCEx_Calibration_Start>

	// init DMA
	ADC_DMA_Init();
 8001682:	f000 fe7f 	bl	8002384 <ADC_DMA_Init>

	//start up delay
	HAL_Delay(1000);
 8001686:	23fa      	movs	r3, #250	; 0xfa
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	0018      	movs	r0, r3
 800168c:	f001 fa18 	bl	8002ac0 <HAL_Delay>

	//	Init display
	lcd_init();
 8001690:	f7ff feb0 	bl	80013f4 <lcd_init>

	lcd_write_string(VersterkerValuesString[5], row3);
 8001694:	4b92      	ldr	r3, [pc, #584]	; (80018e0 <main+0x2d8>)
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	2194      	movs	r1, #148	; 0x94
 800169a:	0018      	movs	r0, r3
 800169c:	f000 fd6a 	bl	8002174 <lcd_write_string>
	lcd_write_selection(amp.inputSelect, row4);
 80016a0:	193b      	adds	r3, r7, r4
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	21d4      	movs	r1, #212	; 0xd4
 80016a6:	0018      	movs	r0, r3
 80016a8:	f000 fe00 	bl	80022ac <lcd_write_selection>

	//	Encoder
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 80016ac:	4b8d      	ldr	r3, [pc, #564]	; (80018e4 <main+0x2dc>)
 80016ae:	213c      	movs	r1, #60	; 0x3c
 80016b0:	0018      	movs	r0, r3
 80016b2:	f003 fcdd 	bl	8005070 <HAL_TIM_Encoder_Start_IT>

	//	Toggle relais MUTE off
	HAL_GPIO_WritePin(MuteTPA_GPIO_Port, MuteTPA_Pin, 0);
 80016b6:	4b8c      	ldr	r3, [pc, #560]	; (80018e8 <main+0x2e0>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	2120      	movs	r1, #32
 80016bc:	0018      	movs	r0, r3
 80016be:	f001 ff8c 	bl	80035da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MuteRelais_GPIO_Port, MuteRelais_Pin, 1);
 80016c2:	4b89      	ldr	r3, [pc, #548]	; (80018e8 <main+0x2e0>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	2110      	movs	r1, #16
 80016c8:	0018      	movs	r0, r3
 80016ca:	f001 ff86 	bl	80035da <HAL_GPIO_WritePin>

	//	leds off
	HAL_GPIO_WritePin(StereoMuteLed_GPIO_Port, StereoMuteLed_Pin, 0);
 80016ce:	2390      	movs	r3, #144	; 0x90
 80016d0:	05db      	lsls	r3, r3, #23
 80016d2:	2200      	movs	r2, #0
 80016d4:	2120      	movs	r1, #32
 80016d6:	0018      	movs	r0, r3
 80016d8:	f001 ff7f 	bl	80035da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MonoMuteLed_GPIO_Port, MonoMuteLed_Pin, 0);
 80016dc:	2390      	movs	r3, #144	; 0x90
 80016de:	05db      	lsls	r3, r3, #23
 80016e0:	2200      	movs	r2, #0
 80016e2:	2110      	movs	r1, #16
 80016e4:	0018      	movs	r0, r3
 80016e6:	f001 ff78 	bl	80035da <HAL_GPIO_WritePin>

	//init TDA
	databuffer = volume;
 80016ea:	4b80      	ldr	r3, [pc, #512]	; (80018ec <main+0x2e4>)
 80016ec:	881b      	ldrh	r3, [r3, #0]
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	4b7f      	ldr	r3, [pc, #508]	; (80018f0 <main+0x2e8>)
 80016f2:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, TDA7439DS, VolumeAddress, I2C_MEMADD_SIZE_8BIT,  &databuffer, 1, HAL_MAX_DELAY);
 80016f4:	487f      	ldr	r0, [pc, #508]	; (80018f4 <main+0x2ec>)
 80016f6:	2301      	movs	r3, #1
 80016f8:	425b      	negs	r3, r3
 80016fa:	9302      	str	r3, [sp, #8]
 80016fc:	2301      	movs	r3, #1
 80016fe:	9301      	str	r3, [sp, #4]
 8001700:	4b7b      	ldr	r3, [pc, #492]	; (80018f0 <main+0x2e8>)
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	2301      	movs	r3, #1
 8001706:	2202      	movs	r2, #2
 8001708:	2188      	movs	r1, #136	; 0x88
 800170a:	f002 f93d 	bl	8003988 <HAL_I2C_Mem_Write>
	databuffer = amp.inputSelect;
 800170e:	193b      	adds	r3, r7, r4
 8001710:	781a      	ldrb	r2, [r3, #0]
 8001712:	4b77      	ldr	r3, [pc, #476]	; (80018f0 <main+0x2e8>)
 8001714:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, TDA7439DS, GainAddress, I2C_MEMADD_SIZE_8BIT,  &databuffer, 1, HAL_MAX_DELAY);
 8001716:	4877      	ldr	r0, [pc, #476]	; (80018f4 <main+0x2ec>)
 8001718:	2301      	movs	r3, #1
 800171a:	425b      	negs	r3, r3
 800171c:	9302      	str	r3, [sp, #8]
 800171e:	2301      	movs	r3, #1
 8001720:	9301      	str	r3, [sp, #4]
 8001722:	4b73      	ldr	r3, [pc, #460]	; (80018f0 <main+0x2e8>)
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	2301      	movs	r3, #1
 8001728:	2201      	movs	r2, #1
 800172a:	2188      	movs	r1, #136	; 0x88
 800172c:	f002 f92c 	bl	8003988 <HAL_I2C_Mem_Write>
	databuffer = amp.gain;
 8001730:	193b      	adds	r3, r7, r4
 8001732:	785a      	ldrb	r2, [r3, #1]
 8001734:	4b6e      	ldr	r3, [pc, #440]	; (80018f0 <main+0x2e8>)
 8001736:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, TDA7439DS, GainAddress, I2C_MEMADD_SIZE_8BIT,  &databuffer, 1, HAL_MAX_DELAY);
 8001738:	486e      	ldr	r0, [pc, #440]	; (80018f4 <main+0x2ec>)
 800173a:	2301      	movs	r3, #1
 800173c:	425b      	negs	r3, r3
 800173e:	9302      	str	r3, [sp, #8]
 8001740:	2301      	movs	r3, #1
 8001742:	9301      	str	r3, [sp, #4]
 8001744:	4b6a      	ldr	r3, [pc, #424]	; (80018f0 <main+0x2e8>)
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	2301      	movs	r3, #1
 800174a:	2201      	movs	r2, #1
 800174c:	2188      	movs	r1, #136	; 0x88
 800174e:	f002 f91b 	bl	8003988 <HAL_I2C_Mem_Write>
	databuffer = amp.bass;
 8001752:	193b      	adds	r3, r7, r4
 8001754:	789a      	ldrb	r2, [r3, #2]
 8001756:	4b66      	ldr	r3, [pc, #408]	; (80018f0 <main+0x2e8>)
 8001758:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, TDA7439DS, BassAddress, I2C_MEMADD_SIZE_8BIT,  &databuffer, 1, HAL_MAX_DELAY);
 800175a:	4866      	ldr	r0, [pc, #408]	; (80018f4 <main+0x2ec>)
 800175c:	2301      	movs	r3, #1
 800175e:	425b      	negs	r3, r3
 8001760:	9302      	str	r3, [sp, #8]
 8001762:	2301      	movs	r3, #1
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	4b62      	ldr	r3, [pc, #392]	; (80018f0 <main+0x2e8>)
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	2301      	movs	r3, #1
 800176c:	2203      	movs	r2, #3
 800176e:	2188      	movs	r1, #136	; 0x88
 8001770:	f002 f90a 	bl	8003988 <HAL_I2C_Mem_Write>
	databuffer = amp.midrange;
 8001774:	193b      	adds	r3, r7, r4
 8001776:	78da      	ldrb	r2, [r3, #3]
 8001778:	4b5d      	ldr	r3, [pc, #372]	; (80018f0 <main+0x2e8>)
 800177a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, TDA7439DS, MidRangeAddress, I2C_MEMADD_SIZE_8BIT,  &databuffer, 1, HAL_MAX_DELAY);
 800177c:	485d      	ldr	r0, [pc, #372]	; (80018f4 <main+0x2ec>)
 800177e:	2301      	movs	r3, #1
 8001780:	425b      	negs	r3, r3
 8001782:	9302      	str	r3, [sp, #8]
 8001784:	2301      	movs	r3, #1
 8001786:	9301      	str	r3, [sp, #4]
 8001788:	4b59      	ldr	r3, [pc, #356]	; (80018f0 <main+0x2e8>)
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	2301      	movs	r3, #1
 800178e:	2204      	movs	r2, #4
 8001790:	2188      	movs	r1, #136	; 0x88
 8001792:	f002 f8f9 	bl	8003988 <HAL_I2C_Mem_Write>
	databuffer = amp.treble;
 8001796:	193b      	adds	r3, r7, r4
 8001798:	791a      	ldrb	r2, [r3, #4]
 800179a:	4b55      	ldr	r3, [pc, #340]	; (80018f0 <main+0x2e8>)
 800179c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, TDA7439DS, TrebleAddress, I2C_MEMADD_SIZE_8BIT,  &databuffer, 1, HAL_MAX_DELAY);
 800179e:	4855      	ldr	r0, [pc, #340]	; (80018f4 <main+0x2ec>)
 80017a0:	2301      	movs	r3, #1
 80017a2:	425b      	negs	r3, r3
 80017a4:	9302      	str	r3, [sp, #8]
 80017a6:	2301      	movs	r3, #1
 80017a8:	9301      	str	r3, [sp, #4]
 80017aa:	4b51      	ldr	r3, [pc, #324]	; (80018f0 <main+0x2e8>)
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	2301      	movs	r3, #1
 80017b0:	2205      	movs	r2, #5
 80017b2:	2188      	movs	r1, #136	; 0x88
 80017b4:	f002 f8e8 	bl	8003988 <HAL_I2C_Mem_Write>
	databuffer = amp.attenuateL;
 80017b8:	193b      	adds	r3, r7, r4
 80017ba:	795a      	ldrb	r2, [r3, #5]
 80017bc:	4b4c      	ldr	r3, [pc, #304]	; (80018f0 <main+0x2e8>)
 80017be:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, TDA7439DS, AttenuateLAddress, I2C_MEMADD_SIZE_8BIT,  &databuffer, 1, HAL_MAX_DELAY);
 80017c0:	484c      	ldr	r0, [pc, #304]	; (80018f4 <main+0x2ec>)
 80017c2:	2301      	movs	r3, #1
 80017c4:	425b      	negs	r3, r3
 80017c6:	9302      	str	r3, [sp, #8]
 80017c8:	2301      	movs	r3, #1
 80017ca:	9301      	str	r3, [sp, #4]
 80017cc:	4b48      	ldr	r3, [pc, #288]	; (80018f0 <main+0x2e8>)
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	2301      	movs	r3, #1
 80017d2:	2207      	movs	r2, #7
 80017d4:	2188      	movs	r1, #136	; 0x88
 80017d6:	f002 f8d7 	bl	8003988 <HAL_I2C_Mem_Write>
	databuffer = amp.attenuateR;
 80017da:	193b      	adds	r3, r7, r4
 80017dc:	799a      	ldrb	r2, [r3, #6]
 80017de:	4b44      	ldr	r3, [pc, #272]	; (80018f0 <main+0x2e8>)
 80017e0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, TDA7439DS, AttenuateRAddress, I2C_MEMADD_SIZE_8BIT,  &databuffer, 1, HAL_MAX_DELAY);
 80017e2:	4844      	ldr	r0, [pc, #272]	; (80018f4 <main+0x2ec>)
 80017e4:	2301      	movs	r3, #1
 80017e6:	425b      	negs	r3, r3
 80017e8:	9302      	str	r3, [sp, #8]
 80017ea:	2301      	movs	r3, #1
 80017ec:	9301      	str	r3, [sp, #4]
 80017ee:	4b40      	ldr	r3, [pc, #256]	; (80018f0 <main+0x2e8>)
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	2301      	movs	r3, #1
 80017f4:	2206      	movs	r2, #6
 80017f6:	2188      	movs	r1, #136	; 0x88
 80017f8:	f002 f8c6 	bl	8003988 <HAL_I2C_Mem_Write>
		 * Audio Source Select
		 * 4 ADC values
		 * S/M switch
		 */
		//Audio select switch
		if(HAL_GPIO_ReadPin(AudioInput0_GPIO_Port, AudioInput0_Pin)){
 80017fc:	4b3e      	ldr	r3, [pc, #248]	; (80018f8 <main+0x2f0>)
 80017fe:	2120      	movs	r1, #32
 8001800:	0018      	movs	r0, r3
 8001802:	f001 fecd 	bl	80035a0 <HAL_GPIO_ReadPin>
 8001806:	1e03      	subs	r3, r0, #0
 8001808:	d003      	beq.n	8001812 <main+0x20a>
			amp.inputSelect = 0;
 800180a:	2308      	movs	r3, #8
 800180c:	18fb      	adds	r3, r7, r3
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(AudioInput1_GPIO_Port, AudioInput1_Pin)){
 8001812:	4b39      	ldr	r3, [pc, #228]	; (80018f8 <main+0x2f0>)
 8001814:	2110      	movs	r1, #16
 8001816:	0018      	movs	r0, r3
 8001818:	f001 fec2 	bl	80035a0 <HAL_GPIO_ReadPin>
 800181c:	1e03      	subs	r3, r0, #0
 800181e:	d003      	beq.n	8001828 <main+0x220>
			amp.inputSelect = 1;
 8001820:	2308      	movs	r3, #8
 8001822:	18fb      	adds	r3, r7, r3
 8001824:	2201      	movs	r2, #1
 8001826:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(AudioInput2_GPIO_Port, AudioInput2_Pin)){
 8001828:	2390      	movs	r3, #144	; 0x90
 800182a:	05db      	lsls	r3, r3, #23
 800182c:	2180      	movs	r1, #128	; 0x80
 800182e:	0018      	movs	r0, r3
 8001830:	f001 feb6 	bl	80035a0 <HAL_GPIO_ReadPin>
 8001834:	1e03      	subs	r3, r0, #0
 8001836:	d003      	beq.n	8001840 <main+0x238>
			amp.inputSelect = 2;
 8001838:	2308      	movs	r3, #8
 800183a:	18fb      	adds	r3, r7, r3
 800183c:	2202      	movs	r2, #2
 800183e:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(AudioInput3_GPIO_Port, AudioInput3_Pin)) {
 8001840:	2390      	movs	r3, #144	; 0x90
 8001842:	05db      	lsls	r3, r3, #23
 8001844:	2140      	movs	r1, #64	; 0x40
 8001846:	0018      	movs	r0, r3
 8001848:	f001 feaa 	bl	80035a0 <HAL_GPIO_ReadPin>
 800184c:	1e03      	subs	r3, r0, #0
 800184e:	d003      	beq.n	8001858 <main+0x250>
			amp.inputSelect = 3;
 8001850:	2308      	movs	r3, #8
 8001852:	18fb      	adds	r3, r7, r3
 8001854:	2203      	movs	r2, #3
 8001856:	701a      	strb	r2, [r3, #0]
		}

		//Stereo Mono Switch
		if(HAL_GPIO_ReadPin(StereoMonoSwitch_GPIO_Port, StereoMonoSwitch_Pin)){
 8001858:	4b23      	ldr	r3, [pc, #140]	; (80018e8 <main+0x2e0>)
 800185a:	2101      	movs	r1, #1
 800185c:	0018      	movs	r0, r3
 800185e:	f001 fe9f 	bl	80035a0 <HAL_GPIO_ReadPin>
 8001862:	1e03      	subs	r3, r0, #0
 8001864:	d009      	beq.n	800187a <main+0x272>
			monoMode = false;
 8001866:	4b25      	ldr	r3, [pc, #148]	; (80018fc <main+0x2f4>)
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(StereoMonoAnalogSwitch_GPIO_Port, StereoMonoAnalogSwitch_Pin, 0);
 800186c:	4b1e      	ldr	r3, [pc, #120]	; (80018e8 <main+0x2e0>)
 800186e:	2200      	movs	r2, #0
 8001870:	2108      	movs	r1, #8
 8001872:	0018      	movs	r0, r3
 8001874:	f001 feb1 	bl	80035da <HAL_GPIO_WritePin>
 8001878:	e008      	b.n	800188c <main+0x284>
		}
		else{
			monoMode = true;
 800187a:	4b20      	ldr	r3, [pc, #128]	; (80018fc <main+0x2f4>)
 800187c:	2201      	movs	r2, #1
 800187e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(StereoMonoAnalogSwitch_GPIO_Port, StereoMonoAnalogSwitch_Pin, 1);
 8001880:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <main+0x2e0>)
 8001882:	2201      	movs	r2, #1
 8001884:	2108      	movs	r1, #8
 8001886:	0018      	movs	r0, r3
 8001888:	f001 fea7 	bl	80035da <HAL_GPIO_WritePin>
		}

		// ADC - Values
		ADC_Start_Conversion();
 800188c:	f000 fdf8 	bl	8002480 <ADC_Start_Conversion>

		amp.gain = adcData[0][0];
 8001890:	4b1b      	ldr	r3, [pc, #108]	; (8001900 <main+0x2f8>)
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	b2da      	uxtb	r2, r3
 8001896:	2108      	movs	r1, #8
 8001898:	187b      	adds	r3, r7, r1
 800189a:	705a      	strb	r2, [r3, #1]
		amp.bass = adcData[0][1];
 800189c:	4b18      	ldr	r3, [pc, #96]	; (8001900 <main+0x2f8>)
 800189e:	885b      	ldrh	r3, [r3, #2]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	187b      	adds	r3, r7, r1
 80018a4:	709a      	strb	r2, [r3, #2]
		amp.midrange = adcData[0][2];
 80018a6:	4b16      	ldr	r3, [pc, #88]	; (8001900 <main+0x2f8>)
 80018a8:	889b      	ldrh	r3, [r3, #4]
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	187b      	adds	r3, r7, r1
 80018ae:	70da      	strb	r2, [r3, #3]
		amp.treble = adcData[0][3];
 80018b0:	4b13      	ldr	r3, [pc, #76]	; (8001900 <main+0x2f8>)
 80018b2:	88db      	ldrh	r3, [r3, #6]
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	187b      	adds	r3, r7, r1
 80018b8:	711a      	strb	r2, [r3, #4]

		//printf("%d %d %d %d\n", amp.gain, amp.bass, amp.midrange, amp.treble);

		//update Leds
		if(monoMode){
 80018ba:	4b10      	ldr	r3, [pc, #64]	; (80018fc <main+0x2f4>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d020      	beq.n	8001904 <main+0x2fc>
			HAL_GPIO_WritePin(MonoLed_GPIO_Port, MonoLed_Pin, 1);
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <main+0x2e0>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	2102      	movs	r1, #2
 80018c8:	0018      	movs	r0, r3
 80018ca:	f001 fe86 	bl	80035da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(StereoLed_GPIO_Port, StereoLed_Pin, 0);
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <main+0x2e0>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	2104      	movs	r1, #4
 80018d4:	0018      	movs	r0, r3
 80018d6:	f001 fe80 	bl	80035da <HAL_GPIO_WritePin>
 80018da:	e01f      	b.n	800191c <main+0x314>
 80018dc:	200000c4 	.word	0x200000c4
 80018e0:	20000028 	.word	0x20000028
 80018e4:	200001ac 	.word	0x200001ac
 80018e8:	48000400 	.word	0x48000400
 80018ec:	20000000 	.word	0x20000000
 80018f0:	200002f8 	.word	0x200002f8
 80018f4:	20000104 	.word	0x20000104
 80018f8:	48000800 	.word	0x48000800
 80018fc:	200002f9 	.word	0x200002f9
 8001900:	200002c4 	.word	0x200002c4
		}
		else{
			HAL_GPIO_WritePin(MonoLed_GPIO_Port, MonoLed_Pin, 0);
 8001904:	4b6b      	ldr	r3, [pc, #428]	; (8001ab4 <main+0x4ac>)
 8001906:	2200      	movs	r2, #0
 8001908:	2102      	movs	r1, #2
 800190a:	0018      	movs	r0, r3
 800190c:	f001 fe65 	bl	80035da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(StereoLed_GPIO_Port, StereoLed_Pin, 1);
 8001910:	4b68      	ldr	r3, [pc, #416]	; (8001ab4 <main+0x4ac>)
 8001912:	2201      	movs	r2, #1
 8001914:	2104      	movs	r1, #4
 8001916:	0018      	movs	r0, r3
 8001918:	f001 fe5f 	bl	80035da <HAL_GPIO_WritePin>
		 * I2C
		 * 8 registers
		 */

		// Display volume on LCD
		lcd_write_string(VersterkerValuesString[0], row1);
 800191c:	4b66      	ldr	r3, [pc, #408]	; (8001ab8 <main+0x4b0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2180      	movs	r1, #128	; 0x80
 8001922:	0018      	movs	r0, r3
 8001924:	f000 fc26 	bl	8002174 <lcd_write_string>
		lcd_write_bars(input, row2);
 8001928:	4b64      	ldr	r3, [pc, #400]	; (8001abc <main+0x4b4>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	b2db      	uxtb	r3, r3
 800192e:	21c0      	movs	r1, #192	; 0xc0
 8001930:	0018      	movs	r0, r3
 8001932:	f000 fc33 	bl	800219c <lcd_write_bars>

		if(amp.inputSelect != ampPrev.inputSelect){
 8001936:	2408      	movs	r4, #8
 8001938:	193b      	adds	r3, r7, r4
 800193a:	781a      	ldrb	r2, [r3, #0]
 800193c:	003b      	movs	r3, r7
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d01f      	beq.n	8001984 <main+0x37c>
			//Dislay
			lcd_write_string(VersterkerValuesString[5], row3);
 8001944:	4b5c      	ldr	r3, [pc, #368]	; (8001ab8 <main+0x4b0>)
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	2194      	movs	r1, #148	; 0x94
 800194a:	0018      	movs	r0, r3
 800194c:	f000 fc12 	bl	8002174 <lcd_write_string>
			lcd_write_selection(amp.inputSelect, row4);
 8001950:	193b      	adds	r3, r7, r4
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	21d4      	movs	r1, #212	; 0xd4
 8001956:	0018      	movs	r0, r3
 8001958:	f000 fca8 	bl	80022ac <lcd_write_selection>

			//printf("input = %d\n", amp.inputSelect);

			//TDA
			databuffer = amp.inputSelect;
 800195c:	193b      	adds	r3, r7, r4
 800195e:	781a      	ldrb	r2, [r3, #0]
 8001960:	4b57      	ldr	r3, [pc, #348]	; (8001ac0 <main+0x4b8>)
 8001962:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Write(&hi2c1, TDA7439DS, InputSelectAddress, I2C_MEMADD_SIZE_8BIT, &databuffer, 1, HAL_MAX_DELAY);
 8001964:	4857      	ldr	r0, [pc, #348]	; (8001ac4 <main+0x4bc>)
 8001966:	2301      	movs	r3, #1
 8001968:	425b      	negs	r3, r3
 800196a:	9302      	str	r3, [sp, #8]
 800196c:	2301      	movs	r3, #1
 800196e:	9301      	str	r3, [sp, #4]
 8001970:	4b53      	ldr	r3, [pc, #332]	; (8001ac0 <main+0x4b8>)
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	2301      	movs	r3, #1
 8001976:	2200      	movs	r2, #0
 8001978:	2188      	movs	r1, #136	; 0x88
 800197a:	f002 f805 	bl	8003988 <HAL_I2C_Mem_Write>

			//delay
			HAL_Delay(10);
 800197e:	200a      	movs	r0, #10
 8001980:	f001 f89e 	bl	8002ac0 <HAL_Delay>
		}


		if(amp.gain != ampPrev.gain){
 8001984:	2108      	movs	r1, #8
 8001986:	187b      	adds	r3, r7, r1
 8001988:	785a      	ldrb	r2, [r3, #1]
 800198a:	003b      	movs	r3, r7
 800198c:	785b      	ldrb	r3, [r3, #1]
 800198e:	429a      	cmp	r2, r3
 8001990:	d01a      	beq.n	80019c8 <main+0x3c0>
			databuffer = (amp.gain >> 4);
 8001992:	187b      	adds	r3, r7, r1
 8001994:	785b      	ldrb	r3, [r3, #1]
 8001996:	091b      	lsrs	r3, r3, #4
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4b49      	ldr	r3, [pc, #292]	; (8001ac0 <main+0x4b8>)
 800199c:	701a      	strb	r2, [r3, #0]
			printf("%d \n", amp.gain);
 800199e:	187b      	adds	r3, r7, r1
 80019a0:	785b      	ldrb	r3, [r3, #1]
 80019a2:	001a      	movs	r2, r3
 80019a4:	4b48      	ldr	r3, [pc, #288]	; (8001ac8 <main+0x4c0>)
 80019a6:	0011      	movs	r1, r2
 80019a8:	0018      	movs	r0, r3
 80019aa:	f004 fbcf 	bl	800614c <iprintf>
			HAL_I2C_Mem_Write(&hi2c1, TDA7439DS, GainAddress, I2C_MEMADD_SIZE_8BIT,  &databuffer, 1, HAL_MAX_DELAY);
 80019ae:	4845      	ldr	r0, [pc, #276]	; (8001ac4 <main+0x4bc>)
 80019b0:	2301      	movs	r3, #1
 80019b2:	425b      	negs	r3, r3
 80019b4:	9302      	str	r3, [sp, #8]
 80019b6:	2301      	movs	r3, #1
 80019b8:	9301      	str	r3, [sp, #4]
 80019ba:	4b41      	ldr	r3, [pc, #260]	; (8001ac0 <main+0x4b8>)
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	2301      	movs	r3, #1
 80019c0:	2201      	movs	r2, #1
 80019c2:	2188      	movs	r1, #136	; 0x88
 80019c4:	f001 ffe0 	bl	8003988 <HAL_I2C_Mem_Write>
		}


		updateTDA(amp.bass, ampPrev.bass, VersterkerValuesString[2], 1, BassAddress);
 80019c8:	2408      	movs	r4, #8
 80019ca:	193b      	adds	r3, r7, r4
 80019cc:	7898      	ldrb	r0, [r3, #2]
 80019ce:	003b      	movs	r3, r7
 80019d0:	7899      	ldrb	r1, [r3, #2]
 80019d2:	4b39      	ldr	r3, [pc, #228]	; (8001ab8 <main+0x4b0>)
 80019d4:	689a      	ldr	r2, [r3, #8]
 80019d6:	2303      	movs	r3, #3
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	2301      	movs	r3, #1
 80019dc:	f000 fb78 	bl	80020d0 <updateTDA>
		updateTDA(amp.midrange, ampPrev.midrange, VersterkerValuesString[3], 1, MidRangeAddress);
 80019e0:	193b      	adds	r3, r7, r4
 80019e2:	78d8      	ldrb	r0, [r3, #3]
 80019e4:	003b      	movs	r3, r7
 80019e6:	78d9      	ldrb	r1, [r3, #3]
 80019e8:	4b33      	ldr	r3, [pc, #204]	; (8001ab8 <main+0x4b0>)
 80019ea:	68da      	ldr	r2, [r3, #12]
 80019ec:	2304      	movs	r3, #4
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	2301      	movs	r3, #1
 80019f2:	f000 fb6d 	bl	80020d0 <updateTDA>
		updateTDA(amp.treble, ampPrev.treble, VersterkerValuesString[4], 1, TrebleAddress);
 80019f6:	193b      	adds	r3, r7, r4
 80019f8:	7918      	ldrb	r0, [r3, #4]
 80019fa:	003b      	movs	r3, r7
 80019fc:	7919      	ldrb	r1, [r3, #4]
 80019fe:	4b2e      	ldr	r3, [pc, #184]	; (8001ab8 <main+0x4b0>)
 8001a00:	691a      	ldr	r2, [r3, #16]
 8001a02:	2305      	movs	r3, #5
 8001a04:	9300      	str	r3, [sp, #0]
 8001a06:	2301      	movs	r3, #1
 8001a08:	f000 fb62 	bl	80020d0 <updateTDA>

		if(amp.attenuateL != ampPrev.attenuateL){
 8001a0c:	193b      	adds	r3, r7, r4
 8001a0e:	795a      	ldrb	r2, [r3, #5]
 8001a10:	003b      	movs	r3, r7
 8001a12:	795b      	ldrb	r3, [r3, #5]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d010      	beq.n	8001a3a <main+0x432>
			databuffer = amp.attenuateL;
 8001a18:	193b      	adds	r3, r7, r4
 8001a1a:	795a      	ldrb	r2, [r3, #5]
 8001a1c:	4b28      	ldr	r3, [pc, #160]	; (8001ac0 <main+0x4b8>)
 8001a1e:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Write(&hi2c1, TDA7439DS, AttenuateLAddress, I2C_MEMADD_SIZE_8BIT,  &databuffer, 1, HAL_MAX_DELAY);
 8001a20:	4828      	ldr	r0, [pc, #160]	; (8001ac4 <main+0x4bc>)
 8001a22:	2301      	movs	r3, #1
 8001a24:	425b      	negs	r3, r3
 8001a26:	9302      	str	r3, [sp, #8]
 8001a28:	2301      	movs	r3, #1
 8001a2a:	9301      	str	r3, [sp, #4]
 8001a2c:	4b24      	ldr	r3, [pc, #144]	; (8001ac0 <main+0x4b8>)
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	2301      	movs	r3, #1
 8001a32:	2207      	movs	r2, #7
 8001a34:	2188      	movs	r1, #136	; 0x88
 8001a36:	f001 ffa7 	bl	8003988 <HAL_I2C_Mem_Write>
		}

		if(amp.attenuateR != ampPrev.attenuateR){
 8001a3a:	2108      	movs	r1, #8
 8001a3c:	187b      	adds	r3, r7, r1
 8001a3e:	799a      	ldrb	r2, [r3, #6]
 8001a40:	003b      	movs	r3, r7
 8001a42:	799b      	ldrb	r3, [r3, #6]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d010      	beq.n	8001a6a <main+0x462>
			databuffer = amp.attenuateR;
 8001a48:	187b      	adds	r3, r7, r1
 8001a4a:	799a      	ldrb	r2, [r3, #6]
 8001a4c:	4b1c      	ldr	r3, [pc, #112]	; (8001ac0 <main+0x4b8>)
 8001a4e:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Write(&hi2c1, TDA7439DS, AttenuateRAddress, I2C_MEMADD_SIZE_8BIT,  &databuffer, 1, HAL_MAX_DELAY);
 8001a50:	481c      	ldr	r0, [pc, #112]	; (8001ac4 <main+0x4bc>)
 8001a52:	2301      	movs	r3, #1
 8001a54:	425b      	negs	r3, r3
 8001a56:	9302      	str	r3, [sp, #8]
 8001a58:	2301      	movs	r3, #1
 8001a5a:	9301      	str	r3, [sp, #4]
 8001a5c:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <main+0x4b8>)
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	2301      	movs	r3, #1
 8001a62:	2206      	movs	r2, #6
 8001a64:	2188      	movs	r1, #136	; 0x88
 8001a66:	f001 ff8f 	bl	8003988 <HAL_I2C_Mem_Write>
		}

		//	update prev values
		ampPrev.inputSelect = amp.inputSelect;
 8001a6a:	2108      	movs	r1, #8
 8001a6c:	187b      	adds	r3, r7, r1
 8001a6e:	781a      	ldrb	r2, [r3, #0]
 8001a70:	003b      	movs	r3, r7
 8001a72:	701a      	strb	r2, [r3, #0]
		ampPrev.gain 		= amp.gain;
 8001a74:	187b      	adds	r3, r7, r1
 8001a76:	785a      	ldrb	r2, [r3, #1]
 8001a78:	003b      	movs	r3, r7
 8001a7a:	705a      	strb	r2, [r3, #1]
		ampPrev.bass 		= amp.bass;
 8001a7c:	187b      	adds	r3, r7, r1
 8001a7e:	789a      	ldrb	r2, [r3, #2]
 8001a80:	003b      	movs	r3, r7
 8001a82:	709a      	strb	r2, [r3, #2]
		ampPrev.midrange 	= amp.midrange;
 8001a84:	187b      	adds	r3, r7, r1
 8001a86:	78da      	ldrb	r2, [r3, #3]
 8001a88:	003b      	movs	r3, r7
 8001a8a:	70da      	strb	r2, [r3, #3]
		ampPrev.treble 		= amp.treble;
 8001a8c:	187b      	adds	r3, r7, r1
 8001a8e:	791a      	ldrb	r2, [r3, #4]
 8001a90:	003b      	movs	r3, r7
 8001a92:	711a      	strb	r2, [r3, #4]
		ampPrev.attenuateL 	= amp.attenuateL;
 8001a94:	187b      	adds	r3, r7, r1
 8001a96:	795a      	ldrb	r2, [r3, #5]
 8001a98:	003b      	movs	r3, r7
 8001a9a:	715a      	strb	r2, [r3, #5]
		ampPrev.attenuateR 	= amp.attenuateR;
 8001a9c:	187b      	adds	r3, r7, r1
 8001a9e:	799a      	ldrb	r2, [r3, #6]
 8001aa0:	003b      	movs	r3, r7
 8001aa2:	719a      	strb	r2, [r3, #6]

		//	Toggle Status pin
		HAL_GPIO_TogglePin(STSLED_GPIO_Port, STSLED_Pin);
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	011b      	lsls	r3, r3, #4
 8001aa8:	4a08      	ldr	r2, [pc, #32]	; (8001acc <main+0x4c4>)
 8001aaa:	0019      	movs	r1, r3
 8001aac:	0010      	movs	r0, r2
 8001aae:	f001 fdb1 	bl	8003614 <HAL_GPIO_TogglePin>
		if(HAL_GPIO_ReadPin(AudioInput0_GPIO_Port, AudioInput0_Pin)){
 8001ab2:	e6a3      	b.n	80017fc <main+0x1f4>
 8001ab4:	48000400 	.word	0x48000400
 8001ab8:	20000028 	.word	0x20000028
 8001abc:	20000004 	.word	0x20000004
 8001ac0:	200002f8 	.word	0x200002f8
 8001ac4:	20000104 	.word	0x20000104
 8001ac8:	08006fb4 	.word	0x08006fb4
 8001acc:	48000800 	.word	0x48000800

08001ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ad0:	b590      	push	{r4, r7, lr}
 8001ad2:	b099      	sub	sp, #100	; 0x64
 8001ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ad6:	242c      	movs	r4, #44	; 0x2c
 8001ad8:	193b      	adds	r3, r7, r4
 8001ada:	0018      	movs	r0, r3
 8001adc:	2334      	movs	r3, #52	; 0x34
 8001ade:	001a      	movs	r2, r3
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	f004 fb8f 	bl	8006204 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ae6:	231c      	movs	r3, #28
 8001ae8:	18fb      	adds	r3, r7, r3
 8001aea:	0018      	movs	r0, r3
 8001aec:	2310      	movs	r3, #16
 8001aee:	001a      	movs	r2, r3
 8001af0:	2100      	movs	r1, #0
 8001af2:	f004 fb87 	bl	8006204 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001af6:	003b      	movs	r3, r7
 8001af8:	0018      	movs	r0, r3
 8001afa:	231c      	movs	r3, #28
 8001afc:	001a      	movs	r2, r3
 8001afe:	2100      	movs	r1, #0
 8001b00:	f004 fb80 	bl	8006204 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8001b04:	0021      	movs	r1, r4
 8001b06:	187b      	adds	r3, r7, r1
 8001b08:	2232      	movs	r2, #50	; 0x32
 8001b0a:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b0c:	187b      	adds	r3, r7, r1
 8001b0e:	2201      	movs	r2, #1
 8001b10:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001b12:	187b      	adds	r3, r7, r1
 8001b14:	2201      	movs	r2, #1
 8001b16:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001b18:	187b      	adds	r3, r7, r1
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b1e:	187b      	adds	r3, r7, r1
 8001b20:	2210      	movs	r2, #16
 8001b22:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001b24:	187b      	adds	r3, r7, r1
 8001b26:	2210      	movs	r2, #16
 8001b28:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b2a:	187b      	adds	r3, r7, r1
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b30:	187b      	adds	r3, r7, r1
 8001b32:	0018      	movs	r0, r3
 8001b34:	f002 fb86 	bl	8004244 <HAL_RCC_OscConfig>
 8001b38:	1e03      	subs	r3, r0, #0
 8001b3a:	d001      	beq.n	8001b40 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8001b3c:	f000 fcae 	bl	800249c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b40:	211c      	movs	r1, #28
 8001b42:	187b      	adds	r3, r7, r1
 8001b44:	2207      	movs	r2, #7
 8001b46:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8001b48:	187b      	adds	r3, r7, r1
 8001b4a:	2203      	movs	r2, #3
 8001b4c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b4e:	187b      	adds	r3, r7, r1
 8001b50:	2200      	movs	r2, #0
 8001b52:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b54:	187b      	adds	r3, r7, r1
 8001b56:	2200      	movs	r2, #0
 8001b58:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b5a:	187b      	adds	r3, r7, r1
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f002 fef6 	bl	8004950 <HAL_RCC_ClockConfig>
 8001b64:	1e03      	subs	r3, r0, #0
 8001b66:	d001      	beq.n	8001b6c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001b68:	f000 fc98 	bl	800249c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001b6c:	003b      	movs	r3, r7
 8001b6e:	2221      	movs	r2, #33	; 0x21
 8001b70:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001b72:	003b      	movs	r3, r7
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001b78:	003b      	movs	r3, r7
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b7e:	003b      	movs	r3, r7
 8001b80:	0018      	movs	r0, r3
 8001b82:	f003 f851 	bl	8004c28 <HAL_RCCEx_PeriphCLKConfig>
 8001b86:	1e03      	subs	r3, r0, #0
 8001b88:	d001      	beq.n	8001b8e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001b8a:	f000 fc87 	bl	800249c <Error_Handler>
  }
}
 8001b8e:	46c0      	nop			; (mov r8, r8)
 8001b90:	46bd      	mov	sp, r7
 8001b92:	b019      	add	sp, #100	; 0x64
 8001b94:	bd90      	pop	{r4, r7, pc}
	...

08001b98 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b9e:	1d3b      	adds	r3, r7, #4
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	230c      	movs	r3, #12
 8001ba4:	001a      	movs	r2, r3
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	f004 fb2c 	bl	8006204 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001bac:	4b40      	ldr	r3, [pc, #256]	; (8001cb0 <MX_ADC_Init+0x118>)
 8001bae:	4a41      	ldr	r2, [pc, #260]	; (8001cb4 <MX_ADC_Init+0x11c>)
 8001bb0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001bb2:	4b3f      	ldr	r3, [pc, #252]	; (8001cb0 <MX_ADC_Init+0x118>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_8B;
 8001bb8:	4b3d      	ldr	r3, [pc, #244]	; (8001cb0 <MX_ADC_Init+0x118>)
 8001bba:	2210      	movs	r2, #16
 8001bbc:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bbe:	4b3c      	ldr	r3, [pc, #240]	; (8001cb0 <MX_ADC_Init+0x118>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001bc4:	4b3a      	ldr	r3, [pc, #232]	; (8001cb0 <MX_ADC_Init+0x118>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bca:	4b39      	ldr	r3, [pc, #228]	; (8001cb0 <MX_ADC_Init+0x118>)
 8001bcc:	2204      	movs	r2, #4
 8001bce:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001bd0:	4b37      	ldr	r3, [pc, #220]	; (8001cb0 <MX_ADC_Init+0x118>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001bd6:	4b36      	ldr	r3, [pc, #216]	; (8001cb0 <MX_ADC_Init+0x118>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001bdc:	4b34      	ldr	r3, [pc, #208]	; (8001cb0 <MX_ADC_Init+0x118>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001be2:	4b33      	ldr	r3, [pc, #204]	; (8001cb0 <MX_ADC_Init+0x118>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001be8:	4b31      	ldr	r3, [pc, #196]	; (8001cb0 <MX_ADC_Init+0x118>)
 8001bea:	22c2      	movs	r2, #194	; 0xc2
 8001bec:	32ff      	adds	r2, #255	; 0xff
 8001bee:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bf0:	4b2f      	ldr	r3, [pc, #188]	; (8001cb0 <MX_ADC_Init+0x118>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001bf6:	4b2e      	ldr	r3, [pc, #184]	; (8001cb0 <MX_ADC_Init+0x118>)
 8001bf8:	2224      	movs	r2, #36	; 0x24
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001bfe:	4b2c      	ldr	r3, [pc, #176]	; (8001cb0 <MX_ADC_Init+0x118>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001c04:	4b2a      	ldr	r3, [pc, #168]	; (8001cb0 <MX_ADC_Init+0x118>)
 8001c06:	0018      	movs	r0, r3
 8001c08:	f000 ff7e 	bl	8002b08 <HAL_ADC_Init>
 8001c0c:	1e03      	subs	r3, r0, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8001c10:	f000 fc44 	bl	800249c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001c14:	1d3b      	adds	r3, r7, #4
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	2280      	movs	r2, #128	; 0x80
 8001c1e:	0152      	lsls	r2, r2, #5
 8001c20:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001c22:	1d3b      	adds	r3, r7, #4
 8001c24:	2280      	movs	r2, #128	; 0x80
 8001c26:	0552      	lsls	r2, r2, #21
 8001c28:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001c2a:	1d3a      	adds	r2, r7, #4
 8001c2c:	4b20      	ldr	r3, [pc, #128]	; (8001cb0 <MX_ADC_Init+0x118>)
 8001c2e:	0011      	movs	r1, r2
 8001c30:	0018      	movs	r0, r3
 8001c32:	f001 f8a9 	bl	8002d88 <HAL_ADC_ConfigChannel>
 8001c36:	1e03      	subs	r3, r0, #0
 8001c38:	d001      	beq.n	8001c3e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8001c3a:	f000 fc2f 	bl	800249c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c3e:	1d3b      	adds	r3, r7, #4
 8001c40:	2201      	movs	r2, #1
 8001c42:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001c44:	1d3a      	adds	r2, r7, #4
 8001c46:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <MX_ADC_Init+0x118>)
 8001c48:	0011      	movs	r1, r2
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	f001 f89c 	bl	8002d88 <HAL_ADC_ConfigChannel>
 8001c50:	1e03      	subs	r3, r0, #0
 8001c52:	d001      	beq.n	8001c58 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8001c54:	f000 fc22 	bl	800249c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001c58:	1d3b      	adds	r3, r7, #4
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001c5e:	1d3a      	adds	r2, r7, #4
 8001c60:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <MX_ADC_Init+0x118>)
 8001c62:	0011      	movs	r1, r2
 8001c64:	0018      	movs	r0, r3
 8001c66:	f001 f88f 	bl	8002d88 <HAL_ADC_ConfigChannel>
 8001c6a:	1e03      	subs	r3, r0, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8001c6e:	f000 fc15 	bl	800249c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001c72:	1d3b      	adds	r3, r7, #4
 8001c74:	2203      	movs	r2, #3
 8001c76:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001c78:	1d3a      	adds	r2, r7, #4
 8001c7a:	4b0d      	ldr	r3, [pc, #52]	; (8001cb0 <MX_ADC_Init+0x118>)
 8001c7c:	0011      	movs	r1, r2
 8001c7e:	0018      	movs	r0, r3
 8001c80:	f001 f882 	bl	8002d88 <HAL_ADC_ConfigChannel>
 8001c84:	1e03      	subs	r3, r0, #0
 8001c86:	d001      	beq.n	8001c8c <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8001c88:	f000 fc08 	bl	800249c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8001c8c:	1d3b      	adds	r3, r7, #4
 8001c8e:	2212      	movs	r2, #18
 8001c90:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001c92:	1d3a      	adds	r2, r7, #4
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <MX_ADC_Init+0x118>)
 8001c96:	0011      	movs	r1, r2
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f001 f875 	bl	8002d88 <HAL_ADC_ConfigChannel>
 8001c9e:	1e03      	subs	r3, r0, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8001ca2:	f000 fbfb 	bl	800249c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001ca6:	46c0      	nop			; (mov r8, r8)
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	b004      	add	sp, #16
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	200000c4 	.word	0x200000c4
 8001cb4:	40012400 	.word	0x40012400

08001cb8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cbc:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <MX_I2C1_Init+0x74>)
 8001cbe:	4a1c      	ldr	r2, [pc, #112]	; (8001d30 <MX_I2C1_Init+0x78>)
 8001cc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00101D7C;
 8001cc2:	4b1a      	ldr	r3, [pc, #104]	; (8001d2c <MX_I2C1_Init+0x74>)
 8001cc4:	4a1b      	ldr	r2, [pc, #108]	; (8001d34 <MX_I2C1_Init+0x7c>)
 8001cc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001cc8:	4b18      	ldr	r3, [pc, #96]	; (8001d2c <MX_I2C1_Init+0x74>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cce:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <MX_I2C1_Init+0x74>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cd4:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <MX_I2C1_Init+0x74>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001cda:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <MX_I2C1_Init+0x74>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ce0:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <MX_I2C1_Init+0x74>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ce6:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <MX_I2C1_Init+0x74>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cec:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <MX_I2C1_Init+0x74>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <MX_I2C1_Init+0x74>)
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	f001 fca9 	bl	800364c <HAL_I2C_Init>
 8001cfa:	1e03      	subs	r3, r0, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001cfe:	f000 fbcd 	bl	800249c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d02:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <MX_I2C1_Init+0x74>)
 8001d04:	2100      	movs	r1, #0
 8001d06:	0018      	movs	r0, r3
 8001d08:	f002 fa04 	bl	8004114 <HAL_I2CEx_ConfigAnalogFilter>
 8001d0c:	1e03      	subs	r3, r0, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001d10:	f000 fbc4 	bl	800249c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d14:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <MX_I2C1_Init+0x74>)
 8001d16:	2100      	movs	r1, #0
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f002 fa47 	bl	80041ac <HAL_I2CEx_ConfigDigitalFilter>
 8001d1e:	1e03      	subs	r3, r0, #0
 8001d20:	d001      	beq.n	8001d26 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001d22:	f000 fbbb 	bl	800249c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20000104 	.word	0x20000104
 8001d30:	40005400 	.word	0x40005400
 8001d34:	00101d7c 	.word	0x00101d7c

08001d38 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d3c:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <MX_I2C2_Init+0x74>)
 8001d3e:	4a1c      	ldr	r2, [pc, #112]	; (8001db0 <MX_I2C2_Init+0x78>)
 8001d40:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001d42:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <MX_I2C2_Init+0x74>)
 8001d44:	4a1b      	ldr	r2, [pc, #108]	; (8001db4 <MX_I2C2_Init+0x7c>)
 8001d46:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001d48:	4b18      	ldr	r3, [pc, #96]	; (8001dac <MX_I2C2_Init+0x74>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d4e:	4b17      	ldr	r3, [pc, #92]	; (8001dac <MX_I2C2_Init+0x74>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d54:	4b15      	ldr	r3, [pc, #84]	; (8001dac <MX_I2C2_Init+0x74>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001d5a:	4b14      	ldr	r3, [pc, #80]	; (8001dac <MX_I2C2_Init+0x74>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d60:	4b12      	ldr	r3, [pc, #72]	; (8001dac <MX_I2C2_Init+0x74>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d66:	4b11      	ldr	r3, [pc, #68]	; (8001dac <MX_I2C2_Init+0x74>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d6c:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <MX_I2C2_Init+0x74>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d72:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <MX_I2C2_Init+0x74>)
 8001d74:	0018      	movs	r0, r3
 8001d76:	f001 fc69 	bl	800364c <HAL_I2C_Init>
 8001d7a:	1e03      	subs	r3, r0, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001d7e:	f000 fb8d 	bl	800249c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d82:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <MX_I2C2_Init+0x74>)
 8001d84:	2100      	movs	r1, #0
 8001d86:	0018      	movs	r0, r3
 8001d88:	f002 f9c4 	bl	8004114 <HAL_I2CEx_ConfigAnalogFilter>
 8001d8c:	1e03      	subs	r3, r0, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001d90:	f000 fb84 	bl	800249c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001d94:	4b05      	ldr	r3, [pc, #20]	; (8001dac <MX_I2C2_Init+0x74>)
 8001d96:	2100      	movs	r1, #0
 8001d98:	0018      	movs	r0, r3
 8001d9a:	f002 fa07 	bl	80041ac <HAL_I2CEx_ConfigDigitalFilter>
 8001d9e:	1e03      	subs	r3, r0, #0
 8001da0:	d001      	beq.n	8001da6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001da2:	f000 fb7b 	bl	800249c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001da6:	46c0      	nop			; (mov r8, r8)
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20000158 	.word	0x20000158
 8001db0:	40005800 	.word	0x40005800
 8001db4:	20303e5d 	.word	0x20303e5d

08001db8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001db8:	b590      	push	{r4, r7, lr}
 8001dba:	b08d      	sub	sp, #52	; 0x34
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dbe:	240c      	movs	r4, #12
 8001dc0:	193b      	adds	r3, r7, r4
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	2324      	movs	r3, #36	; 0x24
 8001dc6:	001a      	movs	r2, r3
 8001dc8:	2100      	movs	r1, #0
 8001dca:	f004 fa1b 	bl	8006204 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	2308      	movs	r3, #8
 8001dd4:	001a      	movs	r2, r3
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	f004 fa14 	bl	8006204 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ddc:	4b25      	ldr	r3, [pc, #148]	; (8001e74 <MX_TIM3_Init+0xbc>)
 8001dde:	4a26      	ldr	r2, [pc, #152]	; (8001e78 <MX_TIM3_Init+0xc0>)
 8001de0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001de2:	4b24      	ldr	r3, [pc, #144]	; (8001e74 <MX_TIM3_Init+0xbc>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de8:	4b22      	ldr	r3, [pc, #136]	; (8001e74 <MX_TIM3_Init+0xbc>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001dee:	4b21      	ldr	r3, [pc, #132]	; (8001e74 <MX_TIM3_Init+0xbc>)
 8001df0:	4a22      	ldr	r2, [pc, #136]	; (8001e7c <MX_TIM3_Init+0xc4>)
 8001df2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df4:	4b1f      	ldr	r3, [pc, #124]	; (8001e74 <MX_TIM3_Init+0xbc>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dfa:	4b1e      	ldr	r3, [pc, #120]	; (8001e74 <MX_TIM3_Init+0xbc>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e00:	0021      	movs	r1, r4
 8001e02:	187b      	adds	r3, r7, r1
 8001e04:	2203      	movs	r2, #3
 8001e06:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001e08:	187b      	adds	r3, r7, r1
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e0e:	187b      	adds	r3, r7, r1
 8001e10:	2201      	movs	r2, #1
 8001e12:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e14:	187b      	adds	r3, r7, r1
 8001e16:	2200      	movs	r2, #0
 8001e18:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8001e1a:	187b      	adds	r3, r7, r1
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001e20:	187b      	adds	r3, r7, r1
 8001e22:	2202      	movs	r2, #2
 8001e24:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e26:	187b      	adds	r3, r7, r1
 8001e28:	2201      	movs	r2, #1
 8001e2a:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e2c:	187b      	adds	r3, r7, r1
 8001e2e:	2200      	movs	r2, #0
 8001e30:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8001e32:	187b      	adds	r3, r7, r1
 8001e34:	2200      	movs	r2, #0
 8001e36:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001e38:	187a      	adds	r2, r7, r1
 8001e3a:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <MX_TIM3_Init+0xbc>)
 8001e3c:	0011      	movs	r1, r2
 8001e3e:	0018      	movs	r0, r3
 8001e40:	f003 f86e 	bl	8004f20 <HAL_TIM_Encoder_Init>
 8001e44:	1e03      	subs	r3, r0, #0
 8001e46:	d001      	beq.n	8001e4c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001e48:	f000 fb28 	bl	800249c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e4c:	1d3b      	adds	r3, r7, #4
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e52:	1d3b      	adds	r3, r7, #4
 8001e54:	2200      	movs	r2, #0
 8001e56:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e58:	1d3a      	adds	r2, r7, #4
 8001e5a:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <MX_TIM3_Init+0xbc>)
 8001e5c:	0011      	movs	r1, r2
 8001e5e:	0018      	movs	r0, r3
 8001e60:	f003 fb9c 	bl	800559c <HAL_TIMEx_MasterConfigSynchronization>
 8001e64:	1e03      	subs	r3, r0, #0
 8001e66:	d001      	beq.n	8001e6c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001e68:	f000 fb18 	bl	800249c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e6c:	46c0      	nop			; (mov r8, r8)
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	b00d      	add	sp, #52	; 0x34
 8001e72:	bd90      	pop	{r4, r7, pc}
 8001e74:	200001ac 	.word	0x200001ac
 8001e78:	40000400 	.word	0x40000400
 8001e7c:	0000ffff 	.word	0x0000ffff

08001e80 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e86:	003b      	movs	r3, r7
 8001e88:	0018      	movs	r0, r3
 8001e8a:	2308      	movs	r3, #8
 8001e8c:	001a      	movs	r2, r3
 8001e8e:	2100      	movs	r1, #0
 8001e90:	f004 f9b8 	bl	8006204 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001e94:	4b15      	ldr	r3, [pc, #84]	; (8001eec <MX_TIM6_Init+0x6c>)
 8001e96:	4a16      	ldr	r2, [pc, #88]	; (8001ef0 <MX_TIM6_Init+0x70>)
 8001e98:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 30000;
 8001e9a:	4b14      	ldr	r3, [pc, #80]	; (8001eec <MX_TIM6_Init+0x6c>)
 8001e9c:	4a15      	ldr	r2, [pc, #84]	; (8001ef4 <MX_TIM6_Init+0x74>)
 8001e9e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea0:	4b12      	ldr	r3, [pc, #72]	; (8001eec <MX_TIM6_Init+0x6c>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7937;
 8001ea6:	4b11      	ldr	r3, [pc, #68]	; (8001eec <MX_TIM6_Init+0x6c>)
 8001ea8:	4a13      	ldr	r2, [pc, #76]	; (8001ef8 <MX_TIM6_Init+0x78>)
 8001eaa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eac:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <MX_TIM6_Init+0x6c>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <MX_TIM6_Init+0x6c>)
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f002 ffb5 	bl	8004e24 <HAL_TIM_Base_Init>
 8001eba:	1e03      	subs	r3, r0, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001ebe:	f000 faed 	bl	800249c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ec2:	003b      	movs	r3, r7
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec8:	003b      	movs	r3, r7
 8001eca:	2200      	movs	r2, #0
 8001ecc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ece:	003a      	movs	r2, r7
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <MX_TIM6_Init+0x6c>)
 8001ed2:	0011      	movs	r1, r2
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	f003 fb61 	bl	800559c <HAL_TIMEx_MasterConfigSynchronization>
 8001eda:	1e03      	subs	r3, r0, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8001ede:	f000 fadd 	bl	800249c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	b002      	add	sp, #8
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	200001f4 	.word	0x200001f4
 8001ef0:	40001000 	.word	0x40001000
 8001ef4:	00007530 	.word	0x00007530
 8001ef8:	00001f01 	.word	0x00001f01

08001efc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f00:	4b14      	ldr	r3, [pc, #80]	; (8001f54 <MX_USART1_UART_Init+0x58>)
 8001f02:	4a15      	ldr	r2, [pc, #84]	; (8001f58 <MX_USART1_UART_Init+0x5c>)
 8001f04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001f06:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <MX_USART1_UART_Init+0x58>)
 8001f08:	2296      	movs	r2, #150	; 0x96
 8001f0a:	0192      	lsls	r2, r2, #6
 8001f0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f0e:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <MX_USART1_UART_Init+0x58>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f14:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <MX_USART1_UART_Init+0x58>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f1a:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <MX_USART1_UART_Init+0x58>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <MX_USART1_UART_Init+0x58>)
 8001f22:	220c      	movs	r2, #12
 8001f24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f26:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <MX_USART1_UART_Init+0x58>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f2c:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <MX_USART1_UART_Init+0x58>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f32:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <MX_USART1_UART_Init+0x58>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f38:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <MX_USART1_UART_Init+0x58>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f3e:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <MX_USART1_UART_Init+0x58>)
 8001f40:	0018      	movs	r0, r3
 8001f42:	f003 fb99 	bl	8005678 <HAL_UART_Init>
 8001f46:	1e03      	subs	r3, r0, #0
 8001f48:	d001      	beq.n	8001f4e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001f4a:	f000 faa7 	bl	800249c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	2000023c 	.word	0x2000023c
 8001f58:	40013800 	.word	0x40013800

08001f5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f5c:	b590      	push	{r4, r7, lr}
 8001f5e:	b089      	sub	sp, #36	; 0x24
 8001f60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f62:	240c      	movs	r4, #12
 8001f64:	193b      	adds	r3, r7, r4
 8001f66:	0018      	movs	r0, r3
 8001f68:	2314      	movs	r3, #20
 8001f6a:	001a      	movs	r2, r3
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	f004 f949 	bl	8006204 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f72:	4b54      	ldr	r3, [pc, #336]	; (80020c4 <MX_GPIO_Init+0x168>)
 8001f74:	695a      	ldr	r2, [r3, #20]
 8001f76:	4b53      	ldr	r3, [pc, #332]	; (80020c4 <MX_GPIO_Init+0x168>)
 8001f78:	2180      	movs	r1, #128	; 0x80
 8001f7a:	0289      	lsls	r1, r1, #10
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	615a      	str	r2, [r3, #20]
 8001f80:	4b50      	ldr	r3, [pc, #320]	; (80020c4 <MX_GPIO_Init+0x168>)
 8001f82:	695a      	ldr	r2, [r3, #20]
 8001f84:	2380      	movs	r3, #128	; 0x80
 8001f86:	029b      	lsls	r3, r3, #10
 8001f88:	4013      	ands	r3, r2
 8001f8a:	60bb      	str	r3, [r7, #8]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8e:	4b4d      	ldr	r3, [pc, #308]	; (80020c4 <MX_GPIO_Init+0x168>)
 8001f90:	695a      	ldr	r2, [r3, #20]
 8001f92:	4b4c      	ldr	r3, [pc, #304]	; (80020c4 <MX_GPIO_Init+0x168>)
 8001f94:	2180      	movs	r1, #128	; 0x80
 8001f96:	0309      	lsls	r1, r1, #12
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	615a      	str	r2, [r3, #20]
 8001f9c:	4b49      	ldr	r3, [pc, #292]	; (80020c4 <MX_GPIO_Init+0x168>)
 8001f9e:	695a      	ldr	r2, [r3, #20]
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	031b      	lsls	r3, r3, #12
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	607b      	str	r3, [r7, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001faa:	4b46      	ldr	r3, [pc, #280]	; (80020c4 <MX_GPIO_Init+0x168>)
 8001fac:	695a      	ldr	r2, [r3, #20]
 8001fae:	4b45      	ldr	r3, [pc, #276]	; (80020c4 <MX_GPIO_Init+0x168>)
 8001fb0:	2180      	movs	r1, #128	; 0x80
 8001fb2:	02c9      	lsls	r1, r1, #11
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	615a      	str	r2, [r3, #20]
 8001fb8:	4b42      	ldr	r3, [pc, #264]	; (80020c4 <MX_GPIO_Init+0x168>)
 8001fba:	695a      	ldr	r2, [r3, #20]
 8001fbc:	2380      	movs	r3, #128	; 0x80
 8001fbe:	02db      	lsls	r3, r3, #11
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	603b      	str	r3, [r7, #0]
 8001fc4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MonoMuteLed_Pin|StereoMuteLed_Pin, GPIO_PIN_RESET);
 8001fc6:	2390      	movs	r3, #144	; 0x90
 8001fc8:	05db      	lsls	r3, r3, #23
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2130      	movs	r1, #48	; 0x30
 8001fce:	0018      	movs	r0, r3
 8001fd0:	f001 fb03 	bl	80035da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MonoLed_Pin|StereoLed_Pin|StereoMonoAnalogSwitch_Pin|MuteRelais_Pin
 8001fd4:	4b3c      	ldr	r3, [pc, #240]	; (80020c8 <MX_GPIO_Init+0x16c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	213e      	movs	r1, #62	; 0x3e
 8001fda:	0018      	movs	r0, r3
 8001fdc:	f001 fafd 	bl	80035da <HAL_GPIO_WritePin>
                          |MuteTPA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STSLED_Pin|ERRLED_Pin, GPIO_PIN_RESET);
 8001fe0:	23c0      	movs	r3, #192	; 0xc0
 8001fe2:	015b      	lsls	r3, r3, #5
 8001fe4:	4839      	ldr	r0, [pc, #228]	; (80020cc <MX_GPIO_Init+0x170>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	0019      	movs	r1, r3
 8001fea:	f001 faf6 	bl	80035da <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MonoMuteLed_Pin StereoMuteLed_Pin */
  GPIO_InitStruct.Pin = MonoMuteLed_Pin|StereoMuteLed_Pin;
 8001fee:	193b      	adds	r3, r7, r4
 8001ff0:	2230      	movs	r2, #48	; 0x30
 8001ff2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff4:	193b      	adds	r3, r7, r4
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	193b      	adds	r3, r7, r4
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002000:	193b      	adds	r3, r7, r4
 8002002:	2200      	movs	r2, #0
 8002004:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002006:	193a      	adds	r2, r7, r4
 8002008:	2390      	movs	r3, #144	; 0x90
 800200a:	05db      	lsls	r3, r3, #23
 800200c:	0011      	movs	r1, r2
 800200e:	0018      	movs	r0, r3
 8002010:	f001 f94e 	bl	80032b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : AudioInput3_Pin AudioInput2_Pin */
  GPIO_InitStruct.Pin = AudioInput3_Pin|AudioInput2_Pin;
 8002014:	193b      	adds	r3, r7, r4
 8002016:	22c0      	movs	r2, #192	; 0xc0
 8002018:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800201a:	193b      	adds	r3, r7, r4
 800201c:	2200      	movs	r2, #0
 800201e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002020:	193b      	adds	r3, r7, r4
 8002022:	2202      	movs	r2, #2
 8002024:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002026:	193a      	adds	r2, r7, r4
 8002028:	2390      	movs	r3, #144	; 0x90
 800202a:	05db      	lsls	r3, r3, #23
 800202c:	0011      	movs	r1, r2
 800202e:	0018      	movs	r0, r3
 8002030:	f001 f93e 	bl	80032b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : AudioInput1_Pin AudioInput0_Pin */
  GPIO_InitStruct.Pin = AudioInput1_Pin|AudioInput0_Pin;
 8002034:	193b      	adds	r3, r7, r4
 8002036:	2230      	movs	r2, #48	; 0x30
 8002038:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800203a:	193b      	adds	r3, r7, r4
 800203c:	2200      	movs	r2, #0
 800203e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002040:	193b      	adds	r3, r7, r4
 8002042:	2202      	movs	r2, #2
 8002044:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002046:	193b      	adds	r3, r7, r4
 8002048:	4a20      	ldr	r2, [pc, #128]	; (80020cc <MX_GPIO_Init+0x170>)
 800204a:	0019      	movs	r1, r3
 800204c:	0010      	movs	r0, r2
 800204e:	f001 f92f 	bl	80032b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : StereoMonoSwitch_Pin */
  GPIO_InitStruct.Pin = StereoMonoSwitch_Pin;
 8002052:	193b      	adds	r3, r7, r4
 8002054:	2201      	movs	r2, #1
 8002056:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002058:	193b      	adds	r3, r7, r4
 800205a:	2200      	movs	r2, #0
 800205c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	193b      	adds	r3, r7, r4
 8002060:	2200      	movs	r2, #0
 8002062:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(StereoMonoSwitch_GPIO_Port, &GPIO_InitStruct);
 8002064:	193b      	adds	r3, r7, r4
 8002066:	4a18      	ldr	r2, [pc, #96]	; (80020c8 <MX_GPIO_Init+0x16c>)
 8002068:	0019      	movs	r1, r3
 800206a:	0010      	movs	r0, r2
 800206c:	f001 f920 	bl	80032b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MonoLed_Pin StereoLed_Pin StereoMonoAnalogSwitch_Pin MuteRelais_Pin
                           MuteTPA_Pin */
  GPIO_InitStruct.Pin = MonoLed_Pin|StereoLed_Pin|StereoMonoAnalogSwitch_Pin|MuteRelais_Pin
 8002070:	193b      	adds	r3, r7, r4
 8002072:	223e      	movs	r2, #62	; 0x3e
 8002074:	601a      	str	r2, [r3, #0]
                          |MuteTPA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002076:	193b      	adds	r3, r7, r4
 8002078:	2201      	movs	r2, #1
 800207a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	193b      	adds	r3, r7, r4
 800207e:	2200      	movs	r2, #0
 8002080:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002082:	193b      	adds	r3, r7, r4
 8002084:	2200      	movs	r2, #0
 8002086:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002088:	193b      	adds	r3, r7, r4
 800208a:	4a0f      	ldr	r2, [pc, #60]	; (80020c8 <MX_GPIO_Init+0x16c>)
 800208c:	0019      	movs	r1, r3
 800208e:	0010      	movs	r0, r2
 8002090:	f001 f90e 	bl	80032b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STSLED_Pin ERRLED_Pin */
  GPIO_InitStruct.Pin = STSLED_Pin|ERRLED_Pin;
 8002094:	0021      	movs	r1, r4
 8002096:	187b      	adds	r3, r7, r1
 8002098:	22c0      	movs	r2, #192	; 0xc0
 800209a:	0152      	lsls	r2, r2, #5
 800209c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800209e:	187b      	adds	r3, r7, r1
 80020a0:	2201      	movs	r2, #1
 80020a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	187b      	adds	r3, r7, r1
 80020a6:	2200      	movs	r2, #0
 80020a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020aa:	187b      	adds	r3, r7, r1
 80020ac:	2200      	movs	r2, #0
 80020ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020b0:	187b      	adds	r3, r7, r1
 80020b2:	4a06      	ldr	r2, [pc, #24]	; (80020cc <MX_GPIO_Init+0x170>)
 80020b4:	0019      	movs	r1, r3
 80020b6:	0010      	movs	r0, r2
 80020b8:	f001 f8fa 	bl	80032b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020bc:	46c0      	nop			; (mov r8, r8)
 80020be:	46bd      	mov	sp, r7
 80020c0:	b009      	add	sp, #36	; 0x24
 80020c2:	bd90      	pop	{r4, r7, pc}
 80020c4:	40021000 	.word	0x40021000
 80020c8:	48000400 	.word	0x48000400
 80020cc:	48000800 	.word	0x48000800

080020d0 <updateTDA>:

/* USER CODE BEGIN 4 */
//TDA

void updateTDA(uint8_t input, uint8_t prevInput, char* text, uint8_t index, uint8_t adres){
 80020d0:	b590      	push	{r4, r7, lr}
 80020d2:	b087      	sub	sp, #28
 80020d4:	af04      	add	r7, sp, #16
 80020d6:	0004      	movs	r4, r0
 80020d8:	0008      	movs	r0, r1
 80020da:	603a      	str	r2, [r7, #0]
 80020dc:	0019      	movs	r1, r3
 80020de:	1dfb      	adds	r3, r7, #7
 80020e0:	1c22      	adds	r2, r4, #0
 80020e2:	701a      	strb	r2, [r3, #0]
 80020e4:	1dbb      	adds	r3, r7, #6
 80020e6:	1c02      	adds	r2, r0, #0
 80020e8:	701a      	strb	r2, [r3, #0]
 80020ea:	1d7b      	adds	r3, r7, #5
 80020ec:	1c0a      	adds	r2, r1, #0
 80020ee:	701a      	strb	r2, [r3, #0]
	//printf("%s\t%d\t%d\tdiff= %d\n", text, input, prevInput, diff(input, prevInput));
	if(input != prevInput && diff(input, prevInput) > 1){
 80020f0:	1dfa      	adds	r2, r7, #7
 80020f2:	1dbb      	adds	r3, r7, #6
 80020f4:	7812      	ldrb	r2, [r2, #0]
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d02e      	beq.n	800215a <updateTDA+0x8a>
 80020fc:	1dbb      	adds	r3, r7, #6
 80020fe:	781a      	ldrb	r2, [r3, #0]
 8002100:	1dfb      	adds	r3, r7, #7
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	0011      	movs	r1, r2
 8002106:	0018      	movs	r0, r3
 8002108:	f000 f914 	bl	8002334 <diff>
 800210c:	0003      	movs	r3, r0
 800210e:	2b01      	cmp	r3, #1
 8002110:	d923      	bls.n	800215a <updateTDA+0x8a>

		//printf
		//printf("%s new = %d  prev = %d\n", text, input, prevInput);

		//TDA
		databuffer = input;
 8002112:	4b14      	ldr	r3, [pc, #80]	; (8002164 <updateTDA+0x94>)
 8002114:	1dfa      	adds	r2, r7, #7
 8002116:	7812      	ldrb	r2, [r2, #0]
 8002118:	701a      	strb	r2, [r3, #0]
		shift = ((databuffer >> 4) & 0b00001111);
 800211a:	4b12      	ldr	r3, [pc, #72]	; (8002164 <updateTDA+0x94>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	091b      	lsrs	r3, r3, #4
 8002120:	b2da      	uxtb	r2, r3
 8002122:	4b11      	ldr	r3, [pc, #68]	; (8002168 <updateTDA+0x98>)
 8002124:	701a      	strb	r2, [r3, #0]
		databuffer = steps[shift] ;
 8002126:	4b10      	ldr	r3, [pc, #64]	; (8002168 <updateTDA+0x98>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	001a      	movs	r2, r3
 800212c:	4b0f      	ldr	r3, [pc, #60]	; (800216c <updateTDA+0x9c>)
 800212e:	5c9a      	ldrb	r2, [r3, r2]
 8002130:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <updateTDA+0x94>)
 8002132:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, TDA7439DS, adres, I2C_MEMADD_SIZE_8BIT,  &databuffer, 1, HAL_MAX_DELAY);
 8002134:	2318      	movs	r3, #24
 8002136:	18fb      	adds	r3, r7, r3
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	b29a      	uxth	r2, r3
 800213c:	480c      	ldr	r0, [pc, #48]	; (8002170 <updateTDA+0xa0>)
 800213e:	2301      	movs	r3, #1
 8002140:	425b      	negs	r3, r3
 8002142:	9302      	str	r3, [sp, #8]
 8002144:	2301      	movs	r3, #1
 8002146:	9301      	str	r3, [sp, #4]
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <updateTDA+0x94>)
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	2301      	movs	r3, #1
 800214e:	2188      	movs	r1, #136	; 0x88
 8002150:	f001 fc1a 	bl	8003988 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8002154:	200a      	movs	r0, #10
 8002156:	f000 fcb3 	bl	8002ac0 <HAL_Delay>
	}



}
 800215a:	46c0      	nop			; (mov r8, r8)
 800215c:	46bd      	mov	sp, r7
 800215e:	b003      	add	sp, #12
 8002160:	bd90      	pop	{r4, r7, pc}
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	200002f8 	.word	0x200002f8
 8002168:	200002f6 	.word	0x200002f6
 800216c:	20000008 	.word	0x20000008
 8002170:	20000104 	.word	0x20000104

08002174 <lcd_write_string>:
	__IO uint16_t read_data = *(__IO uint32_t *)Address;
	return (uint16_t)read_data;
}

//	DISPLAY
void lcd_write_string(char* intput, uint8_t row){
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	000a      	movs	r2, r1
 800217e:	1cfb      	adds	r3, r7, #3
 8002180:	701a      	strb	r2, [r3, #0]
	lcd_send_cmd(row);
 8002182:	1cfb      	adds	r3, r7, #3
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	0018      	movs	r0, r3
 8002188:	f7ff f8ae 	bl	80012e8 <lcd_send_cmd>
	lcd_send_string(intput);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	0018      	movs	r0, r3
 8002190:	f7ff f988 	bl	80014a4 <lcd_send_string>
}
 8002194:	46c0      	nop			; (mov r8, r8)
 8002196:	46bd      	mov	sp, r7
 8002198:	b002      	add	sp, #8
 800219a:	bd80      	pop	{r7, pc}

0800219c <lcd_write_bars>:

void lcd_write_bars(uint8_t input, uint8_t row){
 800219c:	b5b0      	push	{r4, r5, r7, lr}
 800219e:	b088      	sub	sp, #32
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	0002      	movs	r2, r0
 80021a4:	1dfb      	adds	r3, r7, #7
 80021a6:	701a      	strb	r2, [r3, #0]
 80021a8:	1dbb      	adds	r3, r7, #6
 80021aa:	1c0a      	adds	r2, r1, #0
 80021ac:	701a      	strb	r2, [r3, #0]
	uint8_t bars;
	if(input != 0){
 80021ae:	1dfb      	adds	r3, r7, #7
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d011      	beq.n	80021da <lcd_write_bars+0x3e>
		bars = input / 12; // 0 - 255 => 0 - 20 => / 12.75 ~ 12
 80021b6:	251f      	movs	r5, #31
 80021b8:	197c      	adds	r4, r7, r5
 80021ba:	1dfb      	adds	r3, r7, #7
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	210c      	movs	r1, #12
 80021c0:	0018      	movs	r0, r3
 80021c2:	f7fd ffb3 	bl	800012c <__udivsi3>
 80021c6:	0003      	movs	r3, r0
 80021c8:	7023      	strb	r3, [r4, #0]
		if(bars > 20)
 80021ca:	197b      	adds	r3, r7, r5
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b14      	cmp	r3, #20
 80021d0:	d907      	bls.n	80021e2 <lcd_write_bars+0x46>
			bars = 20;
 80021d2:	197b      	adds	r3, r7, r5
 80021d4:	2214      	movs	r2, #20
 80021d6:	701a      	strb	r2, [r3, #0]
 80021d8:	e003      	b.n	80021e2 <lcd_write_bars+0x46>
	}
	else{
		bars = 0;
 80021da:	231f      	movs	r3, #31
 80021dc:	18fb      	adds	r3, r7, r3
 80021de:	2200      	movs	r2, #0
 80021e0:	701a      	strb	r2, [r3, #0]
	}

	uint8_t blanks = 20 - bars;
 80021e2:	231c      	movs	r3, #28
 80021e4:	18fb      	adds	r3, r7, r3
 80021e6:	221f      	movs	r2, #31
 80021e8:	18ba      	adds	r2, r7, r2
 80021ea:	7812      	ldrb	r2, [r2, #0]
 80021ec:	2114      	movs	r1, #20
 80021ee:	1a8a      	subs	r2, r1, r2
 80021f0:	701a      	strb	r2, [r3, #0]
	char barStr[20];

	//assemble string
	strcpy(barStr, "");
 80021f2:	2308      	movs	r3, #8
 80021f4:	18fb      	adds	r3, r7, r3
 80021f6:	2200      	movs	r2, #0
 80021f8:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < bars; i++){
 80021fa:	231e      	movs	r3, #30
 80021fc:	18fb      	adds	r3, r7, r3
 80021fe:	2200      	movs	r2, #0
 8002200:	701a      	strb	r2, [r3, #0]
 8002202:	e015      	b.n	8002230 <lcd_write_bars+0x94>
		strcat(barStr, "Y");
 8002204:	2408      	movs	r4, #8
 8002206:	193b      	adds	r3, r7, r4
 8002208:	0018      	movs	r0, r3
 800220a:	f7fd ff7d 	bl	8000108 <strlen>
 800220e:	0003      	movs	r3, r0
 8002210:	001a      	movs	r2, r3
 8002212:	193b      	adds	r3, r7, r4
 8002214:	189a      	adds	r2, r3, r2
 8002216:	4b23      	ldr	r3, [pc, #140]	; (80022a4 <lcd_write_bars+0x108>)
 8002218:	0010      	movs	r0, r2
 800221a:	0019      	movs	r1, r3
 800221c:	2302      	movs	r3, #2
 800221e:	001a      	movs	r2, r3
 8002220:	f004 f873 	bl	800630a <memcpy>
	for(uint8_t i = 0; i < bars; i++){
 8002224:	211e      	movs	r1, #30
 8002226:	187b      	adds	r3, r7, r1
 8002228:	781a      	ldrb	r2, [r3, #0]
 800222a:	187b      	adds	r3, r7, r1
 800222c:	3201      	adds	r2, #1
 800222e:	701a      	strb	r2, [r3, #0]
 8002230:	231e      	movs	r3, #30
 8002232:	18fa      	adds	r2, r7, r3
 8002234:	231f      	movs	r3, #31
 8002236:	18fb      	adds	r3, r7, r3
 8002238:	7812      	ldrb	r2, [r2, #0]
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	429a      	cmp	r2, r3
 800223e:	d3e1      	bcc.n	8002204 <lcd_write_bars+0x68>
	}
	for(uint8_t i = 0; i < blanks; i++){
 8002240:	231d      	movs	r3, #29
 8002242:	18fb      	adds	r3, r7, r3
 8002244:	2200      	movs	r2, #0
 8002246:	701a      	strb	r2, [r3, #0]
 8002248:	e015      	b.n	8002276 <lcd_write_bars+0xda>
		strcat(barStr, "_");
 800224a:	2408      	movs	r4, #8
 800224c:	193b      	adds	r3, r7, r4
 800224e:	0018      	movs	r0, r3
 8002250:	f7fd ff5a 	bl	8000108 <strlen>
 8002254:	0003      	movs	r3, r0
 8002256:	001a      	movs	r2, r3
 8002258:	193b      	adds	r3, r7, r4
 800225a:	189a      	adds	r2, r3, r2
 800225c:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <lcd_write_bars+0x10c>)
 800225e:	0010      	movs	r0, r2
 8002260:	0019      	movs	r1, r3
 8002262:	2302      	movs	r3, #2
 8002264:	001a      	movs	r2, r3
 8002266:	f004 f850 	bl	800630a <memcpy>
	for(uint8_t i = 0; i < blanks; i++){
 800226a:	211d      	movs	r1, #29
 800226c:	187b      	adds	r3, r7, r1
 800226e:	781a      	ldrb	r2, [r3, #0]
 8002270:	187b      	adds	r3, r7, r1
 8002272:	3201      	adds	r2, #1
 8002274:	701a      	strb	r2, [r3, #0]
 8002276:	231d      	movs	r3, #29
 8002278:	18fa      	adds	r2, r7, r3
 800227a:	231c      	movs	r3, #28
 800227c:	18fb      	adds	r3, r7, r3
 800227e:	7812      	ldrb	r2, [r2, #0]
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	429a      	cmp	r2, r3
 8002284:	d3e1      	bcc.n	800224a <lcd_write_bars+0xae>
	}

	//printf("%d %d\n", bars, blanks);

	lcd_send_cmd(row);
 8002286:	1dbb      	adds	r3, r7, #6
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	0018      	movs	r0, r3
 800228c:	f7ff f82c 	bl	80012e8 <lcd_send_cmd>
	lcd_send_string(barStr);
 8002290:	2308      	movs	r3, #8
 8002292:	18fb      	adds	r3, r7, r3
 8002294:	0018      	movs	r0, r3
 8002296:	f7ff f905 	bl	80014a4 <lcd_send_string>
}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	46bd      	mov	sp, r7
 800229e:	b008      	add	sp, #32
 80022a0:	bdb0      	pop	{r4, r5, r7, pc}
 80022a2:	46c0      	nop			; (mov r8, r8)
 80022a4:	08006fec 	.word	0x08006fec
 80022a8:	08006ff0 	.word	0x08006ff0

080022ac <lcd_write_selection>:

void lcd_write_selection(uint8_t input, uint8_t row){
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	0002      	movs	r2, r0
 80022b4:	1dfb      	adds	r3, r7, #7
 80022b6:	701a      	strb	r2, [r3, #0]
 80022b8:	1dbb      	adds	r3, r7, #6
 80022ba:	1c0a      	adds	r2, r1, #0
 80022bc:	701a      	strb	r2, [r3, #0]
	char* muxStr;
	muxStr = muxTable[input];
 80022be:	1dfb      	adds	r3, r7, #7
 80022c0:	781a      	ldrb	r2, [r3, #0]
 80022c2:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <lcd_write_selection+0x38>)
 80022c4:	0092      	lsls	r2, r2, #2
 80022c6:	58d3      	ldr	r3, [r2, r3]
 80022c8:	60fb      	str	r3, [r7, #12]

	lcd_send_cmd(row);
 80022ca:	1dbb      	adds	r3, r7, #6
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	0018      	movs	r0, r3
 80022d0:	f7ff f80a 	bl	80012e8 <lcd_send_cmd>
	lcd_send_string(muxStr);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	0018      	movs	r0, r3
 80022d8:	f7ff f8e4 	bl	80014a4 <lcd_send_string>
}
 80022dc:	46c0      	nop			; (mov r8, r8)
 80022de:	46bd      	mov	sp, r7
 80022e0:	b004      	add	sp, #16
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	20000018 	.word	0x20000018

080022e8 <HAL_TIM_PeriodElapsedCallback>:

//	TIMER
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a0b      	ldr	r2, [pc, #44]	; (8002324 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d110      	bne.n	800231c <HAL_TIM_PeriodElapsedCallback+0x34>
		lcd_write_string(VersterkerValuesString[0], row1);
 80022fa:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2180      	movs	r1, #128	; 0x80
 8002300:	0018      	movs	r0, r3
 8002302:	f7ff ff37 	bl	8002174 <lcd_write_string>
		lcd_write_bars(input, row2);
 8002306:	4b09      	ldr	r3, [pc, #36]	; (800232c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	b2db      	uxtb	r3, r3
 800230c:	21c0      	movs	r1, #192	; 0xc0
 800230e:	0018      	movs	r0, r3
 8002310:	f7ff ff44 	bl	800219c <lcd_write_bars>
		HAL_TIM_Base_Stop_IT(&htim6);
 8002314:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002316:	0018      	movs	r0, r3
 8002318:	f002 fdd4 	bl	8004ec4 <HAL_TIM_Base_Stop_IT>
	}
}
 800231c:	46c0      	nop			; (mov r8, r8)
 800231e:	46bd      	mov	sp, r7
 8002320:	b002      	add	sp, #8
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40001000 	.word	0x40001000
 8002328:	20000028 	.word	0x20000028
 800232c:	20000004 	.word	0x20000004
 8002330:	200001f4 	.word	0x200001f4

08002334 <diff>:
//	DIFF
uint8_t diff(uint8_t a, uint8_t b){
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	0002      	movs	r2, r0
 800233c:	1dfb      	adds	r3, r7, #7
 800233e:	701a      	strb	r2, [r3, #0]
 8002340:	1dbb      	adds	r3, r7, #6
 8002342:	1c0a      	adds	r2, r1, #0
 8002344:	701a      	strb	r2, [r3, #0]
	uint8_t diff;
	if( a>b )
 8002346:	1dfa      	adds	r2, r7, #7
 8002348:	1dbb      	adds	r3, r7, #6
 800234a:	7812      	ldrb	r2, [r2, #0]
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	429a      	cmp	r2, r3
 8002350:	d908      	bls.n	8002364 <diff+0x30>
		diff=a-b;
 8002352:	230f      	movs	r3, #15
 8002354:	18fb      	adds	r3, r7, r3
 8002356:	1df9      	adds	r1, r7, #7
 8002358:	1dba      	adds	r2, r7, #6
 800235a:	7809      	ldrb	r1, [r1, #0]
 800235c:	7812      	ldrb	r2, [r2, #0]
 800235e:	1a8a      	subs	r2, r1, r2
 8002360:	701a      	strb	r2, [r3, #0]
 8002362:	e007      	b.n	8002374 <diff+0x40>
	else
		diff=b-a;
 8002364:	230f      	movs	r3, #15
 8002366:	18fb      	adds	r3, r7, r3
 8002368:	1db9      	adds	r1, r7, #6
 800236a:	1dfa      	adds	r2, r7, #7
 800236c:	7809      	ldrb	r1, [r1, #0]
 800236e:	7812      	ldrb	r2, [r2, #0]
 8002370:	1a8a      	subs	r2, r1, r2
 8002372:	701a      	strb	r2, [r3, #0]
	return diff;
 8002374:	230f      	movs	r3, #15
 8002376:	18fb      	adds	r3, r7, r3
 8002378:	781b      	ldrb	r3, [r3, #0]
}
 800237a:	0018      	movs	r0, r3
 800237c:	46bd      	mov	sp, r7
 800237e:	b004      	add	sp, #16
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <ADC_DMA_Init>:


//	ADC
void ADC_DMA_Init() {
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
	// Enable clock for ADC and GPIO
	RCC->APB2ENR |= RCC_APB2ENR_ADCEN;
 8002388:	4b37      	ldr	r3, [pc, #220]	; (8002468 <ADC_DMA_Init+0xe4>)
 800238a:	699a      	ldr	r2, [r3, #24]
 800238c:	4b36      	ldr	r3, [pc, #216]	; (8002468 <ADC_DMA_Init+0xe4>)
 800238e:	2180      	movs	r1, #128	; 0x80
 8002390:	0089      	lsls	r1, r1, #2
 8002392:	430a      	orrs	r2, r1
 8002394:	619a      	str	r2, [r3, #24]
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8002396:	4b34      	ldr	r3, [pc, #208]	; (8002468 <ADC_DMA_Init+0xe4>)
 8002398:	695a      	ldr	r2, [r3, #20]
 800239a:	4b33      	ldr	r3, [pc, #204]	; (8002468 <ADC_DMA_Init+0xe4>)
 800239c:	2180      	movs	r1, #128	; 0x80
 800239e:	0289      	lsls	r1, r1, #10
 80023a0:	430a      	orrs	r2, r1
 80023a2:	615a      	str	r2, [r3, #20]

	// Configure ADC pins as analog inputs (IN0 to IN3)
	// tmp GPIOA->MODER |= GPIO_MODER_MODER0 | GPIO_MODER_MODER1 | GPIO_MODER_MODER2 | GPIO_MODER_MODER3;
	GPIOA->MODER |= GPIO_MODER_MODER0 | GPIO_MODER_MODER1 | GPIO_MODER_MODER2 | GPIO_MODER_MODER3 | GPIO_MODER_MODER4  ;
 80023a4:	2390      	movs	r3, #144	; 0x90
 80023a6:	05db      	lsls	r3, r3, #23
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	2390      	movs	r3, #144	; 0x90
 80023ac:	05db      	lsls	r3, r3, #23
 80023ae:	492f      	ldr	r1, [pc, #188]	; (800246c <ADC_DMA_Init+0xe8>)
 80023b0:	430a      	orrs	r2, r1
 80023b2:	601a      	str	r2, [r3, #0]

	// Initialize the ADC
	ADC1->CR |= ADC_CR_ADEN; // Enable the ADC
 80023b4:	4b2e      	ldr	r3, [pc, #184]	; (8002470 <ADC_DMA_Init+0xec>)
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	4b2d      	ldr	r3, [pc, #180]	; (8002470 <ADC_DMA_Init+0xec>)
 80023ba:	2101      	movs	r1, #1
 80023bc:	430a      	orrs	r2, r1
 80023be:	609a      	str	r2, [r3, #8]
	while (!(ADC1->ISR & ADC_ISR_ADRDY)); // Wait for ADC to be ready
 80023c0:	46c0      	nop			; (mov r8, r8)
 80023c2:	4b2b      	ldr	r3, [pc, #172]	; (8002470 <ADC_DMA_Init+0xec>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2201      	movs	r2, #1
 80023c8:	4013      	ands	r3, r2
 80023ca:	d0fa      	beq.n	80023c2 <ADC_DMA_Init+0x3e>

	// Configure ADC settings
	ADC1->CFGR1 |= ADC_CFGR1_CONT; // Continuous conversion mode
 80023cc:	4b28      	ldr	r3, [pc, #160]	; (8002470 <ADC_DMA_Init+0xec>)
 80023ce:	68da      	ldr	r2, [r3, #12]
 80023d0:	4b27      	ldr	r3, [pc, #156]	; (8002470 <ADC_DMA_Init+0xec>)
 80023d2:	2180      	movs	r1, #128	; 0x80
 80023d4:	0189      	lsls	r1, r1, #6
 80023d6:	430a      	orrs	r2, r1
 80023d8:	60da      	str	r2, [r3, #12]
	//ADC1->CFGR1 |= ADC_CFGR1_RES_0; // 12-bit resolution
	ADC1->CFGR1 |= ADC_CFGR1_DMAEN; // Enable DMA mode
 80023da:	4b25      	ldr	r3, [pc, #148]	; (8002470 <ADC_DMA_Init+0xec>)
 80023dc:	68da      	ldr	r2, [r3, #12]
 80023de:	4b24      	ldr	r3, [pc, #144]	; (8002470 <ADC_DMA_Init+0xec>)
 80023e0:	2101      	movs	r1, #1
 80023e2:	430a      	orrs	r2, r1
 80023e4:	60da      	str	r2, [r3, #12]

	// Configure the sequence and channels (IN0 to IN3)
	// tmp ADC1->CHSELR |= ADC_CHSELR_CHSEL0 | ADC_CHSELR_CHSEL1 | ADC_CHSELR_CHSEL2 | ADC_CHSELR_CHSEL3;
	ADC1->CHSELR |= ADC_CHSELR_CHSEL0 | ADC_CHSELR_CHSEL1 | ADC_CHSELR_CHSEL2 | ADC_CHSELR_CHSEL3 | ADC_CHSELR_CHSEL4  ;
 80023e6:	4b22      	ldr	r3, [pc, #136]	; (8002470 <ADC_DMA_Init+0xec>)
 80023e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023ea:	4b21      	ldr	r3, [pc, #132]	; (8002470 <ADC_DMA_Init+0xec>)
 80023ec:	211f      	movs	r1, #31
 80023ee:	430a      	orrs	r2, r1
 80023f0:	629a      	str	r2, [r3, #40]	; 0x28

	// Initialize the DMA
	RCC->AHBENR |= RCC_AHBENR_DMA1EN; // Enable DMA1 clock
 80023f2:	4b1d      	ldr	r3, [pc, #116]	; (8002468 <ADC_DMA_Init+0xe4>)
 80023f4:	695a      	ldr	r2, [r3, #20]
 80023f6:	4b1c      	ldr	r3, [pc, #112]	; (8002468 <ADC_DMA_Init+0xe4>)
 80023f8:	2101      	movs	r1, #1
 80023fa:	430a      	orrs	r2, r1
 80023fc:	615a      	str	r2, [r3, #20]
	DMA1_Channel1->CCR = 0;
 80023fe:	4b1d      	ldr	r3, [pc, #116]	; (8002474 <ADC_DMA_Init+0xf0>)
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
	DMA1_Channel1->CCR |= DMA_CCR_MINC; // Memory increment mode
 8002404:	4b1b      	ldr	r3, [pc, #108]	; (8002474 <ADC_DMA_Init+0xf0>)
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	4b1a      	ldr	r3, [pc, #104]	; (8002474 <ADC_DMA_Init+0xf0>)
 800240a:	2180      	movs	r1, #128	; 0x80
 800240c:	430a      	orrs	r2, r1
 800240e:	601a      	str	r2, [r3, #0]
	DMA1_Channel1->CCR |= DMA_CCR_MSIZE_0; // 16-bit memory size
 8002410:	4b18      	ldr	r3, [pc, #96]	; (8002474 <ADC_DMA_Init+0xf0>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	4b17      	ldr	r3, [pc, #92]	; (8002474 <ADC_DMA_Init+0xf0>)
 8002416:	2180      	movs	r1, #128	; 0x80
 8002418:	00c9      	lsls	r1, r1, #3
 800241a:	430a      	orrs	r2, r1
 800241c:	601a      	str	r2, [r3, #0]
	DMA1_Channel1->CCR |= DMA_CCR_PSIZE_0; // 16-bit peripheral size
 800241e:	4b15      	ldr	r3, [pc, #84]	; (8002474 <ADC_DMA_Init+0xf0>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	4b14      	ldr	r3, [pc, #80]	; (8002474 <ADC_DMA_Init+0xf0>)
 8002424:	2180      	movs	r1, #128	; 0x80
 8002426:	0049      	lsls	r1, r1, #1
 8002428:	430a      	orrs	r2, r1
 800242a:	601a      	str	r2, [r3, #0]
	DMA1_Channel1->CCR |= DMA_CCR_CIRC; // Circular mode
 800242c:	4b11      	ldr	r3, [pc, #68]	; (8002474 <ADC_DMA_Init+0xf0>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	4b10      	ldr	r3, [pc, #64]	; (8002474 <ADC_DMA_Init+0xf0>)
 8002432:	2120      	movs	r1, #32
 8002434:	430a      	orrs	r2, r1
 8002436:	601a      	str	r2, [r3, #0]
	DMA1_Channel1->CNDTR = ADC_DMA_BUFFER_SIZE; // Number of data items to transfer
 8002438:	4b0e      	ldr	r3, [pc, #56]	; (8002474 <ADC_DMA_Init+0xf0>)
 800243a:	2205      	movs	r2, #5
 800243c:	605a      	str	r2, [r3, #4]
	DMA1_Channel1->CPAR = (uint32_t)(&ADC1->DR); // Source: ADC data register
 800243e:	4b0d      	ldr	r3, [pc, #52]	; (8002474 <ADC_DMA_Init+0xf0>)
 8002440:	4a0d      	ldr	r2, [pc, #52]	; (8002478 <ADC_DMA_Init+0xf4>)
 8002442:	609a      	str	r2, [r3, #8]
	DMA1_Channel1->CMAR = (uint32_t)(adcData[0]); // Destination: Memory buffer for channel 0
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <ADC_DMA_Init+0xf0>)
 8002446:	4a0d      	ldr	r2, [pc, #52]	; (800247c <ADC_DMA_Init+0xf8>)
 8002448:	60da      	str	r2, [r3, #12]

	// Enable DMA channel
	// tmp DMA1_Channel1->CCR |= DMA_CCR_EN;
	DMA1_Channel1->CPAR = (uint32_t)(&ADC1->DR); // Source: ADC data register
 800244a:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <ADC_DMA_Init+0xf0>)
 800244c:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <ADC_DMA_Init+0xf4>)
 800244e:	609a      	str	r2, [r3, #8]
	DMA1_Channel1->CMAR = (uint32_t)(adcData[0]); // Destination: Memory buffer for channel 0
 8002450:	4b08      	ldr	r3, [pc, #32]	; (8002474 <ADC_DMA_Init+0xf0>)
 8002452:	4a0a      	ldr	r2, [pc, #40]	; (800247c <ADC_DMA_Init+0xf8>)
 8002454:	60da      	str	r2, [r3, #12]
	DMA1_Channel1->CCR |= DMA_CCR_EN; // Enable DMA channel
 8002456:	4b07      	ldr	r3, [pc, #28]	; (8002474 <ADC_DMA_Init+0xf0>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	4b06      	ldr	r3, [pc, #24]	; (8002474 <ADC_DMA_Init+0xf0>)
 800245c:	2101      	movs	r1, #1
 800245e:	430a      	orrs	r2, r1
 8002460:	601a      	str	r2, [r3, #0]

}
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40021000 	.word	0x40021000
 800246c:	000003ff 	.word	0x000003ff
 8002470:	40012400 	.word	0x40012400
 8002474:	40020008 	.word	0x40020008
 8002478:	40012440 	.word	0x40012440
 800247c:	200002c4 	.word	0x200002c4

08002480 <ADC_Start_Conversion>:

void ADC_Start_Conversion() {
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
	// Start the ADC conversion
	ADC1->CR |= ADC_CR_ADSTART;
 8002484:	4b04      	ldr	r3, [pc, #16]	; (8002498 <ADC_Start_Conversion+0x18>)
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	4b03      	ldr	r3, [pc, #12]	; (8002498 <ADC_Start_Conversion+0x18>)
 800248a:	2104      	movs	r1, #4
 800248c:	430a      	orrs	r2, r1
 800248e:	609a      	str	r2, [r3, #8]
}
 8002490:	46c0      	nop			; (mov r8, r8)
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	40012400 	.word	0x40012400

0800249c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024a0:	b672      	cpsid	i
}
 80024a2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
		HAL_GPIO_TogglePin(ERRLED_GPIO_Port, ERRLED_Pin);
 80024a4:	2380      	movs	r3, #128	; 0x80
 80024a6:	015b      	lsls	r3, r3, #5
 80024a8:	4a05      	ldr	r2, [pc, #20]	; (80024c0 <Error_Handler+0x24>)
 80024aa:	0019      	movs	r1, r3
 80024ac:	0010      	movs	r0, r2
 80024ae:	f001 f8b1 	bl	8003614 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 80024b2:	23fa      	movs	r3, #250	; 0xfa
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	0018      	movs	r0, r3
 80024b8:	f000 fb02 	bl	8002ac0 <HAL_Delay>
		HAL_GPIO_TogglePin(ERRLED_GPIO_Port, ERRLED_Pin);
 80024bc:	e7f2      	b.n	80024a4 <Error_Handler+0x8>
 80024be:	46c0      	nop			; (mov r8, r8)
 80024c0:	48000800 	.word	0x48000800

080024c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ca:	4b0f      	ldr	r3, [pc, #60]	; (8002508 <HAL_MspInit+0x44>)
 80024cc:	699a      	ldr	r2, [r3, #24]
 80024ce:	4b0e      	ldr	r3, [pc, #56]	; (8002508 <HAL_MspInit+0x44>)
 80024d0:	2101      	movs	r1, #1
 80024d2:	430a      	orrs	r2, r1
 80024d4:	619a      	str	r2, [r3, #24]
 80024d6:	4b0c      	ldr	r3, [pc, #48]	; (8002508 <HAL_MspInit+0x44>)
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	2201      	movs	r2, #1
 80024dc:	4013      	ands	r3, r2
 80024de:	607b      	str	r3, [r7, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024e2:	4b09      	ldr	r3, [pc, #36]	; (8002508 <HAL_MspInit+0x44>)
 80024e4:	69da      	ldr	r2, [r3, #28]
 80024e6:	4b08      	ldr	r3, [pc, #32]	; (8002508 <HAL_MspInit+0x44>)
 80024e8:	2180      	movs	r1, #128	; 0x80
 80024ea:	0549      	lsls	r1, r1, #21
 80024ec:	430a      	orrs	r2, r1
 80024ee:	61da      	str	r2, [r3, #28]
 80024f0:	4b05      	ldr	r3, [pc, #20]	; (8002508 <HAL_MspInit+0x44>)
 80024f2:	69da      	ldr	r2, [r3, #28]
 80024f4:	2380      	movs	r3, #128	; 0x80
 80024f6:	055b      	lsls	r3, r3, #21
 80024f8:	4013      	ands	r3, r2
 80024fa:	603b      	str	r3, [r7, #0]
 80024fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	46bd      	mov	sp, r7
 8002502:	b002      	add	sp, #8
 8002504:	bd80      	pop	{r7, pc}
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	40021000 	.word	0x40021000

0800250c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800250c:	b590      	push	{r4, r7, lr}
 800250e:	b08b      	sub	sp, #44	; 0x2c
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002514:	2414      	movs	r4, #20
 8002516:	193b      	adds	r3, r7, r4
 8002518:	0018      	movs	r0, r3
 800251a:	2314      	movs	r3, #20
 800251c:	001a      	movs	r2, r3
 800251e:	2100      	movs	r1, #0
 8002520:	f003 fe70 	bl	8006204 <memset>
  if(hadc->Instance==ADC1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a19      	ldr	r2, [pc, #100]	; (8002590 <HAL_ADC_MspInit+0x84>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d12b      	bne.n	8002586 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800252e:	4b19      	ldr	r3, [pc, #100]	; (8002594 <HAL_ADC_MspInit+0x88>)
 8002530:	699a      	ldr	r2, [r3, #24]
 8002532:	4b18      	ldr	r3, [pc, #96]	; (8002594 <HAL_ADC_MspInit+0x88>)
 8002534:	2180      	movs	r1, #128	; 0x80
 8002536:	0089      	lsls	r1, r1, #2
 8002538:	430a      	orrs	r2, r1
 800253a:	619a      	str	r2, [r3, #24]
 800253c:	4b15      	ldr	r3, [pc, #84]	; (8002594 <HAL_ADC_MspInit+0x88>)
 800253e:	699a      	ldr	r2, [r3, #24]
 8002540:	2380      	movs	r3, #128	; 0x80
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4013      	ands	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
 8002548:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800254a:	4b12      	ldr	r3, [pc, #72]	; (8002594 <HAL_ADC_MspInit+0x88>)
 800254c:	695a      	ldr	r2, [r3, #20]
 800254e:	4b11      	ldr	r3, [pc, #68]	; (8002594 <HAL_ADC_MspInit+0x88>)
 8002550:	2180      	movs	r1, #128	; 0x80
 8002552:	0289      	lsls	r1, r1, #10
 8002554:	430a      	orrs	r2, r1
 8002556:	615a      	str	r2, [r3, #20]
 8002558:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <HAL_ADC_MspInit+0x88>)
 800255a:	695a      	ldr	r2, [r3, #20]
 800255c:	2380      	movs	r3, #128	; 0x80
 800255e:	029b      	lsls	r3, r3, #10
 8002560:	4013      	ands	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002566:	193b      	adds	r3, r7, r4
 8002568:	220f      	movs	r2, #15
 800256a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800256c:	193b      	adds	r3, r7, r4
 800256e:	2203      	movs	r2, #3
 8002570:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002572:	193b      	adds	r3, r7, r4
 8002574:	2200      	movs	r2, #0
 8002576:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002578:	193a      	adds	r2, r7, r4
 800257a:	2390      	movs	r3, #144	; 0x90
 800257c:	05db      	lsls	r3, r3, #23
 800257e:	0011      	movs	r1, r2
 8002580:	0018      	movs	r0, r3
 8002582:	f000 fe95 	bl	80032b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	46bd      	mov	sp, r7
 800258a:	b00b      	add	sp, #44	; 0x2c
 800258c:	bd90      	pop	{r4, r7, pc}
 800258e:	46c0      	nop			; (mov r8, r8)
 8002590:	40012400 	.word	0x40012400
 8002594:	40021000 	.word	0x40021000

08002598 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002598:	b590      	push	{r4, r7, lr}
 800259a:	b08d      	sub	sp, #52	; 0x34
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a0:	241c      	movs	r4, #28
 80025a2:	193b      	adds	r3, r7, r4
 80025a4:	0018      	movs	r0, r3
 80025a6:	2314      	movs	r3, #20
 80025a8:	001a      	movs	r2, r3
 80025aa:	2100      	movs	r1, #0
 80025ac:	f003 fe2a 	bl	8006204 <memset>
  if(hi2c->Instance==I2C1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a38      	ldr	r2, [pc, #224]	; (8002698 <HAL_I2C_MspInit+0x100>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d132      	bne.n	8002620 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ba:	4b38      	ldr	r3, [pc, #224]	; (800269c <HAL_I2C_MspInit+0x104>)
 80025bc:	695a      	ldr	r2, [r3, #20]
 80025be:	4b37      	ldr	r3, [pc, #220]	; (800269c <HAL_I2C_MspInit+0x104>)
 80025c0:	2180      	movs	r1, #128	; 0x80
 80025c2:	02c9      	lsls	r1, r1, #11
 80025c4:	430a      	orrs	r2, r1
 80025c6:	615a      	str	r2, [r3, #20]
 80025c8:	4b34      	ldr	r3, [pc, #208]	; (800269c <HAL_I2C_MspInit+0x104>)
 80025ca:	695a      	ldr	r2, [r3, #20]
 80025cc:	2380      	movs	r3, #128	; 0x80
 80025ce:	02db      	lsls	r3, r3, #11
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
 80025d4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025d6:	0021      	movs	r1, r4
 80025d8:	187b      	adds	r3, r7, r1
 80025da:	22c0      	movs	r2, #192	; 0xc0
 80025dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025de:	187b      	adds	r3, r7, r1
 80025e0:	2212      	movs	r2, #18
 80025e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025e4:	187b      	adds	r3, r7, r1
 80025e6:	2201      	movs	r2, #1
 80025e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025ea:	187b      	adds	r3, r7, r1
 80025ec:	2203      	movs	r2, #3
 80025ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80025f0:	187b      	adds	r3, r7, r1
 80025f2:	2201      	movs	r2, #1
 80025f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f6:	187b      	adds	r3, r7, r1
 80025f8:	4a29      	ldr	r2, [pc, #164]	; (80026a0 <HAL_I2C_MspInit+0x108>)
 80025fa:	0019      	movs	r1, r3
 80025fc:	0010      	movs	r0, r2
 80025fe:	f000 fe57 	bl	80032b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002602:	4b26      	ldr	r3, [pc, #152]	; (800269c <HAL_I2C_MspInit+0x104>)
 8002604:	69da      	ldr	r2, [r3, #28]
 8002606:	4b25      	ldr	r3, [pc, #148]	; (800269c <HAL_I2C_MspInit+0x104>)
 8002608:	2180      	movs	r1, #128	; 0x80
 800260a:	0389      	lsls	r1, r1, #14
 800260c:	430a      	orrs	r2, r1
 800260e:	61da      	str	r2, [r3, #28]
 8002610:	4b22      	ldr	r3, [pc, #136]	; (800269c <HAL_I2C_MspInit+0x104>)
 8002612:	69da      	ldr	r2, [r3, #28]
 8002614:	2380      	movs	r3, #128	; 0x80
 8002616:	039b      	lsls	r3, r3, #14
 8002618:	4013      	ands	r3, r2
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800261e:	e037      	b.n	8002690 <HAL_I2C_MspInit+0xf8>
  else if(hi2c->Instance==I2C2)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a1f      	ldr	r2, [pc, #124]	; (80026a4 <HAL_I2C_MspInit+0x10c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d132      	bne.n	8002690 <HAL_I2C_MspInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800262a:	4b1c      	ldr	r3, [pc, #112]	; (800269c <HAL_I2C_MspInit+0x104>)
 800262c:	695a      	ldr	r2, [r3, #20]
 800262e:	4b1b      	ldr	r3, [pc, #108]	; (800269c <HAL_I2C_MspInit+0x104>)
 8002630:	2180      	movs	r1, #128	; 0x80
 8002632:	02c9      	lsls	r1, r1, #11
 8002634:	430a      	orrs	r2, r1
 8002636:	615a      	str	r2, [r3, #20]
 8002638:	4b18      	ldr	r3, [pc, #96]	; (800269c <HAL_I2C_MspInit+0x104>)
 800263a:	695a      	ldr	r2, [r3, #20]
 800263c:	2380      	movs	r3, #128	; 0x80
 800263e:	02db      	lsls	r3, r3, #11
 8002640:	4013      	ands	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
 8002644:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002646:	211c      	movs	r1, #28
 8002648:	187b      	adds	r3, r7, r1
 800264a:	22c0      	movs	r2, #192	; 0xc0
 800264c:	0112      	lsls	r2, r2, #4
 800264e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002650:	187b      	adds	r3, r7, r1
 8002652:	2212      	movs	r2, #18
 8002654:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002656:	187b      	adds	r3, r7, r1
 8002658:	2200      	movs	r2, #0
 800265a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800265c:	187b      	adds	r3, r7, r1
 800265e:	2203      	movs	r2, #3
 8002660:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 8002662:	187b      	adds	r3, r7, r1
 8002664:	2201      	movs	r2, #1
 8002666:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002668:	187b      	adds	r3, r7, r1
 800266a:	4a0d      	ldr	r2, [pc, #52]	; (80026a0 <HAL_I2C_MspInit+0x108>)
 800266c:	0019      	movs	r1, r3
 800266e:	0010      	movs	r0, r2
 8002670:	f000 fe1e 	bl	80032b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002674:	4b09      	ldr	r3, [pc, #36]	; (800269c <HAL_I2C_MspInit+0x104>)
 8002676:	69da      	ldr	r2, [r3, #28]
 8002678:	4b08      	ldr	r3, [pc, #32]	; (800269c <HAL_I2C_MspInit+0x104>)
 800267a:	2180      	movs	r1, #128	; 0x80
 800267c:	03c9      	lsls	r1, r1, #15
 800267e:	430a      	orrs	r2, r1
 8002680:	61da      	str	r2, [r3, #28]
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_I2C_MspInit+0x104>)
 8002684:	69da      	ldr	r2, [r3, #28]
 8002686:	2380      	movs	r3, #128	; 0x80
 8002688:	03db      	lsls	r3, r3, #15
 800268a:	4013      	ands	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	68fb      	ldr	r3, [r7, #12]
}
 8002690:	46c0      	nop			; (mov r8, r8)
 8002692:	46bd      	mov	sp, r7
 8002694:	b00d      	add	sp, #52	; 0x34
 8002696:	bd90      	pop	{r4, r7, pc}
 8002698:	40005400 	.word	0x40005400
 800269c:	40021000 	.word	0x40021000
 80026a0:	48000400 	.word	0x48000400
 80026a4:	40005800 	.word	0x40005800

080026a8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80026a8:	b590      	push	{r4, r7, lr}
 80026aa:	b08b      	sub	sp, #44	; 0x2c
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b0:	2414      	movs	r4, #20
 80026b2:	193b      	adds	r3, r7, r4
 80026b4:	0018      	movs	r0, r3
 80026b6:	2314      	movs	r3, #20
 80026b8:	001a      	movs	r2, r3
 80026ba:	2100      	movs	r1, #0
 80026bc:	f003 fda2 	bl	8006204 <memset>
  if(htim_encoder->Instance==TIM3)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a1f      	ldr	r2, [pc, #124]	; (8002744 <HAL_TIM_Encoder_MspInit+0x9c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d137      	bne.n	800273a <HAL_TIM_Encoder_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026ca:	4b1f      	ldr	r3, [pc, #124]	; (8002748 <HAL_TIM_Encoder_MspInit+0xa0>)
 80026cc:	69da      	ldr	r2, [r3, #28]
 80026ce:	4b1e      	ldr	r3, [pc, #120]	; (8002748 <HAL_TIM_Encoder_MspInit+0xa0>)
 80026d0:	2102      	movs	r1, #2
 80026d2:	430a      	orrs	r2, r1
 80026d4:	61da      	str	r2, [r3, #28]
 80026d6:	4b1c      	ldr	r3, [pc, #112]	; (8002748 <HAL_TIM_Encoder_MspInit+0xa0>)
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	2202      	movs	r2, #2
 80026dc:	4013      	ands	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
 80026e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026e2:	4b19      	ldr	r3, [pc, #100]	; (8002748 <HAL_TIM_Encoder_MspInit+0xa0>)
 80026e4:	695a      	ldr	r2, [r3, #20]
 80026e6:	4b18      	ldr	r3, [pc, #96]	; (8002748 <HAL_TIM_Encoder_MspInit+0xa0>)
 80026e8:	2180      	movs	r1, #128	; 0x80
 80026ea:	0309      	lsls	r1, r1, #12
 80026ec:	430a      	orrs	r2, r1
 80026ee:	615a      	str	r2, [r3, #20]
 80026f0:	4b15      	ldr	r3, [pc, #84]	; (8002748 <HAL_TIM_Encoder_MspInit+0xa0>)
 80026f2:	695a      	ldr	r2, [r3, #20]
 80026f4:	2380      	movs	r3, #128	; 0x80
 80026f6:	031b      	lsls	r3, r3, #12
 80026f8:	4013      	ands	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026fe:	0021      	movs	r1, r4
 8002700:	187b      	adds	r3, r7, r1
 8002702:	22c0      	movs	r2, #192	; 0xc0
 8002704:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002706:	187b      	adds	r3, r7, r1
 8002708:	2202      	movs	r2, #2
 800270a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270c:	187b      	adds	r3, r7, r1
 800270e:	2200      	movs	r2, #0
 8002710:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002712:	187b      	adds	r3, r7, r1
 8002714:	2200      	movs	r2, #0
 8002716:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
 8002718:	187b      	adds	r3, r7, r1
 800271a:	2200      	movs	r2, #0
 800271c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800271e:	187b      	adds	r3, r7, r1
 8002720:	4a0a      	ldr	r2, [pc, #40]	; (800274c <HAL_TIM_Encoder_MspInit+0xa4>)
 8002722:	0019      	movs	r1, r3
 8002724:	0010      	movs	r0, r2
 8002726:	f000 fdc3 	bl	80032b0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800272a:	2200      	movs	r2, #0
 800272c:	2100      	movs	r1, #0
 800272e:	2010      	movs	r0, #16
 8002730:	f000 fd8c 	bl	800324c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002734:	2010      	movs	r0, #16
 8002736:	f000 fd9e 	bl	8003276 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800273a:	46c0      	nop			; (mov r8, r8)
 800273c:	46bd      	mov	sp, r7
 800273e:	b00b      	add	sp, #44	; 0x2c
 8002740:	bd90      	pop	{r4, r7, pc}
 8002742:	46c0      	nop			; (mov r8, r8)
 8002744:	40000400 	.word	0x40000400
 8002748:	40021000 	.word	0x40021000
 800274c:	48000800 	.word	0x48000800

08002750 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a0d      	ldr	r2, [pc, #52]	; (8002794 <HAL_TIM_Base_MspInit+0x44>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d113      	bne.n	800278a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002762:	4b0d      	ldr	r3, [pc, #52]	; (8002798 <HAL_TIM_Base_MspInit+0x48>)
 8002764:	69da      	ldr	r2, [r3, #28]
 8002766:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <HAL_TIM_Base_MspInit+0x48>)
 8002768:	2110      	movs	r1, #16
 800276a:	430a      	orrs	r2, r1
 800276c:	61da      	str	r2, [r3, #28]
 800276e:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <HAL_TIM_Base_MspInit+0x48>)
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	2210      	movs	r2, #16
 8002774:	4013      	ands	r3, r2
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800277a:	2200      	movs	r2, #0
 800277c:	2100      	movs	r1, #0
 800277e:	2011      	movs	r0, #17
 8002780:	f000 fd64 	bl	800324c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002784:	2011      	movs	r0, #17
 8002786:	f000 fd76 	bl	8003276 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800278a:	46c0      	nop			; (mov r8, r8)
 800278c:	46bd      	mov	sp, r7
 800278e:	b004      	add	sp, #16
 8002790:	bd80      	pop	{r7, pc}
 8002792:	46c0      	nop			; (mov r8, r8)
 8002794:	40001000 	.word	0x40001000
 8002798:	40021000 	.word	0x40021000

0800279c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800279c:	b590      	push	{r4, r7, lr}
 800279e:	b08b      	sub	sp, #44	; 0x2c
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a4:	2414      	movs	r4, #20
 80027a6:	193b      	adds	r3, r7, r4
 80027a8:	0018      	movs	r0, r3
 80027aa:	2314      	movs	r3, #20
 80027ac:	001a      	movs	r2, r3
 80027ae:	2100      	movs	r1, #0
 80027b0:	f003 fd28 	bl	8006204 <memset>
  if(huart->Instance==USART1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a1d      	ldr	r2, [pc, #116]	; (8002830 <HAL_UART_MspInit+0x94>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d133      	bne.n	8002826 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027be:	4b1d      	ldr	r3, [pc, #116]	; (8002834 <HAL_UART_MspInit+0x98>)
 80027c0:	699a      	ldr	r2, [r3, #24]
 80027c2:	4b1c      	ldr	r3, [pc, #112]	; (8002834 <HAL_UART_MspInit+0x98>)
 80027c4:	2180      	movs	r1, #128	; 0x80
 80027c6:	01c9      	lsls	r1, r1, #7
 80027c8:	430a      	orrs	r2, r1
 80027ca:	619a      	str	r2, [r3, #24]
 80027cc:	4b19      	ldr	r3, [pc, #100]	; (8002834 <HAL_UART_MspInit+0x98>)
 80027ce:	699a      	ldr	r2, [r3, #24]
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	01db      	lsls	r3, r3, #7
 80027d4:	4013      	ands	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
 80027d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027da:	4b16      	ldr	r3, [pc, #88]	; (8002834 <HAL_UART_MspInit+0x98>)
 80027dc:	695a      	ldr	r2, [r3, #20]
 80027de:	4b15      	ldr	r3, [pc, #84]	; (8002834 <HAL_UART_MspInit+0x98>)
 80027e0:	2180      	movs	r1, #128	; 0x80
 80027e2:	0289      	lsls	r1, r1, #10
 80027e4:	430a      	orrs	r2, r1
 80027e6:	615a      	str	r2, [r3, #20]
 80027e8:	4b12      	ldr	r3, [pc, #72]	; (8002834 <HAL_UART_MspInit+0x98>)
 80027ea:	695a      	ldr	r2, [r3, #20]
 80027ec:	2380      	movs	r3, #128	; 0x80
 80027ee:	029b      	lsls	r3, r3, #10
 80027f0:	4013      	ands	r3, r2
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80027f6:	193b      	adds	r3, r7, r4
 80027f8:	22c0      	movs	r2, #192	; 0xc0
 80027fa:	00d2      	lsls	r2, r2, #3
 80027fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fe:	0021      	movs	r1, r4
 8002800:	187b      	adds	r3, r7, r1
 8002802:	2202      	movs	r2, #2
 8002804:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002806:	187b      	adds	r3, r7, r1
 8002808:	2200      	movs	r2, #0
 800280a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800280c:	187b      	adds	r3, r7, r1
 800280e:	2203      	movs	r2, #3
 8002810:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002812:	187b      	adds	r3, r7, r1
 8002814:	2201      	movs	r2, #1
 8002816:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002818:	187a      	adds	r2, r7, r1
 800281a:	2390      	movs	r3, #144	; 0x90
 800281c:	05db      	lsls	r3, r3, #23
 800281e:	0011      	movs	r1, r2
 8002820:	0018      	movs	r0, r3
 8002822:	f000 fd45 	bl	80032b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002826:	46c0      	nop			; (mov r8, r8)
 8002828:	46bd      	mov	sp, r7
 800282a:	b00b      	add	sp, #44	; 0x2c
 800282c:	bd90      	pop	{r4, r7, pc}
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	40013800 	.word	0x40013800
 8002834:	40021000 	.word	0x40021000

08002838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800283c:	e7fe      	b.n	800283c <NMI_Handler+0x4>

0800283e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002842:	e7fe      	b.n	8002842 <HardFault_Handler+0x4>

08002844 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002848:	46c0      	nop			; (mov r8, r8)
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800285c:	f000 f914 	bl	8002a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002860:	46c0      	nop			; (mov r8, r8)
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800286c:	4b03      	ldr	r3, [pc, #12]	; (800287c <TIM3_IRQHandler+0x14>)
 800286e:	0018      	movs	r0, r3
 8002870:	f002 fcc2 	bl	80051f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002874:	46c0      	nop			; (mov r8, r8)
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	46c0      	nop			; (mov r8, r8)
 800287c:	200001ac 	.word	0x200001ac

08002880 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002884:	4b03      	ldr	r3, [pc, #12]	; (8002894 <TIM6_DAC_IRQHandler+0x14>)
 8002886:	0018      	movs	r0, r3
 8002888:	f002 fcb6 	bl	80051f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800288c:	46c0      	nop			; (mov r8, r8)
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	46c0      	nop			; (mov r8, r8)
 8002894:	200001f4 	.word	0x200001f4

08002898 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	e00a      	b.n	80028c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80028aa:	e000      	b.n	80028ae <_read+0x16>
 80028ac:	bf00      	nop
 80028ae:	0001      	movs	r1, r0
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	1c5a      	adds	r2, r3, #1
 80028b4:	60ba      	str	r2, [r7, #8]
 80028b6:	b2ca      	uxtb	r2, r1
 80028b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	3301      	adds	r3, #1
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	dbf0      	blt.n	80028aa <_read+0x12>
	}

return len;
 80028c8:	687b      	ldr	r3, [r7, #4]
}
 80028ca:	0018      	movs	r0, r3
 80028cc:	46bd      	mov	sp, r7
 80028ce:	b006      	add	sp, #24
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b082      	sub	sp, #8
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
	return -1;
 80028da:	2301      	movs	r3, #1
 80028dc:	425b      	negs	r3, r3
}
 80028de:	0018      	movs	r0, r3
 80028e0:	46bd      	mov	sp, r7
 80028e2:	b002      	add	sp, #8
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
 80028ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	2280      	movs	r2, #128	; 0x80
 80028f4:	0192      	lsls	r2, r2, #6
 80028f6:	605a      	str	r2, [r3, #4]
	return 0;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	0018      	movs	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	b002      	add	sp, #8
 8002900:	bd80      	pop	{r7, pc}

08002902 <_isatty>:

int _isatty(int file)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b082      	sub	sp, #8
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
	return 1;
 800290a:	2301      	movs	r3, #1
}
 800290c:	0018      	movs	r0, r3
 800290e:	46bd      	mov	sp, r7
 8002910:	b002      	add	sp, #8
 8002912:	bd80      	pop	{r7, pc}

08002914 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
	return 0;
 8002920:	2300      	movs	r3, #0
}
 8002922:	0018      	movs	r0, r3
 8002924:	46bd      	mov	sp, r7
 8002926:	b004      	add	sp, #16
 8002928:	bd80      	pop	{r7, pc}
	...

0800292c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002934:	4a14      	ldr	r2, [pc, #80]	; (8002988 <_sbrk+0x5c>)
 8002936:	4b15      	ldr	r3, [pc, #84]	; (800298c <_sbrk+0x60>)
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002940:	4b13      	ldr	r3, [pc, #76]	; (8002990 <_sbrk+0x64>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d102      	bne.n	800294e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002948:	4b11      	ldr	r3, [pc, #68]	; (8002990 <_sbrk+0x64>)
 800294a:	4a12      	ldr	r2, [pc, #72]	; (8002994 <_sbrk+0x68>)
 800294c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800294e:	4b10      	ldr	r3, [pc, #64]	; (8002990 <_sbrk+0x64>)
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	18d3      	adds	r3, r2, r3
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	429a      	cmp	r2, r3
 800295a:	d207      	bcs.n	800296c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800295c:	f003 fca8 	bl	80062b0 <__errno>
 8002960:	0003      	movs	r3, r0
 8002962:	220c      	movs	r2, #12
 8002964:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002966:	2301      	movs	r3, #1
 8002968:	425b      	negs	r3, r3
 800296a:	e009      	b.n	8002980 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800296c:	4b08      	ldr	r3, [pc, #32]	; (8002990 <_sbrk+0x64>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002972:	4b07      	ldr	r3, [pc, #28]	; (8002990 <_sbrk+0x64>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	18d2      	adds	r2, r2, r3
 800297a:	4b05      	ldr	r3, [pc, #20]	; (8002990 <_sbrk+0x64>)
 800297c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800297e:	68fb      	ldr	r3, [r7, #12]
}
 8002980:	0018      	movs	r0, r3
 8002982:	46bd      	mov	sp, r7
 8002984:	b006      	add	sp, #24
 8002986:	bd80      	pop	{r7, pc}
 8002988:	20004000 	.word	0x20004000
 800298c:	00000400 	.word	0x00000400
 8002990:	200002fc 	.word	0x200002fc
 8002994:	20000450 	.word	0x20000450

08002998 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800299c:	46c0      	nop			; (mov r8, r8)
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
	...

080029a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80029a4:	480d      	ldr	r0, [pc, #52]	; (80029dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80029a6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80029a8:	f7ff fff6 	bl	8002998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029ac:	480c      	ldr	r0, [pc, #48]	; (80029e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80029ae:	490d      	ldr	r1, [pc, #52]	; (80029e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80029b0:	4a0d      	ldr	r2, [pc, #52]	; (80029e8 <LoopForever+0xe>)
  movs r3, #0
 80029b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029b4:	e002      	b.n	80029bc <LoopCopyDataInit>

080029b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029ba:	3304      	adds	r3, #4

080029bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029c0:	d3f9      	bcc.n	80029b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029c2:	4a0a      	ldr	r2, [pc, #40]	; (80029ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80029c4:	4c0a      	ldr	r4, [pc, #40]	; (80029f0 <LoopForever+0x16>)
  movs r3, #0
 80029c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029c8:	e001      	b.n	80029ce <LoopFillZerobss>

080029ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029cc:	3204      	adds	r2, #4

080029ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029d0:	d3fb      	bcc.n	80029ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80029d2:	f003 fc73 	bl	80062bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029d6:	f7fe fe17 	bl	8001608 <main>

080029da <LoopForever>:

LoopForever:
    b LoopForever
 80029da:	e7fe      	b.n	80029da <LoopForever>
  ldr   r0, =_estack
 80029dc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80029e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029e4:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 80029e8:	080070a8 	.word	0x080070a8
  ldr r2, =_sbss
 80029ec:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 80029f0:	20000450 	.word	0x20000450

080029f4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029f4:	e7fe      	b.n	80029f4 <ADC1_COMP_IRQHandler>
	...

080029f8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029fc:	4b07      	ldr	r3, [pc, #28]	; (8002a1c <HAL_Init+0x24>)
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <HAL_Init+0x24>)
 8002a02:	2110      	movs	r1, #16
 8002a04:	430a      	orrs	r2, r1
 8002a06:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002a08:	2003      	movs	r0, #3
 8002a0a:	f000 f809 	bl	8002a20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a0e:	f7ff fd59 	bl	80024c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	0018      	movs	r0, r3
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	40022000 	.word	0x40022000

08002a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a20:	b590      	push	{r4, r7, lr}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a28:	4b14      	ldr	r3, [pc, #80]	; (8002a7c <HAL_InitTick+0x5c>)
 8002a2a:	681c      	ldr	r4, [r3, #0]
 8002a2c:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <HAL_InitTick+0x60>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	0019      	movs	r1, r3
 8002a32:	23fa      	movs	r3, #250	; 0xfa
 8002a34:	0098      	lsls	r0, r3, #2
 8002a36:	f7fd fb79 	bl	800012c <__udivsi3>
 8002a3a:	0003      	movs	r3, r0
 8002a3c:	0019      	movs	r1, r3
 8002a3e:	0020      	movs	r0, r4
 8002a40:	f7fd fb74 	bl	800012c <__udivsi3>
 8002a44:	0003      	movs	r3, r0
 8002a46:	0018      	movs	r0, r3
 8002a48:	f000 fc25 	bl	8003296 <HAL_SYSTICK_Config>
 8002a4c:	1e03      	subs	r3, r0, #0
 8002a4e:	d001      	beq.n	8002a54 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e00f      	b.n	8002a74 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d80b      	bhi.n	8002a72 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	425b      	negs	r3, r3
 8002a60:	2200      	movs	r2, #0
 8002a62:	0018      	movs	r0, r3
 8002a64:	f000 fbf2 	bl	800324c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a68:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <HAL_InitTick+0x64>)
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	e000      	b.n	8002a74 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
}
 8002a74:	0018      	movs	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	b003      	add	sp, #12
 8002a7a:	bd90      	pop	{r4, r7, pc}
 8002a7c:	20000040 	.word	0x20000040
 8002a80:	20000048 	.word	0x20000048
 8002a84:	20000044 	.word	0x20000044

08002a88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a8c:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <HAL_IncTick+0x1c>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	001a      	movs	r2, r3
 8002a92:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <HAL_IncTick+0x20>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	18d2      	adds	r2, r2, r3
 8002a98:	4b03      	ldr	r3, [pc, #12]	; (8002aa8 <HAL_IncTick+0x20>)
 8002a9a:	601a      	str	r2, [r3, #0]
}
 8002a9c:	46c0      	nop			; (mov r8, r8)
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	46c0      	nop			; (mov r8, r8)
 8002aa4:	20000048 	.word	0x20000048
 8002aa8:	20000300 	.word	0x20000300

08002aac <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  return uwTick;
 8002ab0:	4b02      	ldr	r3, [pc, #8]	; (8002abc <HAL_GetTick+0x10>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
}
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	46c0      	nop			; (mov r8, r8)
 8002abc:	20000300 	.word	0x20000300

08002ac0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ac8:	f7ff fff0 	bl	8002aac <HAL_GetTick>
 8002acc:	0003      	movs	r3, r0
 8002ace:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	d005      	beq.n	8002ae6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ada:	4b0a      	ldr	r3, [pc, #40]	; (8002b04 <HAL_Delay+0x44>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	001a      	movs	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	189b      	adds	r3, r3, r2
 8002ae4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	f7ff ffe0 	bl	8002aac <HAL_GetTick>
 8002aec:	0002      	movs	r2, r0
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d8f7      	bhi.n	8002ae8 <HAL_Delay+0x28>
  {
  }
}
 8002af8:	46c0      	nop			; (mov r8, r8)
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	46bd      	mov	sp, r7
 8002afe:	b004      	add	sp, #16
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	20000048 	.word	0x20000048

08002b08 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b10:	230f      	movs	r3, #15
 8002b12:	18fb      	adds	r3, r7, r3
 8002b14:	2200      	movs	r2, #0
 8002b16:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e125      	b.n	8002d72 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10a      	bne.n	8002b44 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2234      	movs	r2, #52	; 0x34
 8002b38:	2100      	movs	r1, #0
 8002b3a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f7ff fce4 	bl	800250c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b48:	2210      	movs	r2, #16
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d000      	beq.n	8002b50 <HAL_ADC_Init+0x48>
 8002b4e:	e103      	b.n	8002d58 <HAL_ADC_Init+0x250>
 8002b50:	230f      	movs	r3, #15
 8002b52:	18fb      	adds	r3, r7, r3
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d000      	beq.n	8002b5c <HAL_ADC_Init+0x54>
 8002b5a:	e0fd      	b.n	8002d58 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2204      	movs	r2, #4
 8002b64:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002b66:	d000      	beq.n	8002b6a <HAL_ADC_Init+0x62>
 8002b68:	e0f6      	b.n	8002d58 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6e:	4a83      	ldr	r2, [pc, #524]	; (8002d7c <HAL_ADC_Init+0x274>)
 8002b70:	4013      	ands	r3, r2
 8002b72:	2202      	movs	r2, #2
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	2203      	movs	r2, #3
 8002b82:	4013      	ands	r3, r2
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d112      	bne.n	8002bae <HAL_ADC_Init+0xa6>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	4013      	ands	r3, r2
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d009      	beq.n	8002baa <HAL_ADC_Init+0xa2>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68da      	ldr	r2, [r3, #12]
 8002b9c:	2380      	movs	r3, #128	; 0x80
 8002b9e:	021b      	lsls	r3, r3, #8
 8002ba0:	401a      	ands	r2, r3
 8002ba2:	2380      	movs	r3, #128	; 0x80
 8002ba4:	021b      	lsls	r3, r3, #8
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d101      	bne.n	8002bae <HAL_ADC_Init+0xa6>
 8002baa:	2301      	movs	r3, #1
 8002bac:	e000      	b.n	8002bb0 <HAL_ADC_Init+0xa8>
 8002bae:	2300      	movs	r3, #0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d116      	bne.n	8002be2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	2218      	movs	r2, #24
 8002bbc:	4393      	bics	r3, r2
 8002bbe:	0019      	movs	r1, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	0899      	lsrs	r1, r3, #2
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68da      	ldr	r2, [r3, #12]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4964      	ldr	r1, [pc, #400]	; (8002d80 <HAL_ADC_Init+0x278>)
 8002bee:	400a      	ands	r2, r1
 8002bf0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	7e1b      	ldrb	r3, [r3, #24]
 8002bf6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	7e5b      	ldrb	r3, [r3, #25]
 8002bfc:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002bfe:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	7e9b      	ldrb	r3, [r3, #26]
 8002c04:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002c06:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d002      	beq.n	8002c16 <HAL_ADC_Init+0x10e>
 8002c10:	2380      	movs	r3, #128	; 0x80
 8002c12:	015b      	lsls	r3, r3, #5
 8002c14:	e000      	b.n	8002c18 <HAL_ADC_Init+0x110>
 8002c16:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002c18:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002c1e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d101      	bne.n	8002c2c <HAL_ADC_Init+0x124>
 8002c28:	2304      	movs	r3, #4
 8002c2a:	e000      	b.n	8002c2e <HAL_ADC_Init+0x126>
 8002c2c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002c2e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2124      	movs	r1, #36	; 0x24
 8002c34:	5c5b      	ldrb	r3, [r3, r1]
 8002c36:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002c38:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	7edb      	ldrb	r3, [r3, #27]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d115      	bne.n	8002c74 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	7e9b      	ldrb	r3, [r3, #26]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d105      	bne.n	8002c5c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	2280      	movs	r2, #128	; 0x80
 8002c54:	0252      	lsls	r2, r2, #9
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60bb      	str	r3, [r7, #8]
 8002c5a:	e00b      	b.n	8002c74 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c60:	2220      	movs	r2, #32
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69da      	ldr	r2, [r3, #28]
 8002c78:	23c2      	movs	r3, #194	; 0xc2
 8002c7a:	33ff      	adds	r3, #255	; 0xff
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d007      	beq.n	8002c90 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68d9      	ldr	r1, [r3, #12]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca4:	2380      	movs	r3, #128	; 0x80
 8002ca6:	055b      	lsls	r3, r3, #21
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d01b      	beq.n	8002ce4 <HAL_ADC_Init+0x1dc>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d017      	beq.n	8002ce4 <HAL_ADC_Init+0x1dc>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d013      	beq.n	8002ce4 <HAL_ADC_Init+0x1dc>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	2b03      	cmp	r3, #3
 8002cc2:	d00f      	beq.n	8002ce4 <HAL_ADC_Init+0x1dc>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d00b      	beq.n	8002ce4 <HAL_ADC_Init+0x1dc>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd0:	2b05      	cmp	r3, #5
 8002cd2:	d007      	beq.n	8002ce4 <HAL_ADC_Init+0x1dc>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd8:	2b06      	cmp	r3, #6
 8002cda:	d003      	beq.n	8002ce4 <HAL_ADC_Init+0x1dc>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce0:	2b07      	cmp	r3, #7
 8002ce2:	d112      	bne.n	8002d0a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	695a      	ldr	r2, [r3, #20]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2107      	movs	r1, #7
 8002cf0:	438a      	bics	r2, r1
 8002cf2:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6959      	ldr	r1, [r3, #20]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfe:	2207      	movs	r2, #7
 8002d00:	401a      	ands	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	4a1c      	ldr	r2, [pc, #112]	; (8002d84 <HAL_ADC_Init+0x27c>)
 8002d12:	4013      	ands	r3, r2
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d10b      	bne.n	8002d32 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d24:	2203      	movs	r2, #3
 8002d26:	4393      	bics	r3, r2
 8002d28:	2201      	movs	r2, #1
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002d30:	e01c      	b.n	8002d6c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d36:	2212      	movs	r2, #18
 8002d38:	4393      	bics	r3, r2
 8002d3a:	2210      	movs	r2, #16
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d46:	2201      	movs	r2, #1
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002d4e:	230f      	movs	r3, #15
 8002d50:	18fb      	adds	r3, r7, r3
 8002d52:	2201      	movs	r2, #1
 8002d54:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002d56:	e009      	b.n	8002d6c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5c:	2210      	movs	r2, #16
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002d64:	230f      	movs	r3, #15
 8002d66:	18fb      	adds	r3, r7, r3
 8002d68:	2201      	movs	r2, #1
 8002d6a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002d6c:	230f      	movs	r3, #15
 8002d6e:	18fb      	adds	r3, r7, r3
 8002d70:	781b      	ldrb	r3, [r3, #0]
}
 8002d72:	0018      	movs	r0, r3
 8002d74:	46bd      	mov	sp, r7
 8002d76:	b004      	add	sp, #16
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	fffffefd 	.word	0xfffffefd
 8002d80:	fffe0219 	.word	0xfffe0219
 8002d84:	833fffe7 	.word	0x833fffe7

08002d88 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d92:	230f      	movs	r3, #15
 8002d94:	18fb      	adds	r3, r7, r3
 8002d96:	2200      	movs	r2, #0
 8002d98:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002da2:	2380      	movs	r3, #128	; 0x80
 8002da4:	055b      	lsls	r3, r3, #21
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d011      	beq.n	8002dce <HAL_ADC_ConfigChannel+0x46>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d00d      	beq.n	8002dce <HAL_ADC_ConfigChannel+0x46>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d009      	beq.n	8002dce <HAL_ADC_ConfigChannel+0x46>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbe:	2b03      	cmp	r3, #3
 8002dc0:	d005      	beq.n	8002dce <HAL_ADC_ConfigChannel+0x46>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d001      	beq.n	8002dce <HAL_ADC_ConfigChannel+0x46>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2234      	movs	r2, #52	; 0x34
 8002dd2:	5c9b      	ldrb	r3, [r3, r2]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x54>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e0d0      	b.n	8002f7e <HAL_ADC_ConfigChannel+0x1f6>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2234      	movs	r2, #52	; 0x34
 8002de0:	2101      	movs	r1, #1
 8002de2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	2204      	movs	r2, #4
 8002dec:	4013      	ands	r3, r2
 8002dee:	d000      	beq.n	8002df2 <HAL_ADC_ConfigChannel+0x6a>
 8002df0:	e0b4      	b.n	8002f5c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	4a64      	ldr	r2, [pc, #400]	; (8002f88 <HAL_ADC_ConfigChannel+0x200>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d100      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0x76>
 8002dfc:	e082      	b.n	8002f04 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	409a      	lsls	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e18:	2380      	movs	r3, #128	; 0x80
 8002e1a:	055b      	lsls	r3, r3, #21
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d037      	beq.n	8002e90 <HAL_ADC_ConfigChannel+0x108>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d033      	beq.n	8002e90 <HAL_ADC_ConfigChannel+0x108>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d02f      	beq.n	8002e90 <HAL_ADC_ConfigChannel+0x108>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e34:	2b03      	cmp	r3, #3
 8002e36:	d02b      	beq.n	8002e90 <HAL_ADC_ConfigChannel+0x108>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3c:	2b04      	cmp	r3, #4
 8002e3e:	d027      	beq.n	8002e90 <HAL_ADC_ConfigChannel+0x108>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e44:	2b05      	cmp	r3, #5
 8002e46:	d023      	beq.n	8002e90 <HAL_ADC_ConfigChannel+0x108>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4c:	2b06      	cmp	r3, #6
 8002e4e:	d01f      	beq.n	8002e90 <HAL_ADC_ConfigChannel+0x108>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e54:	2b07      	cmp	r3, #7
 8002e56:	d01b      	beq.n	8002e90 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	2107      	movs	r1, #7
 8002e64:	400b      	ands	r3, r1
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d012      	beq.n	8002e90 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	695a      	ldr	r2, [r3, #20]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2107      	movs	r1, #7
 8002e76:	438a      	bics	r2, r1
 8002e78:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6959      	ldr	r1, [r3, #20]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	2207      	movs	r2, #7
 8002e86:	401a      	ands	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2b10      	cmp	r3, #16
 8002e96:	d007      	beq.n	8002ea8 <HAL_ADC_ConfigChannel+0x120>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2b11      	cmp	r3, #17
 8002e9e:	d003      	beq.n	8002ea8 <HAL_ADC_ConfigChannel+0x120>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b12      	cmp	r3, #18
 8002ea6:	d163      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002ea8:	4b38      	ldr	r3, [pc, #224]	; (8002f8c <HAL_ADC_ConfigChannel+0x204>)
 8002eaa:	6819      	ldr	r1, [r3, #0]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b10      	cmp	r3, #16
 8002eb2:	d009      	beq.n	8002ec8 <HAL_ADC_ConfigChannel+0x140>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2b11      	cmp	r3, #17
 8002eba:	d102      	bne.n	8002ec2 <HAL_ADC_ConfigChannel+0x13a>
 8002ebc:	2380      	movs	r3, #128	; 0x80
 8002ebe:	03db      	lsls	r3, r3, #15
 8002ec0:	e004      	b.n	8002ecc <HAL_ADC_ConfigChannel+0x144>
 8002ec2:	2380      	movs	r3, #128	; 0x80
 8002ec4:	045b      	lsls	r3, r3, #17
 8002ec6:	e001      	b.n	8002ecc <HAL_ADC_ConfigChannel+0x144>
 8002ec8:	2380      	movs	r3, #128	; 0x80
 8002eca:	041b      	lsls	r3, r3, #16
 8002ecc:	4a2f      	ldr	r2, [pc, #188]	; (8002f8c <HAL_ADC_ConfigChannel+0x204>)
 8002ece:	430b      	orrs	r3, r1
 8002ed0:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2b10      	cmp	r3, #16
 8002ed8:	d14a      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002eda:	4b2d      	ldr	r3, [pc, #180]	; (8002f90 <HAL_ADC_ConfigChannel+0x208>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	492d      	ldr	r1, [pc, #180]	; (8002f94 <HAL_ADC_ConfigChannel+0x20c>)
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	f7fd f923 	bl	800012c <__udivsi3>
 8002ee6:	0003      	movs	r3, r0
 8002ee8:	001a      	movs	r2, r3
 8002eea:	0013      	movs	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	189b      	adds	r3, r3, r2
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ef4:	e002      	b.n	8002efc <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1f9      	bne.n	8002ef6 <HAL_ADC_ConfigChannel+0x16e>
 8002f02:	e035      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2101      	movs	r1, #1
 8002f10:	4099      	lsls	r1, r3
 8002f12:	000b      	movs	r3, r1
 8002f14:	43d9      	mvns	r1, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	400a      	ands	r2, r1
 8002f1c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2b10      	cmp	r3, #16
 8002f24:	d007      	beq.n	8002f36 <HAL_ADC_ConfigChannel+0x1ae>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2b11      	cmp	r3, #17
 8002f2c:	d003      	beq.n	8002f36 <HAL_ADC_ConfigChannel+0x1ae>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2b12      	cmp	r3, #18
 8002f34:	d11c      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002f36:	4b15      	ldr	r3, [pc, #84]	; (8002f8c <HAL_ADC_ConfigChannel+0x204>)
 8002f38:	6819      	ldr	r1, [r3, #0]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2b10      	cmp	r3, #16
 8002f40:	d007      	beq.n	8002f52 <HAL_ADC_ConfigChannel+0x1ca>
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b11      	cmp	r3, #17
 8002f48:	d101      	bne.n	8002f4e <HAL_ADC_ConfigChannel+0x1c6>
 8002f4a:	4b13      	ldr	r3, [pc, #76]	; (8002f98 <HAL_ADC_ConfigChannel+0x210>)
 8002f4c:	e002      	b.n	8002f54 <HAL_ADC_ConfigChannel+0x1cc>
 8002f4e:	4b13      	ldr	r3, [pc, #76]	; (8002f9c <HAL_ADC_ConfigChannel+0x214>)
 8002f50:	e000      	b.n	8002f54 <HAL_ADC_ConfigChannel+0x1cc>
 8002f52:	4b13      	ldr	r3, [pc, #76]	; (8002fa0 <HAL_ADC_ConfigChannel+0x218>)
 8002f54:	4a0d      	ldr	r2, [pc, #52]	; (8002f8c <HAL_ADC_ConfigChannel+0x204>)
 8002f56:	400b      	ands	r3, r1
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	e009      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f60:	2220      	movs	r2, #32
 8002f62:	431a      	orrs	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002f68:	230f      	movs	r3, #15
 8002f6a:	18fb      	adds	r3, r7, r3
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2234      	movs	r2, #52	; 0x34
 8002f74:	2100      	movs	r1, #0
 8002f76:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002f78:	230f      	movs	r3, #15
 8002f7a:	18fb      	adds	r3, r7, r3
 8002f7c:	781b      	ldrb	r3, [r3, #0]
}
 8002f7e:	0018      	movs	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	b004      	add	sp, #16
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	00001001 	.word	0x00001001
 8002f8c:	40012708 	.word	0x40012708
 8002f90:	20000040 	.word	0x20000040
 8002f94:	000f4240 	.word	0x000f4240
 8002f98:	ffbfffff 	.word	0xffbfffff
 8002f9c:	feffffff 	.word	0xfeffffff
 8002fa0:	ff7fffff 	.word	0xff7fffff

08002fa4 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fac:	2317      	movs	r3, #23
 8002fae:	18fb      	adds	r3, r7, r3
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2234      	movs	r2, #52	; 0x34
 8002fc0:	5c9b      	ldrb	r3, [r3, r2]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d101      	bne.n	8002fca <HAL_ADCEx_Calibration_Start+0x26>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	e08d      	b.n	80030e6 <HAL_ADCEx_Calibration_Start+0x142>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2234      	movs	r2, #52	; 0x34
 8002fce:	2101      	movs	r1, #1
 8002fd0:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	2203      	movs	r2, #3
 8002fda:	4013      	ands	r3, r2
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d112      	bne.n	8003006 <HAL_ADCEx_Calibration_Start+0x62>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	4013      	ands	r3, r2
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d009      	beq.n	8003002 <HAL_ADCEx_Calibration_Start+0x5e>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	2380      	movs	r3, #128	; 0x80
 8002ff6:	021b      	lsls	r3, r3, #8
 8002ff8:	401a      	ands	r2, r3
 8002ffa:	2380      	movs	r3, #128	; 0x80
 8002ffc:	021b      	lsls	r3, r3, #8
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d101      	bne.n	8003006 <HAL_ADCEx_Calibration_Start+0x62>
 8003002:	2301      	movs	r3, #1
 8003004:	e000      	b.n	8003008 <HAL_ADCEx_Calibration_Start+0x64>
 8003006:	2300      	movs	r3, #0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d15b      	bne.n	80030c4 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003010:	4a37      	ldr	r2, [pc, #220]	; (80030f0 <HAL_ADCEx_Calibration_Start+0x14c>)
 8003012:	4013      	ands	r3, r2
 8003014:	2202      	movs	r2, #2
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	2203      	movs	r2, #3
 8003024:	4013      	ands	r3, r2
 8003026:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2103      	movs	r1, #3
 8003034:	438a      	bics	r2, r1
 8003036:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2180      	movs	r1, #128	; 0x80
 8003044:	0609      	lsls	r1, r1, #24
 8003046:	430a      	orrs	r2, r1
 8003048:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800304a:	f7ff fd2f 	bl	8002aac <HAL_GetTick>
 800304e:	0003      	movs	r3, r0
 8003050:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003052:	e01d      	b.n	8003090 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003054:	f7ff fd2a 	bl	8002aac <HAL_GetTick>
 8003058:	0002      	movs	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d916      	bls.n	8003090 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	0fdb      	lsrs	r3, r3, #31
 800306a:	07da      	lsls	r2, r3, #31
 800306c:	2380      	movs	r3, #128	; 0x80
 800306e:	061b      	lsls	r3, r3, #24
 8003070:	429a      	cmp	r2, r3
 8003072:	d10d      	bne.n	8003090 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003078:	2212      	movs	r2, #18
 800307a:	4393      	bics	r3, r2
 800307c:	2210      	movs	r2, #16
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2234      	movs	r2, #52	; 0x34
 8003088:	2100      	movs	r1, #0
 800308a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e02a      	b.n	80030e6 <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	0fdb      	lsrs	r3, r3, #31
 8003098:	07da      	lsls	r2, r3, #31
 800309a:	2380      	movs	r3, #128	; 0x80
 800309c:	061b      	lsls	r3, r3, #24
 800309e:	429a      	cmp	r2, r3
 80030a0:	d0d8      	beq.n	8003054 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68d9      	ldr	r1, [r3, #12]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b6:	2203      	movs	r2, #3
 80030b8:	4393      	bics	r3, r2
 80030ba:	2201      	movs	r2, #1
 80030bc:	431a      	orrs	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	639a      	str	r2, [r3, #56]	; 0x38
 80030c2:	e009      	b.n	80030d8 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c8:	2220      	movs	r2, #32
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80030d0:	2317      	movs	r3, #23
 80030d2:	18fb      	adds	r3, r7, r3
 80030d4:	2201      	movs	r2, #1
 80030d6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2234      	movs	r2, #52	; 0x34
 80030dc:	2100      	movs	r1, #0
 80030de:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80030e0:	2317      	movs	r3, #23
 80030e2:	18fb      	adds	r3, r7, r3
 80030e4:	781b      	ldrb	r3, [r3, #0]
}
 80030e6:	0018      	movs	r0, r3
 80030e8:	46bd      	mov	sp, r7
 80030ea:	b006      	add	sp, #24
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	fffffefd 	.word	0xfffffefd

080030f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	0002      	movs	r2, r0
 80030fc:	1dfb      	adds	r3, r7, #7
 80030fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003100:	1dfb      	adds	r3, r7, #7
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b7f      	cmp	r3, #127	; 0x7f
 8003106:	d809      	bhi.n	800311c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003108:	1dfb      	adds	r3, r7, #7
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	001a      	movs	r2, r3
 800310e:	231f      	movs	r3, #31
 8003110:	401a      	ands	r2, r3
 8003112:	4b04      	ldr	r3, [pc, #16]	; (8003124 <__NVIC_EnableIRQ+0x30>)
 8003114:	2101      	movs	r1, #1
 8003116:	4091      	lsls	r1, r2
 8003118:	000a      	movs	r2, r1
 800311a:	601a      	str	r2, [r3, #0]
  }
}
 800311c:	46c0      	nop			; (mov r8, r8)
 800311e:	46bd      	mov	sp, r7
 8003120:	b002      	add	sp, #8
 8003122:	bd80      	pop	{r7, pc}
 8003124:	e000e100 	.word	0xe000e100

08003128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003128:	b590      	push	{r4, r7, lr}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	0002      	movs	r2, r0
 8003130:	6039      	str	r1, [r7, #0]
 8003132:	1dfb      	adds	r3, r7, #7
 8003134:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003136:	1dfb      	adds	r3, r7, #7
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	2b7f      	cmp	r3, #127	; 0x7f
 800313c:	d828      	bhi.n	8003190 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800313e:	4a2f      	ldr	r2, [pc, #188]	; (80031fc <__NVIC_SetPriority+0xd4>)
 8003140:	1dfb      	adds	r3, r7, #7
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	b25b      	sxtb	r3, r3
 8003146:	089b      	lsrs	r3, r3, #2
 8003148:	33c0      	adds	r3, #192	; 0xc0
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	589b      	ldr	r3, [r3, r2]
 800314e:	1dfa      	adds	r2, r7, #7
 8003150:	7812      	ldrb	r2, [r2, #0]
 8003152:	0011      	movs	r1, r2
 8003154:	2203      	movs	r2, #3
 8003156:	400a      	ands	r2, r1
 8003158:	00d2      	lsls	r2, r2, #3
 800315a:	21ff      	movs	r1, #255	; 0xff
 800315c:	4091      	lsls	r1, r2
 800315e:	000a      	movs	r2, r1
 8003160:	43d2      	mvns	r2, r2
 8003162:	401a      	ands	r2, r3
 8003164:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	019b      	lsls	r3, r3, #6
 800316a:	22ff      	movs	r2, #255	; 0xff
 800316c:	401a      	ands	r2, r3
 800316e:	1dfb      	adds	r3, r7, #7
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	0018      	movs	r0, r3
 8003174:	2303      	movs	r3, #3
 8003176:	4003      	ands	r3, r0
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800317c:	481f      	ldr	r0, [pc, #124]	; (80031fc <__NVIC_SetPriority+0xd4>)
 800317e:	1dfb      	adds	r3, r7, #7
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	b25b      	sxtb	r3, r3
 8003184:	089b      	lsrs	r3, r3, #2
 8003186:	430a      	orrs	r2, r1
 8003188:	33c0      	adds	r3, #192	; 0xc0
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800318e:	e031      	b.n	80031f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003190:	4a1b      	ldr	r2, [pc, #108]	; (8003200 <__NVIC_SetPriority+0xd8>)
 8003192:	1dfb      	adds	r3, r7, #7
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	0019      	movs	r1, r3
 8003198:	230f      	movs	r3, #15
 800319a:	400b      	ands	r3, r1
 800319c:	3b08      	subs	r3, #8
 800319e:	089b      	lsrs	r3, r3, #2
 80031a0:	3306      	adds	r3, #6
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	18d3      	adds	r3, r2, r3
 80031a6:	3304      	adds	r3, #4
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	1dfa      	adds	r2, r7, #7
 80031ac:	7812      	ldrb	r2, [r2, #0]
 80031ae:	0011      	movs	r1, r2
 80031b0:	2203      	movs	r2, #3
 80031b2:	400a      	ands	r2, r1
 80031b4:	00d2      	lsls	r2, r2, #3
 80031b6:	21ff      	movs	r1, #255	; 0xff
 80031b8:	4091      	lsls	r1, r2
 80031ba:	000a      	movs	r2, r1
 80031bc:	43d2      	mvns	r2, r2
 80031be:	401a      	ands	r2, r3
 80031c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	019b      	lsls	r3, r3, #6
 80031c6:	22ff      	movs	r2, #255	; 0xff
 80031c8:	401a      	ands	r2, r3
 80031ca:	1dfb      	adds	r3, r7, #7
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	0018      	movs	r0, r3
 80031d0:	2303      	movs	r3, #3
 80031d2:	4003      	ands	r3, r0
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031d8:	4809      	ldr	r0, [pc, #36]	; (8003200 <__NVIC_SetPriority+0xd8>)
 80031da:	1dfb      	adds	r3, r7, #7
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	001c      	movs	r4, r3
 80031e0:	230f      	movs	r3, #15
 80031e2:	4023      	ands	r3, r4
 80031e4:	3b08      	subs	r3, #8
 80031e6:	089b      	lsrs	r3, r3, #2
 80031e8:	430a      	orrs	r2, r1
 80031ea:	3306      	adds	r3, #6
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	18c3      	adds	r3, r0, r3
 80031f0:	3304      	adds	r3, #4
 80031f2:	601a      	str	r2, [r3, #0]
}
 80031f4:	46c0      	nop			; (mov r8, r8)
 80031f6:	46bd      	mov	sp, r7
 80031f8:	b003      	add	sp, #12
 80031fa:	bd90      	pop	{r4, r7, pc}
 80031fc:	e000e100 	.word	0xe000e100
 8003200:	e000ed00 	.word	0xe000ed00

08003204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	1e5a      	subs	r2, r3, #1
 8003210:	2380      	movs	r3, #128	; 0x80
 8003212:	045b      	lsls	r3, r3, #17
 8003214:	429a      	cmp	r2, r3
 8003216:	d301      	bcc.n	800321c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003218:	2301      	movs	r3, #1
 800321a:	e010      	b.n	800323e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800321c:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <SysTick_Config+0x44>)
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	3a01      	subs	r2, #1
 8003222:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003224:	2301      	movs	r3, #1
 8003226:	425b      	negs	r3, r3
 8003228:	2103      	movs	r1, #3
 800322a:	0018      	movs	r0, r3
 800322c:	f7ff ff7c 	bl	8003128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003230:	4b05      	ldr	r3, [pc, #20]	; (8003248 <SysTick_Config+0x44>)
 8003232:	2200      	movs	r2, #0
 8003234:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003236:	4b04      	ldr	r3, [pc, #16]	; (8003248 <SysTick_Config+0x44>)
 8003238:	2207      	movs	r2, #7
 800323a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800323c:	2300      	movs	r3, #0
}
 800323e:	0018      	movs	r0, r3
 8003240:	46bd      	mov	sp, r7
 8003242:	b002      	add	sp, #8
 8003244:	bd80      	pop	{r7, pc}
 8003246:	46c0      	nop			; (mov r8, r8)
 8003248:	e000e010 	.word	0xe000e010

0800324c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	60b9      	str	r1, [r7, #8]
 8003254:	607a      	str	r2, [r7, #4]
 8003256:	210f      	movs	r1, #15
 8003258:	187b      	adds	r3, r7, r1
 800325a:	1c02      	adds	r2, r0, #0
 800325c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	187b      	adds	r3, r7, r1
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	b25b      	sxtb	r3, r3
 8003266:	0011      	movs	r1, r2
 8003268:	0018      	movs	r0, r3
 800326a:	f7ff ff5d 	bl	8003128 <__NVIC_SetPriority>
}
 800326e:	46c0      	nop			; (mov r8, r8)
 8003270:	46bd      	mov	sp, r7
 8003272:	b004      	add	sp, #16
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b082      	sub	sp, #8
 800327a:	af00      	add	r7, sp, #0
 800327c:	0002      	movs	r2, r0
 800327e:	1dfb      	adds	r3, r7, #7
 8003280:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003282:	1dfb      	adds	r3, r7, #7
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	b25b      	sxtb	r3, r3
 8003288:	0018      	movs	r0, r3
 800328a:	f7ff ff33 	bl	80030f4 <__NVIC_EnableIRQ>
}
 800328e:	46c0      	nop			; (mov r8, r8)
 8003290:	46bd      	mov	sp, r7
 8003292:	b002      	add	sp, #8
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b082      	sub	sp, #8
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	0018      	movs	r0, r3
 80032a2:	f7ff ffaf 	bl	8003204 <SysTick_Config>
 80032a6:	0003      	movs	r3, r0
}
 80032a8:	0018      	movs	r0, r3
 80032aa:	46bd      	mov	sp, r7
 80032ac:	b002      	add	sp, #8
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032ba:	2300      	movs	r3, #0
 80032bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032be:	e155      	b.n	800356c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2101      	movs	r1, #1
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	4091      	lsls	r1, r2
 80032ca:	000a      	movs	r2, r1
 80032cc:	4013      	ands	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d100      	bne.n	80032d8 <HAL_GPIO_Init+0x28>
 80032d6:	e146      	b.n	8003566 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2203      	movs	r2, #3
 80032de:	4013      	ands	r3, r2
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d005      	beq.n	80032f0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2203      	movs	r2, #3
 80032ea:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d130      	bne.n	8003352 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	2203      	movs	r2, #3
 80032fc:	409a      	lsls	r2, r3
 80032fe:	0013      	movs	r3, r2
 8003300:	43da      	mvns	r2, r3
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	4013      	ands	r3, r2
 8003306:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	409a      	lsls	r2, r3
 8003312:	0013      	movs	r3, r2
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	4313      	orrs	r3, r2
 8003318:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003326:	2201      	movs	r2, #1
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	409a      	lsls	r2, r3
 800332c:	0013      	movs	r3, r2
 800332e:	43da      	mvns	r2, r3
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	4013      	ands	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	091b      	lsrs	r3, r3, #4
 800333c:	2201      	movs	r2, #1
 800333e:	401a      	ands	r2, r3
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	409a      	lsls	r2, r3
 8003344:	0013      	movs	r3, r2
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	4313      	orrs	r3, r2
 800334a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2203      	movs	r2, #3
 8003358:	4013      	ands	r3, r2
 800335a:	2b03      	cmp	r3, #3
 800335c:	d017      	beq.n	800338e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	2203      	movs	r2, #3
 800336a:	409a      	lsls	r2, r3
 800336c:	0013      	movs	r3, r2
 800336e:	43da      	mvns	r2, r3
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	4013      	ands	r3, r2
 8003374:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	409a      	lsls	r2, r3
 8003380:	0013      	movs	r3, r2
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	4313      	orrs	r3, r2
 8003386:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2203      	movs	r2, #3
 8003394:	4013      	ands	r3, r2
 8003396:	2b02      	cmp	r3, #2
 8003398:	d123      	bne.n	80033e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	08da      	lsrs	r2, r3, #3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	3208      	adds	r2, #8
 80033a2:	0092      	lsls	r2, r2, #2
 80033a4:	58d3      	ldr	r3, [r2, r3]
 80033a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	2207      	movs	r2, #7
 80033ac:	4013      	ands	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	220f      	movs	r2, #15
 80033b2:	409a      	lsls	r2, r3
 80033b4:	0013      	movs	r3, r2
 80033b6:	43da      	mvns	r2, r3
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	4013      	ands	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	691a      	ldr	r2, [r3, #16]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	2107      	movs	r1, #7
 80033c6:	400b      	ands	r3, r1
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	409a      	lsls	r2, r3
 80033cc:	0013      	movs	r3, r2
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	08da      	lsrs	r2, r3, #3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3208      	adds	r2, #8
 80033dc:	0092      	lsls	r2, r2, #2
 80033de:	6939      	ldr	r1, [r7, #16]
 80033e0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	2203      	movs	r2, #3
 80033ee:	409a      	lsls	r2, r3
 80033f0:	0013      	movs	r3, r2
 80033f2:	43da      	mvns	r2, r3
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	4013      	ands	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2203      	movs	r2, #3
 8003400:	401a      	ands	r2, r3
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	409a      	lsls	r2, r3
 8003408:	0013      	movs	r3, r2
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	4313      	orrs	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	23c0      	movs	r3, #192	; 0xc0
 800341c:	029b      	lsls	r3, r3, #10
 800341e:	4013      	ands	r3, r2
 8003420:	d100      	bne.n	8003424 <HAL_GPIO_Init+0x174>
 8003422:	e0a0      	b.n	8003566 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003424:	4b57      	ldr	r3, [pc, #348]	; (8003584 <HAL_GPIO_Init+0x2d4>)
 8003426:	699a      	ldr	r2, [r3, #24]
 8003428:	4b56      	ldr	r3, [pc, #344]	; (8003584 <HAL_GPIO_Init+0x2d4>)
 800342a:	2101      	movs	r1, #1
 800342c:	430a      	orrs	r2, r1
 800342e:	619a      	str	r2, [r3, #24]
 8003430:	4b54      	ldr	r3, [pc, #336]	; (8003584 <HAL_GPIO_Init+0x2d4>)
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	2201      	movs	r2, #1
 8003436:	4013      	ands	r3, r2
 8003438:	60bb      	str	r3, [r7, #8]
 800343a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800343c:	4a52      	ldr	r2, [pc, #328]	; (8003588 <HAL_GPIO_Init+0x2d8>)
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	089b      	lsrs	r3, r3, #2
 8003442:	3302      	adds	r3, #2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	589b      	ldr	r3, [r3, r2]
 8003448:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2203      	movs	r2, #3
 800344e:	4013      	ands	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	220f      	movs	r2, #15
 8003454:	409a      	lsls	r2, r3
 8003456:	0013      	movs	r3, r2
 8003458:	43da      	mvns	r2, r3
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	4013      	ands	r3, r2
 800345e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	2390      	movs	r3, #144	; 0x90
 8003464:	05db      	lsls	r3, r3, #23
 8003466:	429a      	cmp	r2, r3
 8003468:	d019      	beq.n	800349e <HAL_GPIO_Init+0x1ee>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a47      	ldr	r2, [pc, #284]	; (800358c <HAL_GPIO_Init+0x2dc>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d013      	beq.n	800349a <HAL_GPIO_Init+0x1ea>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a46      	ldr	r2, [pc, #280]	; (8003590 <HAL_GPIO_Init+0x2e0>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d00d      	beq.n	8003496 <HAL_GPIO_Init+0x1e6>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a45      	ldr	r2, [pc, #276]	; (8003594 <HAL_GPIO_Init+0x2e4>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d007      	beq.n	8003492 <HAL_GPIO_Init+0x1e2>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a44      	ldr	r2, [pc, #272]	; (8003598 <HAL_GPIO_Init+0x2e8>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d101      	bne.n	800348e <HAL_GPIO_Init+0x1de>
 800348a:	2304      	movs	r3, #4
 800348c:	e008      	b.n	80034a0 <HAL_GPIO_Init+0x1f0>
 800348e:	2305      	movs	r3, #5
 8003490:	e006      	b.n	80034a0 <HAL_GPIO_Init+0x1f0>
 8003492:	2303      	movs	r3, #3
 8003494:	e004      	b.n	80034a0 <HAL_GPIO_Init+0x1f0>
 8003496:	2302      	movs	r3, #2
 8003498:	e002      	b.n	80034a0 <HAL_GPIO_Init+0x1f0>
 800349a:	2301      	movs	r3, #1
 800349c:	e000      	b.n	80034a0 <HAL_GPIO_Init+0x1f0>
 800349e:	2300      	movs	r3, #0
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	2103      	movs	r1, #3
 80034a4:	400a      	ands	r2, r1
 80034a6:	0092      	lsls	r2, r2, #2
 80034a8:	4093      	lsls	r3, r2
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034b0:	4935      	ldr	r1, [pc, #212]	; (8003588 <HAL_GPIO_Init+0x2d8>)
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	089b      	lsrs	r3, r3, #2
 80034b6:	3302      	adds	r3, #2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034be:	4b37      	ldr	r3, [pc, #220]	; (800359c <HAL_GPIO_Init+0x2ec>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	43da      	mvns	r2, r3
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	4013      	ands	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	2380      	movs	r3, #128	; 0x80
 80034d4:	035b      	lsls	r3, r3, #13
 80034d6:	4013      	ands	r3, r2
 80034d8:	d003      	beq.n	80034e2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4313      	orrs	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80034e2:	4b2e      	ldr	r3, [pc, #184]	; (800359c <HAL_GPIO_Init+0x2ec>)
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80034e8:	4b2c      	ldr	r3, [pc, #176]	; (800359c <HAL_GPIO_Init+0x2ec>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	43da      	mvns	r2, r3
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	4013      	ands	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	2380      	movs	r3, #128	; 0x80
 80034fe:	039b      	lsls	r3, r3, #14
 8003500:	4013      	ands	r3, r2
 8003502:	d003      	beq.n	800350c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4313      	orrs	r3, r2
 800350a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800350c:	4b23      	ldr	r3, [pc, #140]	; (800359c <HAL_GPIO_Init+0x2ec>)
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003512:	4b22      	ldr	r3, [pc, #136]	; (800359c <HAL_GPIO_Init+0x2ec>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	43da      	mvns	r2, r3
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	4013      	ands	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	2380      	movs	r3, #128	; 0x80
 8003528:	029b      	lsls	r3, r3, #10
 800352a:	4013      	ands	r3, r2
 800352c:	d003      	beq.n	8003536 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4313      	orrs	r3, r2
 8003534:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003536:	4b19      	ldr	r3, [pc, #100]	; (800359c <HAL_GPIO_Init+0x2ec>)
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800353c:	4b17      	ldr	r3, [pc, #92]	; (800359c <HAL_GPIO_Init+0x2ec>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	43da      	mvns	r2, r3
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	4013      	ands	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	2380      	movs	r3, #128	; 0x80
 8003552:	025b      	lsls	r3, r3, #9
 8003554:	4013      	ands	r3, r2
 8003556:	d003      	beq.n	8003560 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	4313      	orrs	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003560:	4b0e      	ldr	r3, [pc, #56]	; (800359c <HAL_GPIO_Init+0x2ec>)
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	3301      	adds	r3, #1
 800356a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	40da      	lsrs	r2, r3
 8003574:	1e13      	subs	r3, r2, #0
 8003576:	d000      	beq.n	800357a <HAL_GPIO_Init+0x2ca>
 8003578:	e6a2      	b.n	80032c0 <HAL_GPIO_Init+0x10>
  } 
}
 800357a:	46c0      	nop			; (mov r8, r8)
 800357c:	46c0      	nop			; (mov r8, r8)
 800357e:	46bd      	mov	sp, r7
 8003580:	b006      	add	sp, #24
 8003582:	bd80      	pop	{r7, pc}
 8003584:	40021000 	.word	0x40021000
 8003588:	40010000 	.word	0x40010000
 800358c:	48000400 	.word	0x48000400
 8003590:	48000800 	.word	0x48000800
 8003594:	48000c00 	.word	0x48000c00
 8003598:	48001000 	.word	0x48001000
 800359c:	40010400 	.word	0x40010400

080035a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	000a      	movs	r2, r1
 80035aa:	1cbb      	adds	r3, r7, #2
 80035ac:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	1cba      	adds	r2, r7, #2
 80035b4:	8812      	ldrh	r2, [r2, #0]
 80035b6:	4013      	ands	r3, r2
 80035b8:	d004      	beq.n	80035c4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80035ba:	230f      	movs	r3, #15
 80035bc:	18fb      	adds	r3, r7, r3
 80035be:	2201      	movs	r2, #1
 80035c0:	701a      	strb	r2, [r3, #0]
 80035c2:	e003      	b.n	80035cc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035c4:	230f      	movs	r3, #15
 80035c6:	18fb      	adds	r3, r7, r3
 80035c8:	2200      	movs	r2, #0
 80035ca:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80035cc:	230f      	movs	r3, #15
 80035ce:	18fb      	adds	r3, r7, r3
 80035d0:	781b      	ldrb	r3, [r3, #0]
  }
 80035d2:	0018      	movs	r0, r3
 80035d4:	46bd      	mov	sp, r7
 80035d6:	b004      	add	sp, #16
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b082      	sub	sp, #8
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
 80035e2:	0008      	movs	r0, r1
 80035e4:	0011      	movs	r1, r2
 80035e6:	1cbb      	adds	r3, r7, #2
 80035e8:	1c02      	adds	r2, r0, #0
 80035ea:	801a      	strh	r2, [r3, #0]
 80035ec:	1c7b      	adds	r3, r7, #1
 80035ee:	1c0a      	adds	r2, r1, #0
 80035f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035f2:	1c7b      	adds	r3, r7, #1
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d004      	beq.n	8003604 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035fa:	1cbb      	adds	r3, r7, #2
 80035fc:	881a      	ldrh	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003602:	e003      	b.n	800360c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003604:	1cbb      	adds	r3, r7, #2
 8003606:	881a      	ldrh	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800360c:	46c0      	nop			; (mov r8, r8)
 800360e:	46bd      	mov	sp, r7
 8003610:	b002      	add	sp, #8
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	000a      	movs	r2, r1
 800361e:	1cbb      	adds	r3, r7, #2
 8003620:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003628:	1cbb      	adds	r3, r7, #2
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	4013      	ands	r3, r2
 8003630:	041a      	lsls	r2, r3, #16
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	43db      	mvns	r3, r3
 8003636:	1cb9      	adds	r1, r7, #2
 8003638:	8809      	ldrh	r1, [r1, #0]
 800363a:	400b      	ands	r3, r1
 800363c:	431a      	orrs	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	619a      	str	r2, [r3, #24]
}
 8003642:	46c0      	nop			; (mov r8, r8)
 8003644:	46bd      	mov	sp, r7
 8003646:	b004      	add	sp, #16
 8003648:	bd80      	pop	{r7, pc}
	...

0800364c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e082      	b.n	8003764 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2241      	movs	r2, #65	; 0x41
 8003662:	5c9b      	ldrb	r3, [r3, r2]
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d107      	bne.n	800367a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2240      	movs	r2, #64	; 0x40
 800366e:	2100      	movs	r1, #0
 8003670:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	0018      	movs	r0, r3
 8003676:	f7fe ff8f 	bl	8002598 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2241      	movs	r2, #65	; 0x41
 800367e:	2124      	movs	r1, #36	; 0x24
 8003680:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2101      	movs	r1, #1
 800368e:	438a      	bics	r2, r1
 8003690:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4934      	ldr	r1, [pc, #208]	; (800376c <HAL_I2C_Init+0x120>)
 800369c:	400a      	ands	r2, r1
 800369e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4931      	ldr	r1, [pc, #196]	; (8003770 <HAL_I2C_Init+0x124>)
 80036ac:	400a      	ands	r2, r1
 80036ae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d108      	bne.n	80036ca <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2180      	movs	r1, #128	; 0x80
 80036c2:	0209      	lsls	r1, r1, #8
 80036c4:	430a      	orrs	r2, r1
 80036c6:	609a      	str	r2, [r3, #8]
 80036c8:	e007      	b.n	80036da <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2184      	movs	r1, #132	; 0x84
 80036d4:	0209      	lsls	r1, r1, #8
 80036d6:	430a      	orrs	r2, r1
 80036d8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d104      	bne.n	80036ec <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2280      	movs	r2, #128	; 0x80
 80036e8:	0112      	lsls	r2, r2, #4
 80036ea:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	491f      	ldr	r1, [pc, #124]	; (8003774 <HAL_I2C_Init+0x128>)
 80036f8:	430a      	orrs	r2, r1
 80036fa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68da      	ldr	r2, [r3, #12]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	491a      	ldr	r1, [pc, #104]	; (8003770 <HAL_I2C_Init+0x124>)
 8003708:	400a      	ands	r2, r1
 800370a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	691a      	ldr	r2, [r3, #16]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	431a      	orrs	r2, r3
 8003716:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69d9      	ldr	r1, [r3, #28]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1a      	ldr	r2, [r3, #32]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	430a      	orrs	r2, r1
 8003734:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2101      	movs	r1, #1
 8003742:	430a      	orrs	r2, r1
 8003744:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2241      	movs	r2, #65	; 0x41
 8003750:	2120      	movs	r1, #32
 8003752:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2242      	movs	r2, #66	; 0x42
 800375e:	2100      	movs	r1, #0
 8003760:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	0018      	movs	r0, r3
 8003766:	46bd      	mov	sp, r7
 8003768:	b002      	add	sp, #8
 800376a:	bd80      	pop	{r7, pc}
 800376c:	f0ffffff 	.word	0xf0ffffff
 8003770:	ffff7fff 	.word	0xffff7fff
 8003774:	02008000 	.word	0x02008000

08003778 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003778:	b590      	push	{r4, r7, lr}
 800377a:	b089      	sub	sp, #36	; 0x24
 800377c:	af02      	add	r7, sp, #8
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	0008      	movs	r0, r1
 8003782:	607a      	str	r2, [r7, #4]
 8003784:	0019      	movs	r1, r3
 8003786:	230a      	movs	r3, #10
 8003788:	18fb      	adds	r3, r7, r3
 800378a:	1c02      	adds	r2, r0, #0
 800378c:	801a      	strh	r2, [r3, #0]
 800378e:	2308      	movs	r3, #8
 8003790:	18fb      	adds	r3, r7, r3
 8003792:	1c0a      	adds	r2, r1, #0
 8003794:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2241      	movs	r2, #65	; 0x41
 800379a:	5c9b      	ldrb	r3, [r3, r2]
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b20      	cmp	r3, #32
 80037a0:	d000      	beq.n	80037a4 <HAL_I2C_Master_Transmit+0x2c>
 80037a2:	e0e7      	b.n	8003974 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2240      	movs	r2, #64	; 0x40
 80037a8:	5c9b      	ldrb	r3, [r3, r2]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d101      	bne.n	80037b2 <HAL_I2C_Master_Transmit+0x3a>
 80037ae:	2302      	movs	r3, #2
 80037b0:	e0e1      	b.n	8003976 <HAL_I2C_Master_Transmit+0x1fe>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2240      	movs	r2, #64	; 0x40
 80037b6:	2101      	movs	r1, #1
 80037b8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037ba:	f7ff f977 	bl	8002aac <HAL_GetTick>
 80037be:	0003      	movs	r3, r0
 80037c0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037c2:	2380      	movs	r3, #128	; 0x80
 80037c4:	0219      	lsls	r1, r3, #8
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	2319      	movs	r3, #25
 80037ce:	2201      	movs	r2, #1
 80037d0:	f000 fa8e 	bl	8003cf0 <I2C_WaitOnFlagUntilTimeout>
 80037d4:	1e03      	subs	r3, r0, #0
 80037d6:	d001      	beq.n	80037dc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e0cc      	b.n	8003976 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2241      	movs	r2, #65	; 0x41
 80037e0:	2121      	movs	r1, #33	; 0x21
 80037e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2242      	movs	r2, #66	; 0x42
 80037e8:	2110      	movs	r1, #16
 80037ea:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2208      	movs	r2, #8
 80037fc:	18ba      	adds	r2, r7, r2
 80037fe:	8812      	ldrh	r2, [r2, #0]
 8003800:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380c:	b29b      	uxth	r3, r3
 800380e:	2bff      	cmp	r3, #255	; 0xff
 8003810:	d911      	bls.n	8003836 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	22ff      	movs	r2, #255	; 0xff
 8003816:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381c:	b2da      	uxtb	r2, r3
 800381e:	2380      	movs	r3, #128	; 0x80
 8003820:	045c      	lsls	r4, r3, #17
 8003822:	230a      	movs	r3, #10
 8003824:	18fb      	adds	r3, r7, r3
 8003826:	8819      	ldrh	r1, [r3, #0]
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	4b55      	ldr	r3, [pc, #340]	; (8003980 <HAL_I2C_Master_Transmit+0x208>)
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	0023      	movs	r3, r4
 8003830:	f000 fc36 	bl	80040a0 <I2C_TransferConfig>
 8003834:	e075      	b.n	8003922 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383a:	b29a      	uxth	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003844:	b2da      	uxtb	r2, r3
 8003846:	2380      	movs	r3, #128	; 0x80
 8003848:	049c      	lsls	r4, r3, #18
 800384a:	230a      	movs	r3, #10
 800384c:	18fb      	adds	r3, r7, r3
 800384e:	8819      	ldrh	r1, [r3, #0]
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	4b4b      	ldr	r3, [pc, #300]	; (8003980 <HAL_I2C_Master_Transmit+0x208>)
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	0023      	movs	r3, r4
 8003858:	f000 fc22 	bl	80040a0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800385c:	e061      	b.n	8003922 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	0018      	movs	r0, r3
 8003866:	f000 fa91 	bl	8003d8c <I2C_WaitOnTXISFlagUntilTimeout>
 800386a:	1e03      	subs	r3, r0, #0
 800386c:	d001      	beq.n	8003872 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e081      	b.n	8003976 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	781a      	ldrb	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	1c5a      	adds	r2, r3, #1
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388c:	b29b      	uxth	r3, r3
 800388e:	3b01      	subs	r3, #1
 8003890:	b29a      	uxth	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389a:	3b01      	subs	r3, #1
 800389c:	b29a      	uxth	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d03a      	beq.n	8003922 <HAL_I2C_Master_Transmit+0x1aa>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d136      	bne.n	8003922 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	0013      	movs	r3, r2
 80038be:	2200      	movs	r2, #0
 80038c0:	2180      	movs	r1, #128	; 0x80
 80038c2:	f000 fa15 	bl	8003cf0 <I2C_WaitOnFlagUntilTimeout>
 80038c6:	1e03      	subs	r3, r0, #0
 80038c8:	d001      	beq.n	80038ce <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e053      	b.n	8003976 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	2bff      	cmp	r3, #255	; 0xff
 80038d6:	d911      	bls.n	80038fc <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	22ff      	movs	r2, #255	; 0xff
 80038dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	2380      	movs	r3, #128	; 0x80
 80038e6:	045c      	lsls	r4, r3, #17
 80038e8:	230a      	movs	r3, #10
 80038ea:	18fb      	adds	r3, r7, r3
 80038ec:	8819      	ldrh	r1, [r3, #0]
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	2300      	movs	r3, #0
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	0023      	movs	r3, r4
 80038f6:	f000 fbd3 	bl	80040a0 <I2C_TransferConfig>
 80038fa:	e012      	b.n	8003922 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003900:	b29a      	uxth	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800390a:	b2da      	uxtb	r2, r3
 800390c:	2380      	movs	r3, #128	; 0x80
 800390e:	049c      	lsls	r4, r3, #18
 8003910:	230a      	movs	r3, #10
 8003912:	18fb      	adds	r3, r7, r3
 8003914:	8819      	ldrh	r1, [r3, #0]
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	2300      	movs	r3, #0
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	0023      	movs	r3, r4
 800391e:	f000 fbbf 	bl	80040a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d198      	bne.n	800385e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	0018      	movs	r0, r3
 8003934:	f000 fa70 	bl	8003e18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003938:	1e03      	subs	r3, r0, #0
 800393a:	d001      	beq.n	8003940 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e01a      	b.n	8003976 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2220      	movs	r2, #32
 8003946:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	490c      	ldr	r1, [pc, #48]	; (8003984 <HAL_I2C_Master_Transmit+0x20c>)
 8003954:	400a      	ands	r2, r1
 8003956:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2241      	movs	r2, #65	; 0x41
 800395c:	2120      	movs	r1, #32
 800395e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2242      	movs	r2, #66	; 0x42
 8003964:	2100      	movs	r1, #0
 8003966:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2240      	movs	r2, #64	; 0x40
 800396c:	2100      	movs	r1, #0
 800396e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003970:	2300      	movs	r3, #0
 8003972:	e000      	b.n	8003976 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003974:	2302      	movs	r3, #2
  }
}
 8003976:	0018      	movs	r0, r3
 8003978:	46bd      	mov	sp, r7
 800397a:	b007      	add	sp, #28
 800397c:	bd90      	pop	{r4, r7, pc}
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	80002000 	.word	0x80002000
 8003984:	fe00e800 	.word	0xfe00e800

08003988 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003988:	b590      	push	{r4, r7, lr}
 800398a:	b089      	sub	sp, #36	; 0x24
 800398c:	af02      	add	r7, sp, #8
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	000c      	movs	r4, r1
 8003992:	0010      	movs	r0, r2
 8003994:	0019      	movs	r1, r3
 8003996:	230a      	movs	r3, #10
 8003998:	18fb      	adds	r3, r7, r3
 800399a:	1c22      	adds	r2, r4, #0
 800399c:	801a      	strh	r2, [r3, #0]
 800399e:	2308      	movs	r3, #8
 80039a0:	18fb      	adds	r3, r7, r3
 80039a2:	1c02      	adds	r2, r0, #0
 80039a4:	801a      	strh	r2, [r3, #0]
 80039a6:	1dbb      	adds	r3, r7, #6
 80039a8:	1c0a      	adds	r2, r1, #0
 80039aa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2241      	movs	r2, #65	; 0x41
 80039b0:	5c9b      	ldrb	r3, [r3, r2]
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b20      	cmp	r3, #32
 80039b6:	d000      	beq.n	80039ba <HAL_I2C_Mem_Write+0x32>
 80039b8:	e10c      	b.n	8003bd4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d004      	beq.n	80039ca <HAL_I2C_Mem_Write+0x42>
 80039c0:	232c      	movs	r3, #44	; 0x2c
 80039c2:	18fb      	adds	r3, r7, r3
 80039c4:	881b      	ldrh	r3, [r3, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d105      	bne.n	80039d6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2280      	movs	r2, #128	; 0x80
 80039ce:	0092      	lsls	r2, r2, #2
 80039d0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e0ff      	b.n	8003bd6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2240      	movs	r2, #64	; 0x40
 80039da:	5c9b      	ldrb	r3, [r3, r2]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d101      	bne.n	80039e4 <HAL_I2C_Mem_Write+0x5c>
 80039e0:	2302      	movs	r3, #2
 80039e2:	e0f8      	b.n	8003bd6 <HAL_I2C_Mem_Write+0x24e>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2240      	movs	r2, #64	; 0x40
 80039e8:	2101      	movs	r1, #1
 80039ea:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80039ec:	f7ff f85e 	bl	8002aac <HAL_GetTick>
 80039f0:	0003      	movs	r3, r0
 80039f2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039f4:	2380      	movs	r3, #128	; 0x80
 80039f6:	0219      	lsls	r1, r3, #8
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	2319      	movs	r3, #25
 8003a00:	2201      	movs	r2, #1
 8003a02:	f000 f975 	bl	8003cf0 <I2C_WaitOnFlagUntilTimeout>
 8003a06:	1e03      	subs	r3, r0, #0
 8003a08:	d001      	beq.n	8003a0e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e0e3      	b.n	8003bd6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2241      	movs	r2, #65	; 0x41
 8003a12:	2121      	movs	r1, #33	; 0x21
 8003a14:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2242      	movs	r2, #66	; 0x42
 8003a1a:	2140      	movs	r1, #64	; 0x40
 8003a1c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	222c      	movs	r2, #44	; 0x2c
 8003a2e:	18ba      	adds	r2, r7, r2
 8003a30:	8812      	ldrh	r2, [r2, #0]
 8003a32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a3a:	1dbb      	adds	r3, r7, #6
 8003a3c:	881c      	ldrh	r4, [r3, #0]
 8003a3e:	2308      	movs	r3, #8
 8003a40:	18fb      	adds	r3, r7, r3
 8003a42:	881a      	ldrh	r2, [r3, #0]
 8003a44:	230a      	movs	r3, #10
 8003a46:	18fb      	adds	r3, r7, r3
 8003a48:	8819      	ldrh	r1, [r3, #0]
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	9301      	str	r3, [sp, #4]
 8003a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	0023      	movs	r3, r4
 8003a56:	f000 f8c5 	bl	8003be4 <I2C_RequestMemoryWrite>
 8003a5a:	1e03      	subs	r3, r0, #0
 8003a5c:	d005      	beq.n	8003a6a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2240      	movs	r2, #64	; 0x40
 8003a62:	2100      	movs	r1, #0
 8003a64:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e0b5      	b.n	8003bd6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	2bff      	cmp	r3, #255	; 0xff
 8003a72:	d911      	bls.n	8003a98 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	22ff      	movs	r2, #255	; 0xff
 8003a78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	2380      	movs	r3, #128	; 0x80
 8003a82:	045c      	lsls	r4, r3, #17
 8003a84:	230a      	movs	r3, #10
 8003a86:	18fb      	adds	r3, r7, r3
 8003a88:	8819      	ldrh	r1, [r3, #0]
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	0023      	movs	r3, r4
 8003a92:	f000 fb05 	bl	80040a0 <I2C_TransferConfig>
 8003a96:	e012      	b.n	8003abe <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa6:	b2da      	uxtb	r2, r3
 8003aa8:	2380      	movs	r3, #128	; 0x80
 8003aaa:	049c      	lsls	r4, r3, #18
 8003aac:	230a      	movs	r3, #10
 8003aae:	18fb      	adds	r3, r7, r3
 8003ab0:	8819      	ldrh	r1, [r3, #0]
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	0023      	movs	r3, r4
 8003aba:	f000 faf1 	bl	80040a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	f000 f961 	bl	8003d8c <I2C_WaitOnTXISFlagUntilTimeout>
 8003aca:	1e03      	subs	r3, r0, #0
 8003acc:	d001      	beq.n	8003ad2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e081      	b.n	8003bd6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	781a      	ldrb	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	1c5a      	adds	r2, r3, #1
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	3b01      	subs	r3, #1
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003afa:	3b01      	subs	r3, #1
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d03a      	beq.n	8003b82 <HAL_I2C_Mem_Write+0x1fa>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d136      	bne.n	8003b82 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	0013      	movs	r3, r2
 8003b1e:	2200      	movs	r2, #0
 8003b20:	2180      	movs	r1, #128	; 0x80
 8003b22:	f000 f8e5 	bl	8003cf0 <I2C_WaitOnFlagUntilTimeout>
 8003b26:	1e03      	subs	r3, r0, #0
 8003b28:	d001      	beq.n	8003b2e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e053      	b.n	8003bd6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	2bff      	cmp	r3, #255	; 0xff
 8003b36:	d911      	bls.n	8003b5c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	22ff      	movs	r2, #255	; 0xff
 8003b3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b42:	b2da      	uxtb	r2, r3
 8003b44:	2380      	movs	r3, #128	; 0x80
 8003b46:	045c      	lsls	r4, r3, #17
 8003b48:	230a      	movs	r3, #10
 8003b4a:	18fb      	adds	r3, r7, r3
 8003b4c:	8819      	ldrh	r1, [r3, #0]
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	2300      	movs	r3, #0
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	0023      	movs	r3, r4
 8003b56:	f000 faa3 	bl	80040a0 <I2C_TransferConfig>
 8003b5a:	e012      	b.n	8003b82 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	2380      	movs	r3, #128	; 0x80
 8003b6e:	049c      	lsls	r4, r3, #18
 8003b70:	230a      	movs	r3, #10
 8003b72:	18fb      	adds	r3, r7, r3
 8003b74:	8819      	ldrh	r1, [r3, #0]
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	2300      	movs	r3, #0
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	0023      	movs	r3, r4
 8003b7e:	f000 fa8f 	bl	80040a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d198      	bne.n	8003abe <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	0018      	movs	r0, r3
 8003b94:	f000 f940 	bl	8003e18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b98:	1e03      	subs	r3, r0, #0
 8003b9a:	d001      	beq.n	8003ba0 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e01a      	b.n	8003bd6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	490b      	ldr	r1, [pc, #44]	; (8003be0 <HAL_I2C_Mem_Write+0x258>)
 8003bb4:	400a      	ands	r2, r1
 8003bb6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2241      	movs	r2, #65	; 0x41
 8003bbc:	2120      	movs	r1, #32
 8003bbe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2242      	movs	r2, #66	; 0x42
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2240      	movs	r2, #64	; 0x40
 8003bcc:	2100      	movs	r1, #0
 8003bce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	e000      	b.n	8003bd6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003bd4:	2302      	movs	r3, #2
  }
}
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	b007      	add	sp, #28
 8003bdc:	bd90      	pop	{r4, r7, pc}
 8003bde:	46c0      	nop			; (mov r8, r8)
 8003be0:	fe00e800 	.word	0xfe00e800

08003be4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003be4:	b5b0      	push	{r4, r5, r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af02      	add	r7, sp, #8
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	000c      	movs	r4, r1
 8003bee:	0010      	movs	r0, r2
 8003bf0:	0019      	movs	r1, r3
 8003bf2:	250a      	movs	r5, #10
 8003bf4:	197b      	adds	r3, r7, r5
 8003bf6:	1c22      	adds	r2, r4, #0
 8003bf8:	801a      	strh	r2, [r3, #0]
 8003bfa:	2308      	movs	r3, #8
 8003bfc:	18fb      	adds	r3, r7, r3
 8003bfe:	1c02      	adds	r2, r0, #0
 8003c00:	801a      	strh	r2, [r3, #0]
 8003c02:	1dbb      	adds	r3, r7, #6
 8003c04:	1c0a      	adds	r2, r1, #0
 8003c06:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003c08:	1dbb      	adds	r3, r7, #6
 8003c0a:	881b      	ldrh	r3, [r3, #0]
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	2380      	movs	r3, #128	; 0x80
 8003c10:	045c      	lsls	r4, r3, #17
 8003c12:	197b      	adds	r3, r7, r5
 8003c14:	8819      	ldrh	r1, [r3, #0]
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	4b23      	ldr	r3, [pc, #140]	; (8003ca8 <I2C_RequestMemoryWrite+0xc4>)
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	0023      	movs	r3, r4
 8003c1e:	f000 fa3f 	bl	80040a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c24:	6a39      	ldr	r1, [r7, #32]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f000 f8af 	bl	8003d8c <I2C_WaitOnTXISFlagUntilTimeout>
 8003c2e:	1e03      	subs	r3, r0, #0
 8003c30:	d001      	beq.n	8003c36 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e033      	b.n	8003c9e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c36:	1dbb      	adds	r3, r7, #6
 8003c38:	881b      	ldrh	r3, [r3, #0]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d107      	bne.n	8003c4e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c3e:	2308      	movs	r3, #8
 8003c40:	18fb      	adds	r3, r7, r3
 8003c42:	881b      	ldrh	r3, [r3, #0]
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	629a      	str	r2, [r3, #40]	; 0x28
 8003c4c:	e019      	b.n	8003c82 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c4e:	2308      	movs	r3, #8
 8003c50:	18fb      	adds	r3, r7, r3
 8003c52:	881b      	ldrh	r3, [r3, #0]
 8003c54:	0a1b      	lsrs	r3, r3, #8
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c62:	6a39      	ldr	r1, [r7, #32]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	0018      	movs	r0, r3
 8003c68:	f000 f890 	bl	8003d8c <I2C_WaitOnTXISFlagUntilTimeout>
 8003c6c:	1e03      	subs	r3, r0, #0
 8003c6e:	d001      	beq.n	8003c74 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e014      	b.n	8003c9e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c74:	2308      	movs	r3, #8
 8003c76:	18fb      	adds	r3, r7, r3
 8003c78:	881b      	ldrh	r3, [r3, #0]
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003c82:	6a3a      	ldr	r2, [r7, #32]
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	0013      	movs	r3, r2
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	2180      	movs	r1, #128	; 0x80
 8003c90:	f000 f82e 	bl	8003cf0 <I2C_WaitOnFlagUntilTimeout>
 8003c94:	1e03      	subs	r3, r0, #0
 8003c96:	d001      	beq.n	8003c9c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e000      	b.n	8003c9e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	b004      	add	sp, #16
 8003ca4:	bdb0      	pop	{r4, r5, r7, pc}
 8003ca6:	46c0      	nop			; (mov r8, r8)
 8003ca8:	80002000 	.word	0x80002000

08003cac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d103      	bne.n	8003cca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d007      	beq.n	8003ce8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	699a      	ldr	r2, [r3, #24]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	619a      	str	r2, [r3, #24]
  }
}
 8003ce8:	46c0      	nop			; (mov r8, r8)
 8003cea:	46bd      	mov	sp, r7
 8003cec:	b002      	add	sp, #8
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	603b      	str	r3, [r7, #0]
 8003cfc:	1dfb      	adds	r3, r7, #7
 8003cfe:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d00:	e030      	b.n	8003d64 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	3301      	adds	r3, #1
 8003d06:	d02d      	beq.n	8003d64 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d08:	f7fe fed0 	bl	8002aac <HAL_GetTick>
 8003d0c:	0002      	movs	r2, r0
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d302      	bcc.n	8003d1e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d122      	bne.n	8003d64 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	4013      	ands	r3, r2
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	425a      	negs	r2, r3
 8003d2e:	4153      	adcs	r3, r2
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	001a      	movs	r2, r3
 8003d34:	1dfb      	adds	r3, r7, #7
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d113      	bne.n	8003d64 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d40:	2220      	movs	r2, #32
 8003d42:	431a      	orrs	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2241      	movs	r2, #65	; 0x41
 8003d4c:	2120      	movs	r1, #32
 8003d4e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2242      	movs	r2, #66	; 0x42
 8003d54:	2100      	movs	r1, #0
 8003d56:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2240      	movs	r2, #64	; 0x40
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e00f      	b.n	8003d84 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	425a      	negs	r2, r3
 8003d74:	4153      	adcs	r3, r2
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	001a      	movs	r2, r3
 8003d7a:	1dfb      	adds	r3, r7, #7
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d0bf      	beq.n	8003d02 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	0018      	movs	r0, r3
 8003d86:	46bd      	mov	sp, r7
 8003d88:	b004      	add	sp, #16
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d98:	e032      	b.n	8003e00 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	68b9      	ldr	r1, [r7, #8]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	0018      	movs	r0, r3
 8003da2:	f000 f87d 	bl	8003ea0 <I2C_IsErrorOccurred>
 8003da6:	1e03      	subs	r3, r0, #0
 8003da8:	d001      	beq.n	8003dae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e030      	b.n	8003e10 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	3301      	adds	r3, #1
 8003db2:	d025      	beq.n	8003e00 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003db4:	f7fe fe7a 	bl	8002aac <HAL_GetTick>
 8003db8:	0002      	movs	r2, r0
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d302      	bcc.n	8003dca <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d11a      	bne.n	8003e00 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	2202      	movs	r2, #2
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d013      	beq.n	8003e00 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ddc:	2220      	movs	r2, #32
 8003dde:	431a      	orrs	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2241      	movs	r2, #65	; 0x41
 8003de8:	2120      	movs	r1, #32
 8003dea:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2242      	movs	r2, #66	; 0x42
 8003df0:	2100      	movs	r1, #0
 8003df2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2240      	movs	r2, #64	; 0x40
 8003df8:	2100      	movs	r1, #0
 8003dfa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e007      	b.n	8003e10 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	2202      	movs	r2, #2
 8003e08:	4013      	ands	r3, r2
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d1c5      	bne.n	8003d9a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	0018      	movs	r0, r3
 8003e12:	46bd      	mov	sp, r7
 8003e14:	b004      	add	sp, #16
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e24:	e02f      	b.n	8003e86 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	68b9      	ldr	r1, [r7, #8]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	f000 f837 	bl	8003ea0 <I2C_IsErrorOccurred>
 8003e32:	1e03      	subs	r3, r0, #0
 8003e34:	d001      	beq.n	8003e3a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e02d      	b.n	8003e96 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e3a:	f7fe fe37 	bl	8002aac <HAL_GetTick>
 8003e3e:	0002      	movs	r2, r0
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d302      	bcc.n	8003e50 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d11a      	bne.n	8003e86 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	2220      	movs	r2, #32
 8003e58:	4013      	ands	r3, r2
 8003e5a:	2b20      	cmp	r3, #32
 8003e5c:	d013      	beq.n	8003e86 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e62:	2220      	movs	r2, #32
 8003e64:	431a      	orrs	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2241      	movs	r2, #65	; 0x41
 8003e6e:	2120      	movs	r1, #32
 8003e70:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2242      	movs	r2, #66	; 0x42
 8003e76:	2100      	movs	r1, #0
 8003e78:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2240      	movs	r2, #64	; 0x40
 8003e7e:	2100      	movs	r1, #0
 8003e80:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e007      	b.n	8003e96 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	4013      	ands	r3, r2
 8003e90:	2b20      	cmp	r3, #32
 8003e92:	d1c8      	bne.n	8003e26 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	0018      	movs	r0, r3
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	b004      	add	sp, #16
 8003e9c:	bd80      	pop	{r7, pc}
	...

08003ea0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ea0:	b590      	push	{r4, r7, lr}
 8003ea2:	b08b      	sub	sp, #44	; 0x2c
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003eac:	2327      	movs	r3, #39	; 0x27
 8003eae:	18fb      	adds	r3, r7, r3
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	2210      	movs	r2, #16
 8003ec8:	4013      	ands	r3, r2
 8003eca:	d100      	bne.n	8003ece <I2C_IsErrorOccurred+0x2e>
 8003ecc:	e082      	b.n	8003fd4 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2210      	movs	r2, #16
 8003ed4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ed6:	e060      	b.n	8003f9a <I2C_IsErrorOccurred+0xfa>
 8003ed8:	2427      	movs	r4, #39	; 0x27
 8003eda:	193b      	adds	r3, r7, r4
 8003edc:	193a      	adds	r2, r7, r4
 8003ede:	7812      	ldrb	r2, [r2, #0]
 8003ee0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	d058      	beq.n	8003f9a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ee8:	f7fe fde0 	bl	8002aac <HAL_GetTick>
 8003eec:	0002      	movs	r2, r0
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d306      	bcc.n	8003f06 <I2C_IsErrorOccurred+0x66>
 8003ef8:	193b      	adds	r3, r7, r4
 8003efa:	193a      	adds	r2, r7, r4
 8003efc:	7812      	ldrb	r2, [r2, #0]
 8003efe:	701a      	strb	r2, [r3, #0]
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d149      	bne.n	8003f9a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	2380      	movs	r3, #128	; 0x80
 8003f0e:	01db      	lsls	r3, r3, #7
 8003f10:	4013      	ands	r3, r2
 8003f12:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003f14:	2013      	movs	r0, #19
 8003f16:	183b      	adds	r3, r7, r0
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	2142      	movs	r1, #66	; 0x42
 8003f1c:	5c52      	ldrb	r2, [r2, r1]
 8003f1e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	699a      	ldr	r2, [r3, #24]
 8003f26:	2380      	movs	r3, #128	; 0x80
 8003f28:	021b      	lsls	r3, r3, #8
 8003f2a:	401a      	ands	r2, r3
 8003f2c:	2380      	movs	r3, #128	; 0x80
 8003f2e:	021b      	lsls	r3, r3, #8
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d126      	bne.n	8003f82 <I2C_IsErrorOccurred+0xe2>
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	2380      	movs	r3, #128	; 0x80
 8003f38:	01db      	lsls	r3, r3, #7
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d021      	beq.n	8003f82 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8003f3e:	183b      	adds	r3, r7, r0
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	2b20      	cmp	r3, #32
 8003f44:	d01d      	beq.n	8003f82 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2180      	movs	r1, #128	; 0x80
 8003f52:	01c9      	lsls	r1, r1, #7
 8003f54:	430a      	orrs	r2, r1
 8003f56:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003f58:	f7fe fda8 	bl	8002aac <HAL_GetTick>
 8003f5c:	0003      	movs	r3, r0
 8003f5e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f60:	e00f      	b.n	8003f82 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003f62:	f7fe fda3 	bl	8002aac <HAL_GetTick>
 8003f66:	0002      	movs	r2, r0
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b19      	cmp	r3, #25
 8003f6e:	d908      	bls.n	8003f82 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	2220      	movs	r2, #32
 8003f74:	4313      	orrs	r3, r2
 8003f76:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003f78:	2327      	movs	r3, #39	; 0x27
 8003f7a:	18fb      	adds	r3, r7, r3
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	701a      	strb	r2, [r3, #0]

              break;
 8003f80:	e00b      	b.n	8003f9a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	2127      	movs	r1, #39	; 0x27
 8003f8e:	187a      	adds	r2, r7, r1
 8003f90:	1879      	adds	r1, r7, r1
 8003f92:	7809      	ldrb	r1, [r1, #0]
 8003f94:	7011      	strb	r1, [r2, #0]
 8003f96:	2b20      	cmp	r3, #32
 8003f98:	d1e3      	bne.n	8003f62 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	2b20      	cmp	r3, #32
 8003fa6:	d004      	beq.n	8003fb2 <I2C_IsErrorOccurred+0x112>
 8003fa8:	2327      	movs	r3, #39	; 0x27
 8003faa:	18fb      	adds	r3, r7, r3
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d092      	beq.n	8003ed8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003fb2:	2327      	movs	r3, #39	; 0x27
 8003fb4:	18fb      	adds	r3, r7, r3
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d103      	bne.n	8003fc4 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003fc4:	6a3b      	ldr	r3, [r7, #32]
 8003fc6:	2204      	movs	r2, #4
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003fcc:	2327      	movs	r3, #39	; 0x27
 8003fce:	18fb      	adds	r3, r7, r3
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	2380      	movs	r3, #128	; 0x80
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	d00c      	beq.n	8004000 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	4313      	orrs	r3, r2
 8003fec:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2280      	movs	r2, #128	; 0x80
 8003ff4:	0052      	lsls	r2, r2, #1
 8003ff6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ff8:	2327      	movs	r3, #39	; 0x27
 8003ffa:	18fb      	adds	r3, r7, r3
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	2380      	movs	r3, #128	; 0x80
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	4013      	ands	r3, r2
 8004008:	d00c      	beq.n	8004024 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800400a:	6a3b      	ldr	r3, [r7, #32]
 800400c:	2208      	movs	r2, #8
 800400e:	4313      	orrs	r3, r2
 8004010:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2280      	movs	r2, #128	; 0x80
 8004018:	00d2      	lsls	r2, r2, #3
 800401a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800401c:	2327      	movs	r3, #39	; 0x27
 800401e:	18fb      	adds	r3, r7, r3
 8004020:	2201      	movs	r2, #1
 8004022:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	2380      	movs	r3, #128	; 0x80
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4013      	ands	r3, r2
 800402c:	d00c      	beq.n	8004048 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	2202      	movs	r2, #2
 8004032:	4313      	orrs	r3, r2
 8004034:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2280      	movs	r2, #128	; 0x80
 800403c:	0092      	lsls	r2, r2, #2
 800403e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004040:	2327      	movs	r3, #39	; 0x27
 8004042:	18fb      	adds	r3, r7, r3
 8004044:	2201      	movs	r2, #1
 8004046:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004048:	2327      	movs	r3, #39	; 0x27
 800404a:	18fb      	adds	r3, r7, r3
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d01d      	beq.n	800408e <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	0018      	movs	r0, r3
 8004056:	f7ff fe29 	bl	8003cac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	490d      	ldr	r1, [pc, #52]	; (800409c <I2C_IsErrorOccurred+0x1fc>)
 8004066:	400a      	ands	r2, r1
 8004068:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	431a      	orrs	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2241      	movs	r2, #65	; 0x41
 800407a:	2120      	movs	r1, #32
 800407c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2242      	movs	r2, #66	; 0x42
 8004082:	2100      	movs	r1, #0
 8004084:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2240      	movs	r2, #64	; 0x40
 800408a:	2100      	movs	r1, #0
 800408c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800408e:	2327      	movs	r3, #39	; 0x27
 8004090:	18fb      	adds	r3, r7, r3
 8004092:	781b      	ldrb	r3, [r3, #0]
}
 8004094:	0018      	movs	r0, r3
 8004096:	46bd      	mov	sp, r7
 8004098:	b00b      	add	sp, #44	; 0x2c
 800409a:	bd90      	pop	{r4, r7, pc}
 800409c:	fe00e800 	.word	0xfe00e800

080040a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80040a0:	b590      	push	{r4, r7, lr}
 80040a2:	b087      	sub	sp, #28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	0008      	movs	r0, r1
 80040aa:	0011      	movs	r1, r2
 80040ac:	607b      	str	r3, [r7, #4]
 80040ae:	240a      	movs	r4, #10
 80040b0:	193b      	adds	r3, r7, r4
 80040b2:	1c02      	adds	r2, r0, #0
 80040b4:	801a      	strh	r2, [r3, #0]
 80040b6:	2009      	movs	r0, #9
 80040b8:	183b      	adds	r3, r7, r0
 80040ba:	1c0a      	adds	r2, r1, #0
 80040bc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040be:	193b      	adds	r3, r7, r4
 80040c0:	881b      	ldrh	r3, [r3, #0]
 80040c2:	059b      	lsls	r3, r3, #22
 80040c4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040c6:	183b      	adds	r3, r7, r0
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	0419      	lsls	r1, r3, #16
 80040cc:	23ff      	movs	r3, #255	; 0xff
 80040ce:	041b      	lsls	r3, r3, #16
 80040d0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040d2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040da:	4313      	orrs	r3, r2
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	085b      	lsrs	r3, r3, #1
 80040e0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040ea:	0d51      	lsrs	r1, r2, #21
 80040ec:	2280      	movs	r2, #128	; 0x80
 80040ee:	00d2      	lsls	r2, r2, #3
 80040f0:	400a      	ands	r2, r1
 80040f2:	4907      	ldr	r1, [pc, #28]	; (8004110 <I2C_TransferConfig+0x70>)
 80040f4:	430a      	orrs	r2, r1
 80040f6:	43d2      	mvns	r2, r2
 80040f8:	401a      	ands	r2, r3
 80040fa:	0011      	movs	r1, r2
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	430a      	orrs	r2, r1
 8004104:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004106:	46c0      	nop			; (mov r8, r8)
 8004108:	46bd      	mov	sp, r7
 800410a:	b007      	add	sp, #28
 800410c:	bd90      	pop	{r4, r7, pc}
 800410e:	46c0      	nop			; (mov r8, r8)
 8004110:	03ff63ff 	.word	0x03ff63ff

08004114 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2241      	movs	r2, #65	; 0x41
 8004122:	5c9b      	ldrb	r3, [r3, r2]
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b20      	cmp	r3, #32
 8004128:	d138      	bne.n	800419c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2240      	movs	r2, #64	; 0x40
 800412e:	5c9b      	ldrb	r3, [r3, r2]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d101      	bne.n	8004138 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004134:	2302      	movs	r3, #2
 8004136:	e032      	b.n	800419e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2240      	movs	r2, #64	; 0x40
 800413c:	2101      	movs	r1, #1
 800413e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2241      	movs	r2, #65	; 0x41
 8004144:	2124      	movs	r1, #36	; 0x24
 8004146:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2101      	movs	r1, #1
 8004154:	438a      	bics	r2, r1
 8004156:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4911      	ldr	r1, [pc, #68]	; (80041a8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004164:	400a      	ands	r2, r1
 8004166:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6819      	ldr	r1, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2101      	movs	r1, #1
 8004184:	430a      	orrs	r2, r1
 8004186:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2241      	movs	r2, #65	; 0x41
 800418c:	2120      	movs	r1, #32
 800418e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2240      	movs	r2, #64	; 0x40
 8004194:	2100      	movs	r1, #0
 8004196:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004198:	2300      	movs	r3, #0
 800419a:	e000      	b.n	800419e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800419c:	2302      	movs	r3, #2
  }
}
 800419e:	0018      	movs	r0, r3
 80041a0:	46bd      	mov	sp, r7
 80041a2:	b002      	add	sp, #8
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	46c0      	nop			; (mov r8, r8)
 80041a8:	ffffefff 	.word	0xffffefff

080041ac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2241      	movs	r2, #65	; 0x41
 80041ba:	5c9b      	ldrb	r3, [r3, r2]
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b20      	cmp	r3, #32
 80041c0:	d139      	bne.n	8004236 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2240      	movs	r2, #64	; 0x40
 80041c6:	5c9b      	ldrb	r3, [r3, r2]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d101      	bne.n	80041d0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80041cc:	2302      	movs	r3, #2
 80041ce:	e033      	b.n	8004238 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2240      	movs	r2, #64	; 0x40
 80041d4:	2101      	movs	r1, #1
 80041d6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2241      	movs	r2, #65	; 0x41
 80041dc:	2124      	movs	r1, #36	; 0x24
 80041de:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2101      	movs	r1, #1
 80041ec:	438a      	bics	r2, r1
 80041ee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	4a11      	ldr	r2, [pc, #68]	; (8004240 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80041fc:	4013      	ands	r3, r2
 80041fe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	021b      	lsls	r3, r3, #8
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	4313      	orrs	r3, r2
 8004208:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2101      	movs	r1, #1
 800421e:	430a      	orrs	r2, r1
 8004220:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2241      	movs	r2, #65	; 0x41
 8004226:	2120      	movs	r1, #32
 8004228:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2240      	movs	r2, #64	; 0x40
 800422e:	2100      	movs	r1, #0
 8004230:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004232:	2300      	movs	r3, #0
 8004234:	e000      	b.n	8004238 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004236:	2302      	movs	r3, #2
  }
}
 8004238:	0018      	movs	r0, r3
 800423a:	46bd      	mov	sp, r7
 800423c:	b004      	add	sp, #16
 800423e:	bd80      	pop	{r7, pc}
 8004240:	fffff0ff 	.word	0xfffff0ff

08004244 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b088      	sub	sp, #32
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d102      	bne.n	8004258 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	f000 fb76 	bl	8004944 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2201      	movs	r2, #1
 800425e:	4013      	ands	r3, r2
 8004260:	d100      	bne.n	8004264 <HAL_RCC_OscConfig+0x20>
 8004262:	e08e      	b.n	8004382 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004264:	4bc5      	ldr	r3, [pc, #788]	; (800457c <HAL_RCC_OscConfig+0x338>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	220c      	movs	r2, #12
 800426a:	4013      	ands	r3, r2
 800426c:	2b04      	cmp	r3, #4
 800426e:	d00e      	beq.n	800428e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004270:	4bc2      	ldr	r3, [pc, #776]	; (800457c <HAL_RCC_OscConfig+0x338>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	220c      	movs	r2, #12
 8004276:	4013      	ands	r3, r2
 8004278:	2b08      	cmp	r3, #8
 800427a:	d117      	bne.n	80042ac <HAL_RCC_OscConfig+0x68>
 800427c:	4bbf      	ldr	r3, [pc, #764]	; (800457c <HAL_RCC_OscConfig+0x338>)
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	23c0      	movs	r3, #192	; 0xc0
 8004282:	025b      	lsls	r3, r3, #9
 8004284:	401a      	ands	r2, r3
 8004286:	2380      	movs	r3, #128	; 0x80
 8004288:	025b      	lsls	r3, r3, #9
 800428a:	429a      	cmp	r2, r3
 800428c:	d10e      	bne.n	80042ac <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800428e:	4bbb      	ldr	r3, [pc, #748]	; (800457c <HAL_RCC_OscConfig+0x338>)
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	2380      	movs	r3, #128	; 0x80
 8004294:	029b      	lsls	r3, r3, #10
 8004296:	4013      	ands	r3, r2
 8004298:	d100      	bne.n	800429c <HAL_RCC_OscConfig+0x58>
 800429a:	e071      	b.n	8004380 <HAL_RCC_OscConfig+0x13c>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d000      	beq.n	80042a6 <HAL_RCC_OscConfig+0x62>
 80042a4:	e06c      	b.n	8004380 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	f000 fb4c 	bl	8004944 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d107      	bne.n	80042c4 <HAL_RCC_OscConfig+0x80>
 80042b4:	4bb1      	ldr	r3, [pc, #708]	; (800457c <HAL_RCC_OscConfig+0x338>)
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	4bb0      	ldr	r3, [pc, #704]	; (800457c <HAL_RCC_OscConfig+0x338>)
 80042ba:	2180      	movs	r1, #128	; 0x80
 80042bc:	0249      	lsls	r1, r1, #9
 80042be:	430a      	orrs	r2, r1
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	e02f      	b.n	8004324 <HAL_RCC_OscConfig+0xe0>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10c      	bne.n	80042e6 <HAL_RCC_OscConfig+0xa2>
 80042cc:	4bab      	ldr	r3, [pc, #684]	; (800457c <HAL_RCC_OscConfig+0x338>)
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	4baa      	ldr	r3, [pc, #680]	; (800457c <HAL_RCC_OscConfig+0x338>)
 80042d2:	49ab      	ldr	r1, [pc, #684]	; (8004580 <HAL_RCC_OscConfig+0x33c>)
 80042d4:	400a      	ands	r2, r1
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	4ba8      	ldr	r3, [pc, #672]	; (800457c <HAL_RCC_OscConfig+0x338>)
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	4ba7      	ldr	r3, [pc, #668]	; (800457c <HAL_RCC_OscConfig+0x338>)
 80042de:	49a9      	ldr	r1, [pc, #676]	; (8004584 <HAL_RCC_OscConfig+0x340>)
 80042e0:	400a      	ands	r2, r1
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	e01e      	b.n	8004324 <HAL_RCC_OscConfig+0xe0>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2b05      	cmp	r3, #5
 80042ec:	d10e      	bne.n	800430c <HAL_RCC_OscConfig+0xc8>
 80042ee:	4ba3      	ldr	r3, [pc, #652]	; (800457c <HAL_RCC_OscConfig+0x338>)
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	4ba2      	ldr	r3, [pc, #648]	; (800457c <HAL_RCC_OscConfig+0x338>)
 80042f4:	2180      	movs	r1, #128	; 0x80
 80042f6:	02c9      	lsls	r1, r1, #11
 80042f8:	430a      	orrs	r2, r1
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	4b9f      	ldr	r3, [pc, #636]	; (800457c <HAL_RCC_OscConfig+0x338>)
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	4b9e      	ldr	r3, [pc, #632]	; (800457c <HAL_RCC_OscConfig+0x338>)
 8004302:	2180      	movs	r1, #128	; 0x80
 8004304:	0249      	lsls	r1, r1, #9
 8004306:	430a      	orrs	r2, r1
 8004308:	601a      	str	r2, [r3, #0]
 800430a:	e00b      	b.n	8004324 <HAL_RCC_OscConfig+0xe0>
 800430c:	4b9b      	ldr	r3, [pc, #620]	; (800457c <HAL_RCC_OscConfig+0x338>)
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	4b9a      	ldr	r3, [pc, #616]	; (800457c <HAL_RCC_OscConfig+0x338>)
 8004312:	499b      	ldr	r1, [pc, #620]	; (8004580 <HAL_RCC_OscConfig+0x33c>)
 8004314:	400a      	ands	r2, r1
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	4b98      	ldr	r3, [pc, #608]	; (800457c <HAL_RCC_OscConfig+0x338>)
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	4b97      	ldr	r3, [pc, #604]	; (800457c <HAL_RCC_OscConfig+0x338>)
 800431e:	4999      	ldr	r1, [pc, #612]	; (8004584 <HAL_RCC_OscConfig+0x340>)
 8004320:	400a      	ands	r2, r1
 8004322:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d014      	beq.n	8004356 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800432c:	f7fe fbbe 	bl	8002aac <HAL_GetTick>
 8004330:	0003      	movs	r3, r0
 8004332:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004334:	e008      	b.n	8004348 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004336:	f7fe fbb9 	bl	8002aac <HAL_GetTick>
 800433a:	0002      	movs	r2, r0
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b64      	cmp	r3, #100	; 0x64
 8004342:	d901      	bls.n	8004348 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e2fd      	b.n	8004944 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004348:	4b8c      	ldr	r3, [pc, #560]	; (800457c <HAL_RCC_OscConfig+0x338>)
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	2380      	movs	r3, #128	; 0x80
 800434e:	029b      	lsls	r3, r3, #10
 8004350:	4013      	ands	r3, r2
 8004352:	d0f0      	beq.n	8004336 <HAL_RCC_OscConfig+0xf2>
 8004354:	e015      	b.n	8004382 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004356:	f7fe fba9 	bl	8002aac <HAL_GetTick>
 800435a:	0003      	movs	r3, r0
 800435c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800435e:	e008      	b.n	8004372 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004360:	f7fe fba4 	bl	8002aac <HAL_GetTick>
 8004364:	0002      	movs	r2, r0
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b64      	cmp	r3, #100	; 0x64
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e2e8      	b.n	8004944 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004372:	4b82      	ldr	r3, [pc, #520]	; (800457c <HAL_RCC_OscConfig+0x338>)
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	2380      	movs	r3, #128	; 0x80
 8004378:	029b      	lsls	r3, r3, #10
 800437a:	4013      	ands	r3, r2
 800437c:	d1f0      	bne.n	8004360 <HAL_RCC_OscConfig+0x11c>
 800437e:	e000      	b.n	8004382 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004380:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2202      	movs	r2, #2
 8004388:	4013      	ands	r3, r2
 800438a:	d100      	bne.n	800438e <HAL_RCC_OscConfig+0x14a>
 800438c:	e06c      	b.n	8004468 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800438e:	4b7b      	ldr	r3, [pc, #492]	; (800457c <HAL_RCC_OscConfig+0x338>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	220c      	movs	r2, #12
 8004394:	4013      	ands	r3, r2
 8004396:	d00e      	beq.n	80043b6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004398:	4b78      	ldr	r3, [pc, #480]	; (800457c <HAL_RCC_OscConfig+0x338>)
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	220c      	movs	r2, #12
 800439e:	4013      	ands	r3, r2
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d11f      	bne.n	80043e4 <HAL_RCC_OscConfig+0x1a0>
 80043a4:	4b75      	ldr	r3, [pc, #468]	; (800457c <HAL_RCC_OscConfig+0x338>)
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	23c0      	movs	r3, #192	; 0xc0
 80043aa:	025b      	lsls	r3, r3, #9
 80043ac:	401a      	ands	r2, r3
 80043ae:	2380      	movs	r3, #128	; 0x80
 80043b0:	021b      	lsls	r3, r3, #8
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d116      	bne.n	80043e4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043b6:	4b71      	ldr	r3, [pc, #452]	; (800457c <HAL_RCC_OscConfig+0x338>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2202      	movs	r2, #2
 80043bc:	4013      	ands	r3, r2
 80043be:	d005      	beq.n	80043cc <HAL_RCC_OscConfig+0x188>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d001      	beq.n	80043cc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e2bb      	b.n	8004944 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043cc:	4b6b      	ldr	r3, [pc, #428]	; (800457c <HAL_RCC_OscConfig+0x338>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	22f8      	movs	r2, #248	; 0xf8
 80043d2:	4393      	bics	r3, r2
 80043d4:	0019      	movs	r1, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	00da      	lsls	r2, r3, #3
 80043dc:	4b67      	ldr	r3, [pc, #412]	; (800457c <HAL_RCC_OscConfig+0x338>)
 80043de:	430a      	orrs	r2, r1
 80043e0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043e2:	e041      	b.n	8004468 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d024      	beq.n	8004436 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043ec:	4b63      	ldr	r3, [pc, #396]	; (800457c <HAL_RCC_OscConfig+0x338>)
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	4b62      	ldr	r3, [pc, #392]	; (800457c <HAL_RCC_OscConfig+0x338>)
 80043f2:	2101      	movs	r1, #1
 80043f4:	430a      	orrs	r2, r1
 80043f6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f8:	f7fe fb58 	bl	8002aac <HAL_GetTick>
 80043fc:	0003      	movs	r3, r0
 80043fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004400:	e008      	b.n	8004414 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004402:	f7fe fb53 	bl	8002aac <HAL_GetTick>
 8004406:	0002      	movs	r2, r0
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d901      	bls.n	8004414 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e297      	b.n	8004944 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004414:	4b59      	ldr	r3, [pc, #356]	; (800457c <HAL_RCC_OscConfig+0x338>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2202      	movs	r2, #2
 800441a:	4013      	ands	r3, r2
 800441c:	d0f1      	beq.n	8004402 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800441e:	4b57      	ldr	r3, [pc, #348]	; (800457c <HAL_RCC_OscConfig+0x338>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	22f8      	movs	r2, #248	; 0xf8
 8004424:	4393      	bics	r3, r2
 8004426:	0019      	movs	r1, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	00da      	lsls	r2, r3, #3
 800442e:	4b53      	ldr	r3, [pc, #332]	; (800457c <HAL_RCC_OscConfig+0x338>)
 8004430:	430a      	orrs	r2, r1
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	e018      	b.n	8004468 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004436:	4b51      	ldr	r3, [pc, #324]	; (800457c <HAL_RCC_OscConfig+0x338>)
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	4b50      	ldr	r3, [pc, #320]	; (800457c <HAL_RCC_OscConfig+0x338>)
 800443c:	2101      	movs	r1, #1
 800443e:	438a      	bics	r2, r1
 8004440:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004442:	f7fe fb33 	bl	8002aac <HAL_GetTick>
 8004446:	0003      	movs	r3, r0
 8004448:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800444a:	e008      	b.n	800445e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800444c:	f7fe fb2e 	bl	8002aac <HAL_GetTick>
 8004450:	0002      	movs	r2, r0
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e272      	b.n	8004944 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800445e:	4b47      	ldr	r3, [pc, #284]	; (800457c <HAL_RCC_OscConfig+0x338>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2202      	movs	r2, #2
 8004464:	4013      	ands	r3, r2
 8004466:	d1f1      	bne.n	800444c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2208      	movs	r2, #8
 800446e:	4013      	ands	r3, r2
 8004470:	d036      	beq.n	80044e0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	69db      	ldr	r3, [r3, #28]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d019      	beq.n	80044ae <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800447a:	4b40      	ldr	r3, [pc, #256]	; (800457c <HAL_RCC_OscConfig+0x338>)
 800447c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800447e:	4b3f      	ldr	r3, [pc, #252]	; (800457c <HAL_RCC_OscConfig+0x338>)
 8004480:	2101      	movs	r1, #1
 8004482:	430a      	orrs	r2, r1
 8004484:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004486:	f7fe fb11 	bl	8002aac <HAL_GetTick>
 800448a:	0003      	movs	r3, r0
 800448c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004490:	f7fe fb0c 	bl	8002aac <HAL_GetTick>
 8004494:	0002      	movs	r2, r0
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e250      	b.n	8004944 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044a2:	4b36      	ldr	r3, [pc, #216]	; (800457c <HAL_RCC_OscConfig+0x338>)
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	2202      	movs	r2, #2
 80044a8:	4013      	ands	r3, r2
 80044aa:	d0f1      	beq.n	8004490 <HAL_RCC_OscConfig+0x24c>
 80044ac:	e018      	b.n	80044e0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044ae:	4b33      	ldr	r3, [pc, #204]	; (800457c <HAL_RCC_OscConfig+0x338>)
 80044b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044b2:	4b32      	ldr	r3, [pc, #200]	; (800457c <HAL_RCC_OscConfig+0x338>)
 80044b4:	2101      	movs	r1, #1
 80044b6:	438a      	bics	r2, r1
 80044b8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ba:	f7fe faf7 	bl	8002aac <HAL_GetTick>
 80044be:	0003      	movs	r3, r0
 80044c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044c4:	f7fe faf2 	bl	8002aac <HAL_GetTick>
 80044c8:	0002      	movs	r2, r0
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e236      	b.n	8004944 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044d6:	4b29      	ldr	r3, [pc, #164]	; (800457c <HAL_RCC_OscConfig+0x338>)
 80044d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044da:	2202      	movs	r2, #2
 80044dc:	4013      	ands	r3, r2
 80044de:	d1f1      	bne.n	80044c4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2204      	movs	r2, #4
 80044e6:	4013      	ands	r3, r2
 80044e8:	d100      	bne.n	80044ec <HAL_RCC_OscConfig+0x2a8>
 80044ea:	e0b5      	b.n	8004658 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ec:	201f      	movs	r0, #31
 80044ee:	183b      	adds	r3, r7, r0
 80044f0:	2200      	movs	r2, #0
 80044f2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044f4:	4b21      	ldr	r3, [pc, #132]	; (800457c <HAL_RCC_OscConfig+0x338>)
 80044f6:	69da      	ldr	r2, [r3, #28]
 80044f8:	2380      	movs	r3, #128	; 0x80
 80044fa:	055b      	lsls	r3, r3, #21
 80044fc:	4013      	ands	r3, r2
 80044fe:	d110      	bne.n	8004522 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004500:	4b1e      	ldr	r3, [pc, #120]	; (800457c <HAL_RCC_OscConfig+0x338>)
 8004502:	69da      	ldr	r2, [r3, #28]
 8004504:	4b1d      	ldr	r3, [pc, #116]	; (800457c <HAL_RCC_OscConfig+0x338>)
 8004506:	2180      	movs	r1, #128	; 0x80
 8004508:	0549      	lsls	r1, r1, #21
 800450a:	430a      	orrs	r2, r1
 800450c:	61da      	str	r2, [r3, #28]
 800450e:	4b1b      	ldr	r3, [pc, #108]	; (800457c <HAL_RCC_OscConfig+0x338>)
 8004510:	69da      	ldr	r2, [r3, #28]
 8004512:	2380      	movs	r3, #128	; 0x80
 8004514:	055b      	lsls	r3, r3, #21
 8004516:	4013      	ands	r3, r2
 8004518:	60fb      	str	r3, [r7, #12]
 800451a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800451c:	183b      	adds	r3, r7, r0
 800451e:	2201      	movs	r2, #1
 8004520:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004522:	4b19      	ldr	r3, [pc, #100]	; (8004588 <HAL_RCC_OscConfig+0x344>)
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	2380      	movs	r3, #128	; 0x80
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	4013      	ands	r3, r2
 800452c:	d11a      	bne.n	8004564 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800452e:	4b16      	ldr	r3, [pc, #88]	; (8004588 <HAL_RCC_OscConfig+0x344>)
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	4b15      	ldr	r3, [pc, #84]	; (8004588 <HAL_RCC_OscConfig+0x344>)
 8004534:	2180      	movs	r1, #128	; 0x80
 8004536:	0049      	lsls	r1, r1, #1
 8004538:	430a      	orrs	r2, r1
 800453a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800453c:	f7fe fab6 	bl	8002aac <HAL_GetTick>
 8004540:	0003      	movs	r3, r0
 8004542:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004544:	e008      	b.n	8004558 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004546:	f7fe fab1 	bl	8002aac <HAL_GetTick>
 800454a:	0002      	movs	r2, r0
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b64      	cmp	r3, #100	; 0x64
 8004552:	d901      	bls.n	8004558 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e1f5      	b.n	8004944 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004558:	4b0b      	ldr	r3, [pc, #44]	; (8004588 <HAL_RCC_OscConfig+0x344>)
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	2380      	movs	r3, #128	; 0x80
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	4013      	ands	r3, r2
 8004562:	d0f0      	beq.n	8004546 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d10f      	bne.n	800458c <HAL_RCC_OscConfig+0x348>
 800456c:	4b03      	ldr	r3, [pc, #12]	; (800457c <HAL_RCC_OscConfig+0x338>)
 800456e:	6a1a      	ldr	r2, [r3, #32]
 8004570:	4b02      	ldr	r3, [pc, #8]	; (800457c <HAL_RCC_OscConfig+0x338>)
 8004572:	2101      	movs	r1, #1
 8004574:	430a      	orrs	r2, r1
 8004576:	621a      	str	r2, [r3, #32]
 8004578:	e036      	b.n	80045e8 <HAL_RCC_OscConfig+0x3a4>
 800457a:	46c0      	nop			; (mov r8, r8)
 800457c:	40021000 	.word	0x40021000
 8004580:	fffeffff 	.word	0xfffeffff
 8004584:	fffbffff 	.word	0xfffbffff
 8004588:	40007000 	.word	0x40007000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10c      	bne.n	80045ae <HAL_RCC_OscConfig+0x36a>
 8004594:	4bca      	ldr	r3, [pc, #808]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 8004596:	6a1a      	ldr	r2, [r3, #32]
 8004598:	4bc9      	ldr	r3, [pc, #804]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 800459a:	2101      	movs	r1, #1
 800459c:	438a      	bics	r2, r1
 800459e:	621a      	str	r2, [r3, #32]
 80045a0:	4bc7      	ldr	r3, [pc, #796]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 80045a2:	6a1a      	ldr	r2, [r3, #32]
 80045a4:	4bc6      	ldr	r3, [pc, #792]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 80045a6:	2104      	movs	r1, #4
 80045a8:	438a      	bics	r2, r1
 80045aa:	621a      	str	r2, [r3, #32]
 80045ac:	e01c      	b.n	80045e8 <HAL_RCC_OscConfig+0x3a4>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	2b05      	cmp	r3, #5
 80045b4:	d10c      	bne.n	80045d0 <HAL_RCC_OscConfig+0x38c>
 80045b6:	4bc2      	ldr	r3, [pc, #776]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 80045b8:	6a1a      	ldr	r2, [r3, #32]
 80045ba:	4bc1      	ldr	r3, [pc, #772]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 80045bc:	2104      	movs	r1, #4
 80045be:	430a      	orrs	r2, r1
 80045c0:	621a      	str	r2, [r3, #32]
 80045c2:	4bbf      	ldr	r3, [pc, #764]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 80045c4:	6a1a      	ldr	r2, [r3, #32]
 80045c6:	4bbe      	ldr	r3, [pc, #760]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 80045c8:	2101      	movs	r1, #1
 80045ca:	430a      	orrs	r2, r1
 80045cc:	621a      	str	r2, [r3, #32]
 80045ce:	e00b      	b.n	80045e8 <HAL_RCC_OscConfig+0x3a4>
 80045d0:	4bbb      	ldr	r3, [pc, #748]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 80045d2:	6a1a      	ldr	r2, [r3, #32]
 80045d4:	4bba      	ldr	r3, [pc, #744]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 80045d6:	2101      	movs	r1, #1
 80045d8:	438a      	bics	r2, r1
 80045da:	621a      	str	r2, [r3, #32]
 80045dc:	4bb8      	ldr	r3, [pc, #736]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 80045de:	6a1a      	ldr	r2, [r3, #32]
 80045e0:	4bb7      	ldr	r3, [pc, #732]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 80045e2:	2104      	movs	r1, #4
 80045e4:	438a      	bics	r2, r1
 80045e6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d014      	beq.n	800461a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045f0:	f7fe fa5c 	bl	8002aac <HAL_GetTick>
 80045f4:	0003      	movs	r3, r0
 80045f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f8:	e009      	b.n	800460e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045fa:	f7fe fa57 	bl	8002aac <HAL_GetTick>
 80045fe:	0002      	movs	r2, r0
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	4aaf      	ldr	r2, [pc, #700]	; (80048c4 <HAL_RCC_OscConfig+0x680>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e19a      	b.n	8004944 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800460e:	4bac      	ldr	r3, [pc, #688]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	2202      	movs	r2, #2
 8004614:	4013      	ands	r3, r2
 8004616:	d0f0      	beq.n	80045fa <HAL_RCC_OscConfig+0x3b6>
 8004618:	e013      	b.n	8004642 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800461a:	f7fe fa47 	bl	8002aac <HAL_GetTick>
 800461e:	0003      	movs	r3, r0
 8004620:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004622:	e009      	b.n	8004638 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004624:	f7fe fa42 	bl	8002aac <HAL_GetTick>
 8004628:	0002      	movs	r2, r0
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	4aa5      	ldr	r2, [pc, #660]	; (80048c4 <HAL_RCC_OscConfig+0x680>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d901      	bls.n	8004638 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e185      	b.n	8004944 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004638:	4ba1      	ldr	r3, [pc, #644]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	2202      	movs	r2, #2
 800463e:	4013      	ands	r3, r2
 8004640:	d1f0      	bne.n	8004624 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004642:	231f      	movs	r3, #31
 8004644:	18fb      	adds	r3, r7, r3
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d105      	bne.n	8004658 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800464c:	4b9c      	ldr	r3, [pc, #624]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 800464e:	69da      	ldr	r2, [r3, #28]
 8004650:	4b9b      	ldr	r3, [pc, #620]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 8004652:	499d      	ldr	r1, [pc, #628]	; (80048c8 <HAL_RCC_OscConfig+0x684>)
 8004654:	400a      	ands	r2, r1
 8004656:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2210      	movs	r2, #16
 800465e:	4013      	ands	r3, r2
 8004660:	d063      	beq.n	800472a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d12a      	bne.n	80046c0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800466a:	4b95      	ldr	r3, [pc, #596]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 800466c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800466e:	4b94      	ldr	r3, [pc, #592]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 8004670:	2104      	movs	r1, #4
 8004672:	430a      	orrs	r2, r1
 8004674:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004676:	4b92      	ldr	r3, [pc, #584]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 8004678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800467a:	4b91      	ldr	r3, [pc, #580]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 800467c:	2101      	movs	r1, #1
 800467e:	430a      	orrs	r2, r1
 8004680:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004682:	f7fe fa13 	bl	8002aac <HAL_GetTick>
 8004686:	0003      	movs	r3, r0
 8004688:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800468c:	f7fe fa0e 	bl	8002aac <HAL_GetTick>
 8004690:	0002      	movs	r2, r0
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e152      	b.n	8004944 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800469e:	4b88      	ldr	r3, [pc, #544]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 80046a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a2:	2202      	movs	r2, #2
 80046a4:	4013      	ands	r3, r2
 80046a6:	d0f1      	beq.n	800468c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80046a8:	4b85      	ldr	r3, [pc, #532]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 80046aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ac:	22f8      	movs	r2, #248	; 0xf8
 80046ae:	4393      	bics	r3, r2
 80046b0:	0019      	movs	r1, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	00da      	lsls	r2, r3, #3
 80046b8:	4b81      	ldr	r3, [pc, #516]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 80046ba:	430a      	orrs	r2, r1
 80046bc:	635a      	str	r2, [r3, #52]	; 0x34
 80046be:	e034      	b.n	800472a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	3305      	adds	r3, #5
 80046c6:	d111      	bne.n	80046ec <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80046c8:	4b7d      	ldr	r3, [pc, #500]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 80046ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046cc:	4b7c      	ldr	r3, [pc, #496]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 80046ce:	2104      	movs	r1, #4
 80046d0:	438a      	bics	r2, r1
 80046d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80046d4:	4b7a      	ldr	r3, [pc, #488]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 80046d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d8:	22f8      	movs	r2, #248	; 0xf8
 80046da:	4393      	bics	r3, r2
 80046dc:	0019      	movs	r1, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	00da      	lsls	r2, r3, #3
 80046e4:	4b76      	ldr	r3, [pc, #472]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 80046e6:	430a      	orrs	r2, r1
 80046e8:	635a      	str	r2, [r3, #52]	; 0x34
 80046ea:	e01e      	b.n	800472a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80046ec:	4b74      	ldr	r3, [pc, #464]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 80046ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046f0:	4b73      	ldr	r3, [pc, #460]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 80046f2:	2104      	movs	r1, #4
 80046f4:	430a      	orrs	r2, r1
 80046f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80046f8:	4b71      	ldr	r3, [pc, #452]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 80046fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046fc:	4b70      	ldr	r3, [pc, #448]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 80046fe:	2101      	movs	r1, #1
 8004700:	438a      	bics	r2, r1
 8004702:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004704:	f7fe f9d2 	bl	8002aac <HAL_GetTick>
 8004708:	0003      	movs	r3, r0
 800470a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800470c:	e008      	b.n	8004720 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800470e:	f7fe f9cd 	bl	8002aac <HAL_GetTick>
 8004712:	0002      	movs	r2, r0
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b02      	cmp	r3, #2
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e111      	b.n	8004944 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004720:	4b67      	ldr	r3, [pc, #412]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 8004722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004724:	2202      	movs	r2, #2
 8004726:	4013      	ands	r3, r2
 8004728:	d1f1      	bne.n	800470e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2220      	movs	r2, #32
 8004730:	4013      	ands	r3, r2
 8004732:	d05c      	beq.n	80047ee <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004734:	4b62      	ldr	r3, [pc, #392]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	220c      	movs	r2, #12
 800473a:	4013      	ands	r3, r2
 800473c:	2b0c      	cmp	r3, #12
 800473e:	d00e      	beq.n	800475e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004740:	4b5f      	ldr	r3, [pc, #380]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	220c      	movs	r2, #12
 8004746:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004748:	2b08      	cmp	r3, #8
 800474a:	d114      	bne.n	8004776 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800474c:	4b5c      	ldr	r3, [pc, #368]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	23c0      	movs	r3, #192	; 0xc0
 8004752:	025b      	lsls	r3, r3, #9
 8004754:	401a      	ands	r2, r3
 8004756:	23c0      	movs	r3, #192	; 0xc0
 8004758:	025b      	lsls	r3, r3, #9
 800475a:	429a      	cmp	r2, r3
 800475c:	d10b      	bne.n	8004776 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800475e:	4b58      	ldr	r3, [pc, #352]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 8004760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004762:	2380      	movs	r3, #128	; 0x80
 8004764:	029b      	lsls	r3, r3, #10
 8004766:	4013      	ands	r3, r2
 8004768:	d040      	beq.n	80047ec <HAL_RCC_OscConfig+0x5a8>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d03c      	beq.n	80047ec <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e0e6      	b.n	8004944 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d01b      	beq.n	80047b6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800477e:	4b50      	ldr	r3, [pc, #320]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 8004780:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004782:	4b4f      	ldr	r3, [pc, #316]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 8004784:	2180      	movs	r1, #128	; 0x80
 8004786:	0249      	lsls	r1, r1, #9
 8004788:	430a      	orrs	r2, r1
 800478a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478c:	f7fe f98e 	bl	8002aac <HAL_GetTick>
 8004790:	0003      	movs	r3, r0
 8004792:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004794:	e008      	b.n	80047a8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004796:	f7fe f989 	bl	8002aac <HAL_GetTick>
 800479a:	0002      	movs	r2, r0
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d901      	bls.n	80047a8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e0cd      	b.n	8004944 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80047a8:	4b45      	ldr	r3, [pc, #276]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 80047aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ac:	2380      	movs	r3, #128	; 0x80
 80047ae:	029b      	lsls	r3, r3, #10
 80047b0:	4013      	ands	r3, r2
 80047b2:	d0f0      	beq.n	8004796 <HAL_RCC_OscConfig+0x552>
 80047b4:	e01b      	b.n	80047ee <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80047b6:	4b42      	ldr	r3, [pc, #264]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 80047b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ba:	4b41      	ldr	r3, [pc, #260]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 80047bc:	4943      	ldr	r1, [pc, #268]	; (80048cc <HAL_RCC_OscConfig+0x688>)
 80047be:	400a      	ands	r2, r1
 80047c0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c2:	f7fe f973 	bl	8002aac <HAL_GetTick>
 80047c6:	0003      	movs	r3, r0
 80047c8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80047ca:	e008      	b.n	80047de <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047cc:	f7fe f96e 	bl	8002aac <HAL_GetTick>
 80047d0:	0002      	movs	r2, r0
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e0b2      	b.n	8004944 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80047de:	4b38      	ldr	r3, [pc, #224]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 80047e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047e2:	2380      	movs	r3, #128	; 0x80
 80047e4:	029b      	lsls	r3, r3, #10
 80047e6:	4013      	ands	r3, r2
 80047e8:	d1f0      	bne.n	80047cc <HAL_RCC_OscConfig+0x588>
 80047ea:	e000      	b.n	80047ee <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80047ec:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d100      	bne.n	80047f8 <HAL_RCC_OscConfig+0x5b4>
 80047f6:	e0a4      	b.n	8004942 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047f8:	4b31      	ldr	r3, [pc, #196]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	220c      	movs	r2, #12
 80047fe:	4013      	ands	r3, r2
 8004800:	2b08      	cmp	r3, #8
 8004802:	d100      	bne.n	8004806 <HAL_RCC_OscConfig+0x5c2>
 8004804:	e078      	b.n	80048f8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480a:	2b02      	cmp	r3, #2
 800480c:	d14c      	bne.n	80048a8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800480e:	4b2c      	ldr	r3, [pc, #176]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	4b2b      	ldr	r3, [pc, #172]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 8004814:	492e      	ldr	r1, [pc, #184]	; (80048d0 <HAL_RCC_OscConfig+0x68c>)
 8004816:	400a      	ands	r2, r1
 8004818:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800481a:	f7fe f947 	bl	8002aac <HAL_GetTick>
 800481e:	0003      	movs	r3, r0
 8004820:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004822:	e008      	b.n	8004836 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004824:	f7fe f942 	bl	8002aac <HAL_GetTick>
 8004828:	0002      	movs	r2, r0
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e086      	b.n	8004944 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004836:	4b22      	ldr	r3, [pc, #136]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	2380      	movs	r3, #128	; 0x80
 800483c:	049b      	lsls	r3, r3, #18
 800483e:	4013      	ands	r3, r2
 8004840:	d1f0      	bne.n	8004824 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004842:	4b1f      	ldr	r3, [pc, #124]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 8004844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004846:	220f      	movs	r2, #15
 8004848:	4393      	bics	r3, r2
 800484a:	0019      	movs	r1, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004850:	4b1b      	ldr	r3, [pc, #108]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 8004852:	430a      	orrs	r2, r1
 8004854:	62da      	str	r2, [r3, #44]	; 0x2c
 8004856:	4b1a      	ldr	r3, [pc, #104]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	4a1e      	ldr	r2, [pc, #120]	; (80048d4 <HAL_RCC_OscConfig+0x690>)
 800485c:	4013      	ands	r3, r2
 800485e:	0019      	movs	r1, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004868:	431a      	orrs	r2, r3
 800486a:	4b15      	ldr	r3, [pc, #84]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 800486c:	430a      	orrs	r2, r1
 800486e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004870:	4b13      	ldr	r3, [pc, #76]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	4b12      	ldr	r3, [pc, #72]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 8004876:	2180      	movs	r1, #128	; 0x80
 8004878:	0449      	lsls	r1, r1, #17
 800487a:	430a      	orrs	r2, r1
 800487c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800487e:	f7fe f915 	bl	8002aac <HAL_GetTick>
 8004882:	0003      	movs	r3, r0
 8004884:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004886:	e008      	b.n	800489a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004888:	f7fe f910 	bl	8002aac <HAL_GetTick>
 800488c:	0002      	movs	r2, r0
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b02      	cmp	r3, #2
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e054      	b.n	8004944 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800489a:	4b09      	ldr	r3, [pc, #36]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	2380      	movs	r3, #128	; 0x80
 80048a0:	049b      	lsls	r3, r3, #18
 80048a2:	4013      	ands	r3, r2
 80048a4:	d0f0      	beq.n	8004888 <HAL_RCC_OscConfig+0x644>
 80048a6:	e04c      	b.n	8004942 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048a8:	4b05      	ldr	r3, [pc, #20]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	4b04      	ldr	r3, [pc, #16]	; (80048c0 <HAL_RCC_OscConfig+0x67c>)
 80048ae:	4908      	ldr	r1, [pc, #32]	; (80048d0 <HAL_RCC_OscConfig+0x68c>)
 80048b0:	400a      	ands	r2, r1
 80048b2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b4:	f7fe f8fa 	bl	8002aac <HAL_GetTick>
 80048b8:	0003      	movs	r3, r0
 80048ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048bc:	e015      	b.n	80048ea <HAL_RCC_OscConfig+0x6a6>
 80048be:	46c0      	nop			; (mov r8, r8)
 80048c0:	40021000 	.word	0x40021000
 80048c4:	00001388 	.word	0x00001388
 80048c8:	efffffff 	.word	0xefffffff
 80048cc:	fffeffff 	.word	0xfffeffff
 80048d0:	feffffff 	.word	0xfeffffff
 80048d4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048d8:	f7fe f8e8 	bl	8002aac <HAL_GetTick>
 80048dc:	0002      	movs	r2, r0
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e02c      	b.n	8004944 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048ea:	4b18      	ldr	r3, [pc, #96]	; (800494c <HAL_RCC_OscConfig+0x708>)
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	2380      	movs	r3, #128	; 0x80
 80048f0:	049b      	lsls	r3, r3, #18
 80048f2:	4013      	ands	r3, r2
 80048f4:	d1f0      	bne.n	80048d8 <HAL_RCC_OscConfig+0x694>
 80048f6:	e024      	b.n	8004942 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d101      	bne.n	8004904 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e01f      	b.n	8004944 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004904:	4b11      	ldr	r3, [pc, #68]	; (800494c <HAL_RCC_OscConfig+0x708>)
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800490a:	4b10      	ldr	r3, [pc, #64]	; (800494c <HAL_RCC_OscConfig+0x708>)
 800490c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	23c0      	movs	r3, #192	; 0xc0
 8004914:	025b      	lsls	r3, r3, #9
 8004916:	401a      	ands	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491c:	429a      	cmp	r2, r3
 800491e:	d10e      	bne.n	800493e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	220f      	movs	r2, #15
 8004924:	401a      	ands	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800492a:	429a      	cmp	r2, r3
 800492c:	d107      	bne.n	800493e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	23f0      	movs	r3, #240	; 0xf0
 8004932:	039b      	lsls	r3, r3, #14
 8004934:	401a      	ands	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800493a:	429a      	cmp	r2, r3
 800493c:	d001      	beq.n	8004942 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e000      	b.n	8004944 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	0018      	movs	r0, r3
 8004946:	46bd      	mov	sp, r7
 8004948:	b008      	add	sp, #32
 800494a:	bd80      	pop	{r7, pc}
 800494c:	40021000 	.word	0x40021000

08004950 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d101      	bne.n	8004964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e0bf      	b.n	8004ae4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004964:	4b61      	ldr	r3, [pc, #388]	; (8004aec <HAL_RCC_ClockConfig+0x19c>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2201      	movs	r2, #1
 800496a:	4013      	ands	r3, r2
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	429a      	cmp	r2, r3
 8004970:	d911      	bls.n	8004996 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004972:	4b5e      	ldr	r3, [pc, #376]	; (8004aec <HAL_RCC_ClockConfig+0x19c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2201      	movs	r2, #1
 8004978:	4393      	bics	r3, r2
 800497a:	0019      	movs	r1, r3
 800497c:	4b5b      	ldr	r3, [pc, #364]	; (8004aec <HAL_RCC_ClockConfig+0x19c>)
 800497e:	683a      	ldr	r2, [r7, #0]
 8004980:	430a      	orrs	r2, r1
 8004982:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004984:	4b59      	ldr	r3, [pc, #356]	; (8004aec <HAL_RCC_ClockConfig+0x19c>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2201      	movs	r2, #1
 800498a:	4013      	ands	r3, r2
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	429a      	cmp	r2, r3
 8004990:	d001      	beq.n	8004996 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e0a6      	b.n	8004ae4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2202      	movs	r2, #2
 800499c:	4013      	ands	r3, r2
 800499e:	d015      	beq.n	80049cc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2204      	movs	r2, #4
 80049a6:	4013      	ands	r3, r2
 80049a8:	d006      	beq.n	80049b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80049aa:	4b51      	ldr	r3, [pc, #324]	; (8004af0 <HAL_RCC_ClockConfig+0x1a0>)
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	4b50      	ldr	r3, [pc, #320]	; (8004af0 <HAL_RCC_ClockConfig+0x1a0>)
 80049b0:	21e0      	movs	r1, #224	; 0xe0
 80049b2:	00c9      	lsls	r1, r1, #3
 80049b4:	430a      	orrs	r2, r1
 80049b6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049b8:	4b4d      	ldr	r3, [pc, #308]	; (8004af0 <HAL_RCC_ClockConfig+0x1a0>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	22f0      	movs	r2, #240	; 0xf0
 80049be:	4393      	bics	r3, r2
 80049c0:	0019      	movs	r1, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689a      	ldr	r2, [r3, #8]
 80049c6:	4b4a      	ldr	r3, [pc, #296]	; (8004af0 <HAL_RCC_ClockConfig+0x1a0>)
 80049c8:	430a      	orrs	r2, r1
 80049ca:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2201      	movs	r2, #1
 80049d2:	4013      	ands	r3, r2
 80049d4:	d04c      	beq.n	8004a70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d107      	bne.n	80049ee <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049de:	4b44      	ldr	r3, [pc, #272]	; (8004af0 <HAL_RCC_ClockConfig+0x1a0>)
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	2380      	movs	r3, #128	; 0x80
 80049e4:	029b      	lsls	r3, r3, #10
 80049e6:	4013      	ands	r3, r2
 80049e8:	d120      	bne.n	8004a2c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e07a      	b.n	8004ae4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d107      	bne.n	8004a06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049f6:	4b3e      	ldr	r3, [pc, #248]	; (8004af0 <HAL_RCC_ClockConfig+0x1a0>)
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	2380      	movs	r3, #128	; 0x80
 80049fc:	049b      	lsls	r3, r3, #18
 80049fe:	4013      	ands	r3, r2
 8004a00:	d114      	bne.n	8004a2c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e06e      	b.n	8004ae4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2b03      	cmp	r3, #3
 8004a0c:	d107      	bne.n	8004a1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004a0e:	4b38      	ldr	r3, [pc, #224]	; (8004af0 <HAL_RCC_ClockConfig+0x1a0>)
 8004a10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a12:	2380      	movs	r3, #128	; 0x80
 8004a14:	029b      	lsls	r3, r3, #10
 8004a16:	4013      	ands	r3, r2
 8004a18:	d108      	bne.n	8004a2c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e062      	b.n	8004ae4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a1e:	4b34      	ldr	r3, [pc, #208]	; (8004af0 <HAL_RCC_ClockConfig+0x1a0>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2202      	movs	r2, #2
 8004a24:	4013      	ands	r3, r2
 8004a26:	d101      	bne.n	8004a2c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e05b      	b.n	8004ae4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a2c:	4b30      	ldr	r3, [pc, #192]	; (8004af0 <HAL_RCC_ClockConfig+0x1a0>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	2203      	movs	r2, #3
 8004a32:	4393      	bics	r3, r2
 8004a34:	0019      	movs	r1, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	4b2d      	ldr	r3, [pc, #180]	; (8004af0 <HAL_RCC_ClockConfig+0x1a0>)
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a40:	f7fe f834 	bl	8002aac <HAL_GetTick>
 8004a44:	0003      	movs	r3, r0
 8004a46:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a48:	e009      	b.n	8004a5e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a4a:	f7fe f82f 	bl	8002aac <HAL_GetTick>
 8004a4e:	0002      	movs	r2, r0
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	4a27      	ldr	r2, [pc, #156]	; (8004af4 <HAL_RCC_ClockConfig+0x1a4>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e042      	b.n	8004ae4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a5e:	4b24      	ldr	r3, [pc, #144]	; (8004af0 <HAL_RCC_ClockConfig+0x1a0>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	220c      	movs	r2, #12
 8004a64:	401a      	ands	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d1ec      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a70:	4b1e      	ldr	r3, [pc, #120]	; (8004aec <HAL_RCC_ClockConfig+0x19c>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2201      	movs	r2, #1
 8004a76:	4013      	ands	r3, r2
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d211      	bcs.n	8004aa2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a7e:	4b1b      	ldr	r3, [pc, #108]	; (8004aec <HAL_RCC_ClockConfig+0x19c>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2201      	movs	r2, #1
 8004a84:	4393      	bics	r3, r2
 8004a86:	0019      	movs	r1, r3
 8004a88:	4b18      	ldr	r3, [pc, #96]	; (8004aec <HAL_RCC_ClockConfig+0x19c>)
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a90:	4b16      	ldr	r3, [pc, #88]	; (8004aec <HAL_RCC_ClockConfig+0x19c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2201      	movs	r2, #1
 8004a96:	4013      	ands	r3, r2
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d001      	beq.n	8004aa2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e020      	b.n	8004ae4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2204      	movs	r2, #4
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	d009      	beq.n	8004ac0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004aac:	4b10      	ldr	r3, [pc, #64]	; (8004af0 <HAL_RCC_ClockConfig+0x1a0>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	4a11      	ldr	r2, [pc, #68]	; (8004af8 <HAL_RCC_ClockConfig+0x1a8>)
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	0019      	movs	r1, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	4b0d      	ldr	r3, [pc, #52]	; (8004af0 <HAL_RCC_ClockConfig+0x1a0>)
 8004abc:	430a      	orrs	r2, r1
 8004abe:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004ac0:	f000 f820 	bl	8004b04 <HAL_RCC_GetSysClockFreq>
 8004ac4:	0001      	movs	r1, r0
 8004ac6:	4b0a      	ldr	r3, [pc, #40]	; (8004af0 <HAL_RCC_ClockConfig+0x1a0>)
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	091b      	lsrs	r3, r3, #4
 8004acc:	220f      	movs	r2, #15
 8004ace:	4013      	ands	r3, r2
 8004ad0:	4a0a      	ldr	r2, [pc, #40]	; (8004afc <HAL_RCC_ClockConfig+0x1ac>)
 8004ad2:	5cd3      	ldrb	r3, [r2, r3]
 8004ad4:	000a      	movs	r2, r1
 8004ad6:	40da      	lsrs	r2, r3
 8004ad8:	4b09      	ldr	r3, [pc, #36]	; (8004b00 <HAL_RCC_ClockConfig+0x1b0>)
 8004ada:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004adc:	2003      	movs	r0, #3
 8004ade:	f7fd ff9f 	bl	8002a20 <HAL_InitTick>
  
  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	b004      	add	sp, #16
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	40022000 	.word	0x40022000
 8004af0:	40021000 	.word	0x40021000
 8004af4:	00001388 	.word	0x00001388
 8004af8:	fffff8ff 	.word	0xfffff8ff
 8004afc:	08007034 	.word	0x08007034
 8004b00:	20000040 	.word	0x20000040

08004b04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60bb      	str	r3, [r7, #8]
 8004b12:	2300      	movs	r3, #0
 8004b14:	617b      	str	r3, [r7, #20]
 8004b16:	2300      	movs	r3, #0
 8004b18:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004b1e:	4b2d      	ldr	r3, [pc, #180]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	220c      	movs	r2, #12
 8004b28:	4013      	ands	r3, r2
 8004b2a:	2b0c      	cmp	r3, #12
 8004b2c:	d046      	beq.n	8004bbc <HAL_RCC_GetSysClockFreq+0xb8>
 8004b2e:	d848      	bhi.n	8004bc2 <HAL_RCC_GetSysClockFreq+0xbe>
 8004b30:	2b04      	cmp	r3, #4
 8004b32:	d002      	beq.n	8004b3a <HAL_RCC_GetSysClockFreq+0x36>
 8004b34:	2b08      	cmp	r3, #8
 8004b36:	d003      	beq.n	8004b40 <HAL_RCC_GetSysClockFreq+0x3c>
 8004b38:	e043      	b.n	8004bc2 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b3a:	4b27      	ldr	r3, [pc, #156]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004b3c:	613b      	str	r3, [r7, #16]
      break;
 8004b3e:	e043      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	0c9b      	lsrs	r3, r3, #18
 8004b44:	220f      	movs	r2, #15
 8004b46:	4013      	ands	r3, r2
 8004b48:	4a24      	ldr	r2, [pc, #144]	; (8004bdc <HAL_RCC_GetSysClockFreq+0xd8>)
 8004b4a:	5cd3      	ldrb	r3, [r2, r3]
 8004b4c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004b4e:	4b21      	ldr	r3, [pc, #132]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b52:	220f      	movs	r2, #15
 8004b54:	4013      	ands	r3, r2
 8004b56:	4a22      	ldr	r2, [pc, #136]	; (8004be0 <HAL_RCC_GetSysClockFreq+0xdc>)
 8004b58:	5cd3      	ldrb	r3, [r2, r3]
 8004b5a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	23c0      	movs	r3, #192	; 0xc0
 8004b60:	025b      	lsls	r3, r3, #9
 8004b62:	401a      	ands	r2, r3
 8004b64:	2380      	movs	r3, #128	; 0x80
 8004b66:	025b      	lsls	r3, r3, #9
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d109      	bne.n	8004b80 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004b6c:	68b9      	ldr	r1, [r7, #8]
 8004b6e:	481a      	ldr	r0, [pc, #104]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004b70:	f7fb fadc 	bl	800012c <__udivsi3>
 8004b74:	0003      	movs	r3, r0
 8004b76:	001a      	movs	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4353      	muls	r3, r2
 8004b7c:	617b      	str	r3, [r7, #20]
 8004b7e:	e01a      	b.n	8004bb6 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	23c0      	movs	r3, #192	; 0xc0
 8004b84:	025b      	lsls	r3, r3, #9
 8004b86:	401a      	ands	r2, r3
 8004b88:	23c0      	movs	r3, #192	; 0xc0
 8004b8a:	025b      	lsls	r3, r3, #9
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d109      	bne.n	8004ba4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004b90:	68b9      	ldr	r1, [r7, #8]
 8004b92:	4814      	ldr	r0, [pc, #80]	; (8004be4 <HAL_RCC_GetSysClockFreq+0xe0>)
 8004b94:	f7fb faca 	bl	800012c <__udivsi3>
 8004b98:	0003      	movs	r3, r0
 8004b9a:	001a      	movs	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4353      	muls	r3, r2
 8004ba0:	617b      	str	r3, [r7, #20]
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004ba4:	68b9      	ldr	r1, [r7, #8]
 8004ba6:	480c      	ldr	r0, [pc, #48]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004ba8:	f7fb fac0 	bl	800012c <__udivsi3>
 8004bac:	0003      	movs	r3, r0
 8004bae:	001a      	movs	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4353      	muls	r3, r2
 8004bb4:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	613b      	str	r3, [r7, #16]
      break;
 8004bba:	e005      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004bbc:	4b09      	ldr	r3, [pc, #36]	; (8004be4 <HAL_RCC_GetSysClockFreq+0xe0>)
 8004bbe:	613b      	str	r3, [r7, #16]
      break;
 8004bc0:	e002      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004bc2:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004bc4:	613b      	str	r3, [r7, #16]
      break;
 8004bc6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004bc8:	693b      	ldr	r3, [r7, #16]
}
 8004bca:	0018      	movs	r0, r3
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	b006      	add	sp, #24
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	46c0      	nop			; (mov r8, r8)
 8004bd4:	40021000 	.word	0x40021000
 8004bd8:	007a1200 	.word	0x007a1200
 8004bdc:	0800704c 	.word	0x0800704c
 8004be0:	0800705c 	.word	0x0800705c
 8004be4:	02dc6c00 	.word	0x02dc6c00

08004be8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bec:	4b02      	ldr	r3, [pc, #8]	; (8004bf8 <HAL_RCC_GetHCLKFreq+0x10>)
 8004bee:	681b      	ldr	r3, [r3, #0]
}
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	46c0      	nop			; (mov r8, r8)
 8004bf8:	20000040 	.word	0x20000040

08004bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004c00:	f7ff fff2 	bl	8004be8 <HAL_RCC_GetHCLKFreq>
 8004c04:	0001      	movs	r1, r0
 8004c06:	4b06      	ldr	r3, [pc, #24]	; (8004c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	0a1b      	lsrs	r3, r3, #8
 8004c0c:	2207      	movs	r2, #7
 8004c0e:	4013      	ands	r3, r2
 8004c10:	4a04      	ldr	r2, [pc, #16]	; (8004c24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c12:	5cd3      	ldrb	r3, [r2, r3]
 8004c14:	40d9      	lsrs	r1, r3
 8004c16:	000b      	movs	r3, r1
}    
 8004c18:	0018      	movs	r0, r3
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	46c0      	nop			; (mov r8, r8)
 8004c20:	40021000 	.word	0x40021000
 8004c24:	08007044 	.word	0x08007044

08004c28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004c34:	2300      	movs	r3, #0
 8004c36:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	2380      	movs	r3, #128	; 0x80
 8004c3e:	025b      	lsls	r3, r3, #9
 8004c40:	4013      	ands	r3, r2
 8004c42:	d100      	bne.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004c44:	e08e      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004c46:	2017      	movs	r0, #23
 8004c48:	183b      	adds	r3, r7, r0
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c4e:	4b6e      	ldr	r3, [pc, #440]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c50:	69da      	ldr	r2, [r3, #28]
 8004c52:	2380      	movs	r3, #128	; 0x80
 8004c54:	055b      	lsls	r3, r3, #21
 8004c56:	4013      	ands	r3, r2
 8004c58:	d110      	bne.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c5a:	4b6b      	ldr	r3, [pc, #428]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c5c:	69da      	ldr	r2, [r3, #28]
 8004c5e:	4b6a      	ldr	r3, [pc, #424]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c60:	2180      	movs	r1, #128	; 0x80
 8004c62:	0549      	lsls	r1, r1, #21
 8004c64:	430a      	orrs	r2, r1
 8004c66:	61da      	str	r2, [r3, #28]
 8004c68:	4b67      	ldr	r3, [pc, #412]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c6a:	69da      	ldr	r2, [r3, #28]
 8004c6c:	2380      	movs	r3, #128	; 0x80
 8004c6e:	055b      	lsls	r3, r3, #21
 8004c70:	4013      	ands	r3, r2
 8004c72:	60bb      	str	r3, [r7, #8]
 8004c74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c76:	183b      	adds	r3, r7, r0
 8004c78:	2201      	movs	r2, #1
 8004c7a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c7c:	4b63      	ldr	r3, [pc, #396]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	2380      	movs	r3, #128	; 0x80
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	4013      	ands	r3, r2
 8004c86:	d11a      	bne.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c88:	4b60      	ldr	r3, [pc, #384]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	4b5f      	ldr	r3, [pc, #380]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004c8e:	2180      	movs	r1, #128	; 0x80
 8004c90:	0049      	lsls	r1, r1, #1
 8004c92:	430a      	orrs	r2, r1
 8004c94:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c96:	f7fd ff09 	bl	8002aac <HAL_GetTick>
 8004c9a:	0003      	movs	r3, r0
 8004c9c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ca0:	f7fd ff04 	bl	8002aac <HAL_GetTick>
 8004ca4:	0002      	movs	r2, r0
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b64      	cmp	r3, #100	; 0x64
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e0a6      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb2:	4b56      	ldr	r3, [pc, #344]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	2380      	movs	r3, #128	; 0x80
 8004cb8:	005b      	lsls	r3, r3, #1
 8004cba:	4013      	ands	r3, r2
 8004cbc:	d0f0      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cbe:	4b52      	ldr	r3, [pc, #328]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004cc0:	6a1a      	ldr	r2, [r3, #32]
 8004cc2:	23c0      	movs	r3, #192	; 0xc0
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d034      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	23c0      	movs	r3, #192	; 0xc0
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4013      	ands	r3, r2
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d02c      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ce0:	4b49      	ldr	r3, [pc, #292]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ce2:	6a1b      	ldr	r3, [r3, #32]
 8004ce4:	4a4a      	ldr	r2, [pc, #296]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cea:	4b47      	ldr	r3, [pc, #284]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004cec:	6a1a      	ldr	r2, [r3, #32]
 8004cee:	4b46      	ldr	r3, [pc, #280]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004cf0:	2180      	movs	r1, #128	; 0x80
 8004cf2:	0249      	lsls	r1, r1, #9
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cf8:	4b43      	ldr	r3, [pc, #268]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004cfa:	6a1a      	ldr	r2, [r3, #32]
 8004cfc:	4b42      	ldr	r3, [pc, #264]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004cfe:	4945      	ldr	r1, [pc, #276]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004d00:	400a      	ands	r2, r1
 8004d02:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d04:	4b40      	ldr	r3, [pc, #256]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	4013      	ands	r3, r2
 8004d10:	d013      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d12:	f7fd fecb 	bl	8002aac <HAL_GetTick>
 8004d16:	0003      	movs	r3, r0
 8004d18:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d1a:	e009      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d1c:	f7fd fec6 	bl	8002aac <HAL_GetTick>
 8004d20:	0002      	movs	r2, r0
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	4a3c      	ldr	r2, [pc, #240]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d901      	bls.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e067      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d30:	4b35      	ldr	r3, [pc, #212]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	2202      	movs	r2, #2
 8004d36:	4013      	ands	r3, r2
 8004d38:	d0f0      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d3a:	4b33      	ldr	r3, [pc, #204]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	4a34      	ldr	r2, [pc, #208]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004d40:	4013      	ands	r3, r2
 8004d42:	0019      	movs	r1, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	4b2f      	ldr	r3, [pc, #188]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004d4e:	2317      	movs	r3, #23
 8004d50:	18fb      	adds	r3, r7, r3
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d105      	bne.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d58:	4b2b      	ldr	r3, [pc, #172]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d5a:	69da      	ldr	r2, [r3, #28]
 8004d5c:	4b2a      	ldr	r3, [pc, #168]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d5e:	492f      	ldr	r1, [pc, #188]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004d60:	400a      	ands	r2, r1
 8004d62:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	d009      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d6e:	4b26      	ldr	r3, [pc, #152]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d72:	2203      	movs	r2, #3
 8004d74:	4393      	bics	r3, r2
 8004d76:	0019      	movs	r1, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689a      	ldr	r2, [r3, #8]
 8004d7c:	4b22      	ldr	r3, [pc, #136]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2202      	movs	r2, #2
 8004d88:	4013      	ands	r3, r2
 8004d8a:	d009      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d8c:	4b1e      	ldr	r3, [pc, #120]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d90:	4a23      	ldr	r2, [pc, #140]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d92:	4013      	ands	r3, r2
 8004d94:	0019      	movs	r1, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	68da      	ldr	r2, [r3, #12]
 8004d9a:	4b1b      	ldr	r3, [pc, #108]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2220      	movs	r2, #32
 8004da6:	4013      	ands	r3, r2
 8004da8:	d009      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004daa:	4b17      	ldr	r3, [pc, #92]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dae:	2210      	movs	r2, #16
 8004db0:	4393      	bics	r3, r2
 8004db2:	0019      	movs	r1, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	691a      	ldr	r2, [r3, #16]
 8004db8:	4b13      	ldr	r3, [pc, #76]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	2380      	movs	r3, #128	; 0x80
 8004dc4:	029b      	lsls	r3, r3, #10
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	d009      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004dca:	4b0f      	ldr	r3, [pc, #60]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dce:	2280      	movs	r2, #128	; 0x80
 8004dd0:	4393      	bics	r3, r2
 8004dd2:	0019      	movs	r1, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	699a      	ldr	r2, [r3, #24]
 8004dd8:	4b0b      	ldr	r3, [pc, #44]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	2380      	movs	r3, #128	; 0x80
 8004de4:	00db      	lsls	r3, r3, #3
 8004de6:	4013      	ands	r3, r2
 8004de8:	d009      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004dea:	4b07      	ldr	r3, [pc, #28]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dee:	2240      	movs	r2, #64	; 0x40
 8004df0:	4393      	bics	r3, r2
 8004df2:	0019      	movs	r1, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	695a      	ldr	r2, [r3, #20]
 8004df8:	4b03      	ldr	r3, [pc, #12]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	0018      	movs	r0, r3
 8004e02:	46bd      	mov	sp, r7
 8004e04:	b006      	add	sp, #24
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	40021000 	.word	0x40021000
 8004e0c:	40007000 	.word	0x40007000
 8004e10:	fffffcff 	.word	0xfffffcff
 8004e14:	fffeffff 	.word	0xfffeffff
 8004e18:	00001388 	.word	0x00001388
 8004e1c:	efffffff 	.word	0xefffffff
 8004e20:	fffcffff 	.word	0xfffcffff

08004e24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e042      	b.n	8004ebc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	223d      	movs	r2, #61	; 0x3d
 8004e3a:	5c9b      	ldrb	r3, [r3, r2]
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d107      	bne.n	8004e52 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	223c      	movs	r2, #60	; 0x3c
 8004e46:	2100      	movs	r1, #0
 8004e48:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	0018      	movs	r0, r3
 8004e4e:	f7fd fc7f 	bl	8002750 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	223d      	movs	r2, #61	; 0x3d
 8004e56:	2102      	movs	r1, #2
 8004e58:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	3304      	adds	r3, #4
 8004e62:	0019      	movs	r1, r3
 8004e64:	0010      	movs	r0, r2
 8004e66:	f000 faf5 	bl	8005454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2246      	movs	r2, #70	; 0x46
 8004e6e:	2101      	movs	r1, #1
 8004e70:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	223e      	movs	r2, #62	; 0x3e
 8004e76:	2101      	movs	r1, #1
 8004e78:	5499      	strb	r1, [r3, r2]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	223f      	movs	r2, #63	; 0x3f
 8004e7e:	2101      	movs	r1, #1
 8004e80:	5499      	strb	r1, [r3, r2]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2240      	movs	r2, #64	; 0x40
 8004e86:	2101      	movs	r1, #1
 8004e88:	5499      	strb	r1, [r3, r2]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2241      	movs	r2, #65	; 0x41
 8004e8e:	2101      	movs	r1, #1
 8004e90:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2242      	movs	r2, #66	; 0x42
 8004e96:	2101      	movs	r1, #1
 8004e98:	5499      	strb	r1, [r3, r2]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2243      	movs	r2, #67	; 0x43
 8004e9e:	2101      	movs	r1, #1
 8004ea0:	5499      	strb	r1, [r3, r2]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2244      	movs	r2, #68	; 0x44
 8004ea6:	2101      	movs	r1, #1
 8004ea8:	5499      	strb	r1, [r3, r2]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2245      	movs	r2, #69	; 0x45
 8004eae:	2101      	movs	r1, #1
 8004eb0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	223d      	movs	r2, #61	; 0x3d
 8004eb6:	2101      	movs	r1, #1
 8004eb8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	b002      	add	sp, #8
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68da      	ldr	r2, [r3, #12]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2101      	movs	r1, #1
 8004ed8:	438a      	bics	r2, r1
 8004eda:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	4a0d      	ldr	r2, [pc, #52]	; (8004f18 <HAL_TIM_Base_Stop_IT+0x54>)
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	d10d      	bne.n	8004f04 <HAL_TIM_Base_Stop_IT+0x40>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	4a0b      	ldr	r2, [pc, #44]	; (8004f1c <HAL_TIM_Base_Stop_IT+0x58>)
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	d107      	bne.n	8004f04 <HAL_TIM_Base_Stop_IT+0x40>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2101      	movs	r1, #1
 8004f00:	438a      	bics	r2, r1
 8004f02:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	223d      	movs	r2, #61	; 0x3d
 8004f08:	2101      	movs	r1, #1
 8004f0a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	0018      	movs	r0, r3
 8004f10:	46bd      	mov	sp, r7
 8004f12:	b002      	add	sp, #8
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	46c0      	nop			; (mov r8, r8)
 8004f18:	00001111 	.word	0x00001111
 8004f1c:	00000444 	.word	0x00000444

08004f20 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d101      	bne.n	8004f34 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e090      	b.n	8005056 <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	223d      	movs	r2, #61	; 0x3d
 8004f38:	5c9b      	ldrb	r3, [r3, r2]
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d107      	bne.n	8004f50 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	223c      	movs	r2, #60	; 0x3c
 8004f44:	2100      	movs	r1, #0
 8004f46:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	0018      	movs	r0, r3
 8004f4c:	f7fd fbac 	bl	80026a8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	223d      	movs	r2, #61	; 0x3d
 8004f54:	2102      	movs	r1, #2
 8004f56:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689a      	ldr	r2, [r3, #8]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	493f      	ldr	r1, [pc, #252]	; (8005060 <HAL_TIM_Encoder_Init+0x140>)
 8004f64:	400a      	ands	r2, r1
 8004f66:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3304      	adds	r3, #4
 8004f70:	0019      	movs	r1, r3
 8004f72:	0010      	movs	r0, r2
 8004f74:	f000 fa6e 	bl	8005454 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	4a31      	ldr	r2, [pc, #196]	; (8005064 <HAL_TIM_Encoder_Init+0x144>)
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	689a      	ldr	r2, [r3, #8]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	021b      	lsls	r3, r3, #8
 8004fac:	4313      	orrs	r3, r2
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	4a2c      	ldr	r2, [pc, #176]	; (8005068 <HAL_TIM_Encoder_Init+0x148>)
 8004fb8:	4013      	ands	r3, r2
 8004fba:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	4a2b      	ldr	r2, [pc, #172]	; (800506c <HAL_TIM_Encoder_Init+0x14c>)
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	68da      	ldr	r2, [r3, #12]
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	69db      	ldr	r3, [r3, #28]
 8004fcc:	021b      	lsls	r3, r3, #8
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	011a      	lsls	r2, r3, #4
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	6a1b      	ldr	r3, [r3, #32]
 8004fe0:	031b      	lsls	r3, r3, #12
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2222      	movs	r2, #34	; 0x22
 8004fee:	4393      	bics	r3, r2
 8004ff0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2288      	movs	r2, #136	; 0x88
 8004ff6:	4393      	bics	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	011b      	lsls	r3, r3, #4
 8005004:	4313      	orrs	r3, r2
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	4313      	orrs	r3, r2
 800500a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2246      	movs	r2, #70	; 0x46
 8005028:	2101      	movs	r1, #1
 800502a:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	223e      	movs	r2, #62	; 0x3e
 8005030:	2101      	movs	r1, #1
 8005032:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	223f      	movs	r2, #63	; 0x3f
 8005038:	2101      	movs	r1, #1
 800503a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2242      	movs	r2, #66	; 0x42
 8005040:	2101      	movs	r1, #1
 8005042:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2243      	movs	r2, #67	; 0x43
 8005048:	2101      	movs	r1, #1
 800504a:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	223d      	movs	r2, #61	; 0x3d
 8005050:	2101      	movs	r1, #1
 8005052:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	0018      	movs	r0, r3
 8005058:	46bd      	mov	sp, r7
 800505a:	b006      	add	sp, #24
 800505c:	bd80      	pop	{r7, pc}
 800505e:	46c0      	nop			; (mov r8, r8)
 8005060:	ffffbff8 	.word	0xffffbff8
 8005064:	fffffcfc 	.word	0xfffffcfc
 8005068:	fffff3f3 	.word	0xfffff3f3
 800506c:	ffff0f0f 	.word	0xffff0f0f

08005070 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005070:	b590      	push	{r4, r7, lr}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800507a:	200f      	movs	r0, #15
 800507c:	183b      	adds	r3, r7, r0
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	213e      	movs	r1, #62	; 0x3e
 8005082:	5c52      	ldrb	r2, [r2, r1]
 8005084:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005086:	230e      	movs	r3, #14
 8005088:	18fb      	adds	r3, r7, r3
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	213f      	movs	r1, #63	; 0x3f
 800508e:	5c52      	ldrb	r2, [r2, r1]
 8005090:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005092:	240d      	movs	r4, #13
 8005094:	193b      	adds	r3, r7, r4
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	2142      	movs	r1, #66	; 0x42
 800509a:	5c52      	ldrb	r2, [r2, r1]
 800509c:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800509e:	230c      	movs	r3, #12
 80050a0:	18fb      	adds	r3, r7, r3
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	2143      	movs	r1, #67	; 0x43
 80050a6:	5c52      	ldrb	r2, [r2, r1]
 80050a8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d112      	bne.n	80050d6 <HAL_TIM_Encoder_Start_IT+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050b0:	183b      	adds	r3, r7, r0
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d103      	bne.n	80050c0 <HAL_TIM_Encoder_Start_IT+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80050b8:	193b      	adds	r3, r7, r4
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d001      	beq.n	80050c4 <HAL_TIM_Encoder_Start_IT+0x54>
    {
      return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e095      	b.n	80051f0 <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	223e      	movs	r2, #62	; 0x3e
 80050c8:	2102      	movs	r1, #2
 80050ca:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2242      	movs	r2, #66	; 0x42
 80050d0:	2102      	movs	r1, #2
 80050d2:	5499      	strb	r1, [r3, r2]
 80050d4:	e03d      	b.n	8005152 <HAL_TIM_Encoder_Start_IT+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	2b04      	cmp	r3, #4
 80050da:	d114      	bne.n	8005106 <HAL_TIM_Encoder_Start_IT+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80050dc:	230e      	movs	r3, #14
 80050de:	18fb      	adds	r3, r7, r3
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d104      	bne.n	80050f0 <HAL_TIM_Encoder_Start_IT+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80050e6:	230c      	movs	r3, #12
 80050e8:	18fb      	adds	r3, r7, r3
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d001      	beq.n	80050f4 <HAL_TIM_Encoder_Start_IT+0x84>
    {
      return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e07d      	b.n	80051f0 <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	223f      	movs	r2, #63	; 0x3f
 80050f8:	2102      	movs	r1, #2
 80050fa:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2243      	movs	r2, #67	; 0x43
 8005100:	2102      	movs	r1, #2
 8005102:	5499      	strb	r1, [r3, r2]
 8005104:	e025      	b.n	8005152 <HAL_TIM_Encoder_Start_IT+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005106:	230f      	movs	r3, #15
 8005108:	18fb      	adds	r3, r7, r3
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d10e      	bne.n	800512e <HAL_TIM_Encoder_Start_IT+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005110:	230e      	movs	r3, #14
 8005112:	18fb      	adds	r3, r7, r3
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d109      	bne.n	800512e <HAL_TIM_Encoder_Start_IT+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800511a:	230d      	movs	r3, #13
 800511c:	18fb      	adds	r3, r7, r3
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d104      	bne.n	800512e <HAL_TIM_Encoder_Start_IT+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005124:	230c      	movs	r3, #12
 8005126:	18fb      	adds	r3, r7, r3
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d001      	beq.n	8005132 <HAL_TIM_Encoder_Start_IT+0xc2>
    {
      return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e05e      	b.n	80051f0 <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	223e      	movs	r2, #62	; 0x3e
 8005136:	2102      	movs	r1, #2
 8005138:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	223f      	movs	r2, #63	; 0x3f
 800513e:	2102      	movs	r1, #2
 8005140:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2242      	movs	r2, #66	; 0x42
 8005146:	2102      	movs	r1, #2
 8005148:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2243      	movs	r2, #67	; 0x43
 800514e:	2102      	movs	r1, #2
 8005150:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d003      	beq.n	8005160 <HAL_TIM_Encoder_Start_IT+0xf0>
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	2b04      	cmp	r3, #4
 800515c:	d010      	beq.n	8005180 <HAL_TIM_Encoder_Start_IT+0x110>
 800515e:	e01f      	b.n	80051a0 <HAL_TIM_Encoder_Start_IT+0x130>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2201      	movs	r2, #1
 8005166:	2100      	movs	r1, #0
 8005168:	0018      	movs	r0, r3
 800516a:	f000 f9f3 	bl	8005554 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68da      	ldr	r2, [r3, #12]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2102      	movs	r1, #2
 800517a:	430a      	orrs	r2, r1
 800517c:	60da      	str	r2, [r3, #12]
      break;
 800517e:	e02e      	b.n	80051de <HAL_TIM_Encoder_Start_IT+0x16e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2201      	movs	r2, #1
 8005186:	2104      	movs	r1, #4
 8005188:	0018      	movs	r0, r3
 800518a:	f000 f9e3 	bl	8005554 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68da      	ldr	r2, [r3, #12]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2104      	movs	r1, #4
 800519a:	430a      	orrs	r2, r1
 800519c:	60da      	str	r2, [r3, #12]
      break;
 800519e:	e01e      	b.n	80051de <HAL_TIM_Encoder_Start_IT+0x16e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2201      	movs	r2, #1
 80051a6:	2100      	movs	r1, #0
 80051a8:	0018      	movs	r0, r3
 80051aa:	f000 f9d3 	bl	8005554 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2201      	movs	r2, #1
 80051b4:	2104      	movs	r1, #4
 80051b6:	0018      	movs	r0, r3
 80051b8:	f000 f9cc 	bl	8005554 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68da      	ldr	r2, [r3, #12]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2102      	movs	r1, #2
 80051c8:	430a      	orrs	r2, r1
 80051ca:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68da      	ldr	r2, [r3, #12]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2104      	movs	r1, #4
 80051d8:	430a      	orrs	r2, r1
 80051da:	60da      	str	r2, [r3, #12]
      break;
 80051dc:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2101      	movs	r1, #1
 80051ea:	430a      	orrs	r2, r1
 80051ec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	0018      	movs	r0, r3
 80051f2:	46bd      	mov	sp, r7
 80051f4:	b005      	add	sp, #20
 80051f6:	bd90      	pop	{r4, r7, pc}

080051f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	2202      	movs	r2, #2
 8005208:	4013      	ands	r3, r2
 800520a:	2b02      	cmp	r3, #2
 800520c:	d124      	bne.n	8005258 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	2202      	movs	r2, #2
 8005216:	4013      	ands	r3, r2
 8005218:	2b02      	cmp	r3, #2
 800521a:	d11d      	bne.n	8005258 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2203      	movs	r2, #3
 8005222:	4252      	negs	r2, r2
 8005224:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	2203      	movs	r2, #3
 8005234:	4013      	ands	r3, r2
 8005236:	d004      	beq.n	8005242 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	0018      	movs	r0, r3
 800523c:	f7fc f95e 	bl	80014fc <HAL_TIM_IC_CaptureCallback>
 8005240:	e007      	b.n	8005252 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	0018      	movs	r0, r3
 8005246:	f000 f8ed 	bl	8005424 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	0018      	movs	r0, r3
 800524e:	f000 f8f1 	bl	8005434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	2204      	movs	r2, #4
 8005260:	4013      	ands	r3, r2
 8005262:	2b04      	cmp	r3, #4
 8005264:	d125      	bne.n	80052b2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	2204      	movs	r2, #4
 800526e:	4013      	ands	r3, r2
 8005270:	2b04      	cmp	r3, #4
 8005272:	d11e      	bne.n	80052b2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2205      	movs	r2, #5
 800527a:	4252      	negs	r2, r2
 800527c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2202      	movs	r2, #2
 8005282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	699a      	ldr	r2, [r3, #24]
 800528a:	23c0      	movs	r3, #192	; 0xc0
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4013      	ands	r3, r2
 8005290:	d004      	beq.n	800529c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	0018      	movs	r0, r3
 8005296:	f7fc f931 	bl	80014fc <HAL_TIM_IC_CaptureCallback>
 800529a:	e007      	b.n	80052ac <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	0018      	movs	r0, r3
 80052a0:	f000 f8c0 	bl	8005424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	0018      	movs	r0, r3
 80052a8:	f000 f8c4 	bl	8005434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	2208      	movs	r2, #8
 80052ba:	4013      	ands	r3, r2
 80052bc:	2b08      	cmp	r3, #8
 80052be:	d124      	bne.n	800530a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	2208      	movs	r2, #8
 80052c8:	4013      	ands	r3, r2
 80052ca:	2b08      	cmp	r3, #8
 80052cc:	d11d      	bne.n	800530a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2209      	movs	r2, #9
 80052d4:	4252      	negs	r2, r2
 80052d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2204      	movs	r2, #4
 80052dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	69db      	ldr	r3, [r3, #28]
 80052e4:	2203      	movs	r2, #3
 80052e6:	4013      	ands	r3, r2
 80052e8:	d004      	beq.n	80052f4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	0018      	movs	r0, r3
 80052ee:	f7fc f905 	bl	80014fc <HAL_TIM_IC_CaptureCallback>
 80052f2:	e007      	b.n	8005304 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	0018      	movs	r0, r3
 80052f8:	f000 f894 	bl	8005424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	0018      	movs	r0, r3
 8005300:	f000 f898 	bl	8005434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	2210      	movs	r2, #16
 8005312:	4013      	ands	r3, r2
 8005314:	2b10      	cmp	r3, #16
 8005316:	d125      	bne.n	8005364 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	2210      	movs	r2, #16
 8005320:	4013      	ands	r3, r2
 8005322:	2b10      	cmp	r3, #16
 8005324:	d11e      	bne.n	8005364 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2211      	movs	r2, #17
 800532c:	4252      	negs	r2, r2
 800532e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2208      	movs	r2, #8
 8005334:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	69da      	ldr	r2, [r3, #28]
 800533c:	23c0      	movs	r3, #192	; 0xc0
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4013      	ands	r3, r2
 8005342:	d004      	beq.n	800534e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	0018      	movs	r0, r3
 8005348:	f7fc f8d8 	bl	80014fc <HAL_TIM_IC_CaptureCallback>
 800534c:	e007      	b.n	800535e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	0018      	movs	r0, r3
 8005352:	f000 f867 	bl	8005424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	0018      	movs	r0, r3
 800535a:	f000 f86b 	bl	8005434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	2201      	movs	r2, #1
 800536c:	4013      	ands	r3, r2
 800536e:	2b01      	cmp	r3, #1
 8005370:	d10f      	bne.n	8005392 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	2201      	movs	r2, #1
 800537a:	4013      	ands	r3, r2
 800537c:	2b01      	cmp	r3, #1
 800537e:	d108      	bne.n	8005392 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2202      	movs	r2, #2
 8005386:	4252      	negs	r2, r2
 8005388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	0018      	movs	r0, r3
 800538e:	f7fc ffab 	bl	80022e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	2280      	movs	r2, #128	; 0x80
 800539a:	4013      	ands	r3, r2
 800539c:	2b80      	cmp	r3, #128	; 0x80
 800539e:	d10f      	bne.n	80053c0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	2280      	movs	r2, #128	; 0x80
 80053a8:	4013      	ands	r3, r2
 80053aa:	2b80      	cmp	r3, #128	; 0x80
 80053ac:	d108      	bne.n	80053c0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2281      	movs	r2, #129	; 0x81
 80053b4:	4252      	negs	r2, r2
 80053b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	0018      	movs	r0, r3
 80053bc:	f000 f954 	bl	8005668 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	2240      	movs	r2, #64	; 0x40
 80053c8:	4013      	ands	r3, r2
 80053ca:	2b40      	cmp	r3, #64	; 0x40
 80053cc:	d10f      	bne.n	80053ee <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	2240      	movs	r2, #64	; 0x40
 80053d6:	4013      	ands	r3, r2
 80053d8:	2b40      	cmp	r3, #64	; 0x40
 80053da:	d108      	bne.n	80053ee <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2241      	movs	r2, #65	; 0x41
 80053e2:	4252      	negs	r2, r2
 80053e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	0018      	movs	r0, r3
 80053ea:	f000 f82b 	bl	8005444 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	2220      	movs	r2, #32
 80053f6:	4013      	ands	r3, r2
 80053f8:	2b20      	cmp	r3, #32
 80053fa:	d10f      	bne.n	800541c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	2220      	movs	r2, #32
 8005404:	4013      	ands	r3, r2
 8005406:	2b20      	cmp	r3, #32
 8005408:	d108      	bne.n	800541c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2221      	movs	r2, #33	; 0x21
 8005410:	4252      	negs	r2, r2
 8005412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	0018      	movs	r0, r3
 8005418:	f000 f91e 	bl	8005658 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800541c:	46c0      	nop			; (mov r8, r8)
 800541e:	46bd      	mov	sp, r7
 8005420:	b002      	add	sp, #8
 8005422:	bd80      	pop	{r7, pc}

08005424 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800542c:	46c0      	nop			; (mov r8, r8)
 800542e:	46bd      	mov	sp, r7
 8005430:	b002      	add	sp, #8
 8005432:	bd80      	pop	{r7, pc}

08005434 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800543c:	46c0      	nop			; (mov r8, r8)
 800543e:	46bd      	mov	sp, r7
 8005440:	b002      	add	sp, #8
 8005442:	bd80      	pop	{r7, pc}

08005444 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800544c:	46c0      	nop			; (mov r8, r8)
 800544e:	46bd      	mov	sp, r7
 8005450:	b002      	add	sp, #8
 8005452:	bd80      	pop	{r7, pc}

08005454 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a34      	ldr	r2, [pc, #208]	; (8005538 <TIM_Base_SetConfig+0xe4>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d008      	beq.n	800547e <TIM_Base_SetConfig+0x2a>
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	2380      	movs	r3, #128	; 0x80
 8005470:	05db      	lsls	r3, r3, #23
 8005472:	429a      	cmp	r2, r3
 8005474:	d003      	beq.n	800547e <TIM_Base_SetConfig+0x2a>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a30      	ldr	r2, [pc, #192]	; (800553c <TIM_Base_SetConfig+0xe8>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d108      	bne.n	8005490 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2270      	movs	r2, #112	; 0x70
 8005482:	4393      	bics	r3, r2
 8005484:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	4313      	orrs	r3, r2
 800548e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a29      	ldr	r2, [pc, #164]	; (8005538 <TIM_Base_SetConfig+0xe4>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d018      	beq.n	80054ca <TIM_Base_SetConfig+0x76>
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	2380      	movs	r3, #128	; 0x80
 800549c:	05db      	lsls	r3, r3, #23
 800549e:	429a      	cmp	r2, r3
 80054a0:	d013      	beq.n	80054ca <TIM_Base_SetConfig+0x76>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a25      	ldr	r2, [pc, #148]	; (800553c <TIM_Base_SetConfig+0xe8>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d00f      	beq.n	80054ca <TIM_Base_SetConfig+0x76>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a24      	ldr	r2, [pc, #144]	; (8005540 <TIM_Base_SetConfig+0xec>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d00b      	beq.n	80054ca <TIM_Base_SetConfig+0x76>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a23      	ldr	r2, [pc, #140]	; (8005544 <TIM_Base_SetConfig+0xf0>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d007      	beq.n	80054ca <TIM_Base_SetConfig+0x76>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a22      	ldr	r2, [pc, #136]	; (8005548 <TIM_Base_SetConfig+0xf4>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d003      	beq.n	80054ca <TIM_Base_SetConfig+0x76>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a21      	ldr	r2, [pc, #132]	; (800554c <TIM_Base_SetConfig+0xf8>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d108      	bne.n	80054dc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	4a20      	ldr	r2, [pc, #128]	; (8005550 <TIM_Base_SetConfig+0xfc>)
 80054ce:	4013      	ands	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	4313      	orrs	r3, r2
 80054da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2280      	movs	r2, #128	; 0x80
 80054e0:	4393      	bics	r3, r2
 80054e2:	001a      	movs	r2, r3
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	695b      	ldr	r3, [r3, #20]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	689a      	ldr	r2, [r3, #8]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a0c      	ldr	r2, [pc, #48]	; (8005538 <TIM_Base_SetConfig+0xe4>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d00b      	beq.n	8005522 <TIM_Base_SetConfig+0xce>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a0d      	ldr	r2, [pc, #52]	; (8005544 <TIM_Base_SetConfig+0xf0>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d007      	beq.n	8005522 <TIM_Base_SetConfig+0xce>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a0c      	ldr	r2, [pc, #48]	; (8005548 <TIM_Base_SetConfig+0xf4>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d003      	beq.n	8005522 <TIM_Base_SetConfig+0xce>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a0b      	ldr	r2, [pc, #44]	; (800554c <TIM_Base_SetConfig+0xf8>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d103      	bne.n	800552a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	691a      	ldr	r2, [r3, #16]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	615a      	str	r2, [r3, #20]
}
 8005530:	46c0      	nop			; (mov r8, r8)
 8005532:	46bd      	mov	sp, r7
 8005534:	b004      	add	sp, #16
 8005536:	bd80      	pop	{r7, pc}
 8005538:	40012c00 	.word	0x40012c00
 800553c:	40000400 	.word	0x40000400
 8005540:	40002000 	.word	0x40002000
 8005544:	40014000 	.word	0x40014000
 8005548:	40014400 	.word	0x40014400
 800554c:	40014800 	.word	0x40014800
 8005550:	fffffcff 	.word	0xfffffcff

08005554 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	221f      	movs	r2, #31
 8005564:	4013      	ands	r3, r2
 8005566:	2201      	movs	r2, #1
 8005568:	409a      	lsls	r2, r3
 800556a:	0013      	movs	r3, r2
 800556c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	43d2      	mvns	r2, r2
 8005576:	401a      	ands	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6a1a      	ldr	r2, [r3, #32]
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	211f      	movs	r1, #31
 8005584:	400b      	ands	r3, r1
 8005586:	6879      	ldr	r1, [r7, #4]
 8005588:	4099      	lsls	r1, r3
 800558a:	000b      	movs	r3, r1
 800558c:	431a      	orrs	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	621a      	str	r2, [r3, #32]
}
 8005592:	46c0      	nop			; (mov r8, r8)
 8005594:	46bd      	mov	sp, r7
 8005596:	b006      	add	sp, #24
 8005598:	bd80      	pop	{r7, pc}
	...

0800559c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	223c      	movs	r2, #60	; 0x3c
 80055aa:	5c9b      	ldrb	r3, [r3, r2]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d101      	bne.n	80055b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055b0:	2302      	movs	r3, #2
 80055b2:	e047      	b.n	8005644 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	223c      	movs	r2, #60	; 0x3c
 80055b8:	2101      	movs	r1, #1
 80055ba:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	223d      	movs	r2, #61	; 0x3d
 80055c0:	2102      	movs	r1, #2
 80055c2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2270      	movs	r2, #112	; 0x70
 80055d8:	4393      	bics	r3, r2
 80055da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a16      	ldr	r2, [pc, #88]	; (800564c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d00f      	beq.n	8005618 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	2380      	movs	r3, #128	; 0x80
 80055fe:	05db      	lsls	r3, r3, #23
 8005600:	429a      	cmp	r2, r3
 8005602:	d009      	beq.n	8005618 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a11      	ldr	r2, [pc, #68]	; (8005650 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d004      	beq.n	8005618 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a10      	ldr	r2, [pc, #64]	; (8005654 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d10c      	bne.n	8005632 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	2280      	movs	r2, #128	; 0x80
 800561c:	4393      	bics	r3, r2
 800561e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	4313      	orrs	r3, r2
 8005628:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	223d      	movs	r2, #61	; 0x3d
 8005636:	2101      	movs	r1, #1
 8005638:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	223c      	movs	r2, #60	; 0x3c
 800563e:	2100      	movs	r1, #0
 8005640:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	0018      	movs	r0, r3
 8005646:	46bd      	mov	sp, r7
 8005648:	b004      	add	sp, #16
 800564a:	bd80      	pop	{r7, pc}
 800564c:	40012c00 	.word	0x40012c00
 8005650:	40000400 	.word	0x40000400
 8005654:	40014000 	.word	0x40014000

08005658 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005660:	46c0      	nop			; (mov r8, r8)
 8005662:	46bd      	mov	sp, r7
 8005664:	b002      	add	sp, #8
 8005666:	bd80      	pop	{r7, pc}

08005668 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005670:	46c0      	nop			; (mov r8, r8)
 8005672:	46bd      	mov	sp, r7
 8005674:	b002      	add	sp, #8
 8005676:	bd80      	pop	{r7, pc}

08005678 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e044      	b.n	8005714 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800568e:	2b00      	cmp	r3, #0
 8005690:	d107      	bne.n	80056a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2278      	movs	r2, #120	; 0x78
 8005696:	2100      	movs	r1, #0
 8005698:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	0018      	movs	r0, r3
 800569e:	f7fd f87d 	bl	800279c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2224      	movs	r2, #36	; 0x24
 80056a6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2101      	movs	r1, #1
 80056b4:	438a      	bics	r2, r1
 80056b6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	0018      	movs	r0, r3
 80056bc:	f000 f8d0 	bl	8005860 <UART_SetConfig>
 80056c0:	0003      	movs	r3, r0
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d101      	bne.n	80056ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e024      	b.n	8005714 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	0018      	movs	r0, r3
 80056d6:	f000 fa4b 	bl	8005b70 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	490d      	ldr	r1, [pc, #52]	; (800571c <HAL_UART_Init+0xa4>)
 80056e6:	400a      	ands	r2, r1
 80056e8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	689a      	ldr	r2, [r3, #8]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	212a      	movs	r1, #42	; 0x2a
 80056f6:	438a      	bics	r2, r1
 80056f8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2101      	movs	r1, #1
 8005706:	430a      	orrs	r2, r1
 8005708:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	0018      	movs	r0, r3
 800570e:	f000 fae3 	bl	8005cd8 <UART_CheckIdleState>
 8005712:	0003      	movs	r3, r0
}
 8005714:	0018      	movs	r0, r3
 8005716:	46bd      	mov	sp, r7
 8005718:	b002      	add	sp, #8
 800571a:	bd80      	pop	{r7, pc}
 800571c:	ffffb7ff 	.word	0xffffb7ff

08005720 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b08a      	sub	sp, #40	; 0x28
 8005724:	af02      	add	r7, sp, #8
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	603b      	str	r3, [r7, #0]
 800572c:	1dbb      	adds	r3, r7, #6
 800572e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005734:	2b20      	cmp	r3, #32
 8005736:	d000      	beq.n	800573a <HAL_UART_Transmit+0x1a>
 8005738:	e08d      	b.n	8005856 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d003      	beq.n	8005748 <HAL_UART_Transmit+0x28>
 8005740:	1dbb      	adds	r3, r7, #6
 8005742:	881b      	ldrh	r3, [r3, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d101      	bne.n	800574c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e085      	b.n	8005858 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	2380      	movs	r3, #128	; 0x80
 8005752:	015b      	lsls	r3, r3, #5
 8005754:	429a      	cmp	r2, r3
 8005756:	d109      	bne.n	800576c <HAL_UART_Transmit+0x4c>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d105      	bne.n	800576c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	2201      	movs	r2, #1
 8005764:	4013      	ands	r3, r2
 8005766:	d001      	beq.n	800576c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e075      	b.n	8005858 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2284      	movs	r2, #132	; 0x84
 8005770:	2100      	movs	r1, #0
 8005772:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2221      	movs	r2, #33	; 0x21
 8005778:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800577a:	f7fd f997 	bl	8002aac <HAL_GetTick>
 800577e:	0003      	movs	r3, r0
 8005780:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	1dba      	adds	r2, r7, #6
 8005786:	2150      	movs	r1, #80	; 0x50
 8005788:	8812      	ldrh	r2, [r2, #0]
 800578a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	1dba      	adds	r2, r7, #6
 8005790:	2152      	movs	r1, #82	; 0x52
 8005792:	8812      	ldrh	r2, [r2, #0]
 8005794:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	689a      	ldr	r2, [r3, #8]
 800579a:	2380      	movs	r3, #128	; 0x80
 800579c:	015b      	lsls	r3, r3, #5
 800579e:	429a      	cmp	r2, r3
 80057a0:	d108      	bne.n	80057b4 <HAL_UART_Transmit+0x94>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d104      	bne.n	80057b4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80057aa:	2300      	movs	r3, #0
 80057ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	61bb      	str	r3, [r7, #24]
 80057b2:	e003      	b.n	80057bc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057b8:	2300      	movs	r3, #0
 80057ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057bc:	e030      	b.n	8005820 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	0013      	movs	r3, r2
 80057c8:	2200      	movs	r2, #0
 80057ca:	2180      	movs	r1, #128	; 0x80
 80057cc:	f000 fb2c 	bl	8005e28 <UART_WaitOnFlagUntilTimeout>
 80057d0:	1e03      	subs	r3, r0, #0
 80057d2:	d004      	beq.n	80057de <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2220      	movs	r2, #32
 80057d8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e03c      	b.n	8005858 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10b      	bne.n	80057fc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	881a      	ldrh	r2, [r3, #0]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	05d2      	lsls	r2, r2, #23
 80057ee:	0dd2      	lsrs	r2, r2, #23
 80057f0:	b292      	uxth	r2, r2
 80057f2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	3302      	adds	r3, #2
 80057f8:	61bb      	str	r3, [r7, #24]
 80057fa:	e008      	b.n	800580e <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	781a      	ldrb	r2, [r3, #0]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	b292      	uxth	r2, r2
 8005806:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	3301      	adds	r3, #1
 800580c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2252      	movs	r2, #82	; 0x52
 8005812:	5a9b      	ldrh	r3, [r3, r2]
 8005814:	b29b      	uxth	r3, r3
 8005816:	3b01      	subs	r3, #1
 8005818:	b299      	uxth	r1, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2252      	movs	r2, #82	; 0x52
 800581e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2252      	movs	r2, #82	; 0x52
 8005824:	5a9b      	ldrh	r3, [r3, r2]
 8005826:	b29b      	uxth	r3, r3
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1c8      	bne.n	80057be <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	0013      	movs	r3, r2
 8005836:	2200      	movs	r2, #0
 8005838:	2140      	movs	r1, #64	; 0x40
 800583a:	f000 faf5 	bl	8005e28 <UART_WaitOnFlagUntilTimeout>
 800583e:	1e03      	subs	r3, r0, #0
 8005840:	d004      	beq.n	800584c <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2220      	movs	r2, #32
 8005846:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e005      	b.n	8005858 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2220      	movs	r2, #32
 8005850:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005852:	2300      	movs	r3, #0
 8005854:	e000      	b.n	8005858 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8005856:	2302      	movs	r3, #2
  }
}
 8005858:	0018      	movs	r0, r3
 800585a:	46bd      	mov	sp, r7
 800585c:	b008      	add	sp, #32
 800585e:	bd80      	pop	{r7, pc}

08005860 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b088      	sub	sp, #32
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005868:	231e      	movs	r3, #30
 800586a:	18fb      	adds	r3, r7, r3
 800586c:	2200      	movs	r2, #0
 800586e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	431a      	orrs	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	431a      	orrs	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	69db      	ldr	r3, [r3, #28]
 8005884:	4313      	orrs	r3, r2
 8005886:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4aaf      	ldr	r2, [pc, #700]	; (8005b4c <UART_SetConfig+0x2ec>)
 8005890:	4013      	ands	r3, r2
 8005892:	0019      	movs	r1, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	430a      	orrs	r2, r1
 800589c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	4aaa      	ldr	r2, [pc, #680]	; (8005b50 <UART_SetConfig+0x2f0>)
 80058a6:	4013      	ands	r3, r2
 80058a8:	0019      	movs	r1, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68da      	ldr	r2, [r3, #12]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	430a      	orrs	r2, r1
 80058b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a1b      	ldr	r3, [r3, #32]
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	4aa1      	ldr	r2, [pc, #644]	; (8005b54 <UART_SetConfig+0x2f4>)
 80058ce:	4013      	ands	r3, r2
 80058d0:	0019      	movs	r1, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	430a      	orrs	r2, r1
 80058da:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a9d      	ldr	r2, [pc, #628]	; (8005b58 <UART_SetConfig+0x2f8>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d127      	bne.n	8005936 <UART_SetConfig+0xd6>
 80058e6:	4b9d      	ldr	r3, [pc, #628]	; (8005b5c <UART_SetConfig+0x2fc>)
 80058e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ea:	2203      	movs	r2, #3
 80058ec:	4013      	ands	r3, r2
 80058ee:	2b03      	cmp	r3, #3
 80058f0:	d00d      	beq.n	800590e <UART_SetConfig+0xae>
 80058f2:	d81b      	bhi.n	800592c <UART_SetConfig+0xcc>
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d014      	beq.n	8005922 <UART_SetConfig+0xc2>
 80058f8:	d818      	bhi.n	800592c <UART_SetConfig+0xcc>
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d002      	beq.n	8005904 <UART_SetConfig+0xa4>
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d00a      	beq.n	8005918 <UART_SetConfig+0xb8>
 8005902:	e013      	b.n	800592c <UART_SetConfig+0xcc>
 8005904:	231f      	movs	r3, #31
 8005906:	18fb      	adds	r3, r7, r3
 8005908:	2200      	movs	r2, #0
 800590a:	701a      	strb	r2, [r3, #0]
 800590c:	e065      	b.n	80059da <UART_SetConfig+0x17a>
 800590e:	231f      	movs	r3, #31
 8005910:	18fb      	adds	r3, r7, r3
 8005912:	2202      	movs	r2, #2
 8005914:	701a      	strb	r2, [r3, #0]
 8005916:	e060      	b.n	80059da <UART_SetConfig+0x17a>
 8005918:	231f      	movs	r3, #31
 800591a:	18fb      	adds	r3, r7, r3
 800591c:	2204      	movs	r2, #4
 800591e:	701a      	strb	r2, [r3, #0]
 8005920:	e05b      	b.n	80059da <UART_SetConfig+0x17a>
 8005922:	231f      	movs	r3, #31
 8005924:	18fb      	adds	r3, r7, r3
 8005926:	2208      	movs	r2, #8
 8005928:	701a      	strb	r2, [r3, #0]
 800592a:	e056      	b.n	80059da <UART_SetConfig+0x17a>
 800592c:	231f      	movs	r3, #31
 800592e:	18fb      	adds	r3, r7, r3
 8005930:	2210      	movs	r2, #16
 8005932:	701a      	strb	r2, [r3, #0]
 8005934:	e051      	b.n	80059da <UART_SetConfig+0x17a>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a89      	ldr	r2, [pc, #548]	; (8005b60 <UART_SetConfig+0x300>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d134      	bne.n	80059aa <UART_SetConfig+0x14a>
 8005940:	4b86      	ldr	r3, [pc, #536]	; (8005b5c <UART_SetConfig+0x2fc>)
 8005942:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005944:	23c0      	movs	r3, #192	; 0xc0
 8005946:	029b      	lsls	r3, r3, #10
 8005948:	4013      	ands	r3, r2
 800594a:	22c0      	movs	r2, #192	; 0xc0
 800594c:	0292      	lsls	r2, r2, #10
 800594e:	4293      	cmp	r3, r2
 8005950:	d017      	beq.n	8005982 <UART_SetConfig+0x122>
 8005952:	22c0      	movs	r2, #192	; 0xc0
 8005954:	0292      	lsls	r2, r2, #10
 8005956:	4293      	cmp	r3, r2
 8005958:	d822      	bhi.n	80059a0 <UART_SetConfig+0x140>
 800595a:	2280      	movs	r2, #128	; 0x80
 800595c:	0292      	lsls	r2, r2, #10
 800595e:	4293      	cmp	r3, r2
 8005960:	d019      	beq.n	8005996 <UART_SetConfig+0x136>
 8005962:	2280      	movs	r2, #128	; 0x80
 8005964:	0292      	lsls	r2, r2, #10
 8005966:	4293      	cmp	r3, r2
 8005968:	d81a      	bhi.n	80059a0 <UART_SetConfig+0x140>
 800596a:	2b00      	cmp	r3, #0
 800596c:	d004      	beq.n	8005978 <UART_SetConfig+0x118>
 800596e:	2280      	movs	r2, #128	; 0x80
 8005970:	0252      	lsls	r2, r2, #9
 8005972:	4293      	cmp	r3, r2
 8005974:	d00a      	beq.n	800598c <UART_SetConfig+0x12c>
 8005976:	e013      	b.n	80059a0 <UART_SetConfig+0x140>
 8005978:	231f      	movs	r3, #31
 800597a:	18fb      	adds	r3, r7, r3
 800597c:	2200      	movs	r2, #0
 800597e:	701a      	strb	r2, [r3, #0]
 8005980:	e02b      	b.n	80059da <UART_SetConfig+0x17a>
 8005982:	231f      	movs	r3, #31
 8005984:	18fb      	adds	r3, r7, r3
 8005986:	2202      	movs	r2, #2
 8005988:	701a      	strb	r2, [r3, #0]
 800598a:	e026      	b.n	80059da <UART_SetConfig+0x17a>
 800598c:	231f      	movs	r3, #31
 800598e:	18fb      	adds	r3, r7, r3
 8005990:	2204      	movs	r2, #4
 8005992:	701a      	strb	r2, [r3, #0]
 8005994:	e021      	b.n	80059da <UART_SetConfig+0x17a>
 8005996:	231f      	movs	r3, #31
 8005998:	18fb      	adds	r3, r7, r3
 800599a:	2208      	movs	r2, #8
 800599c:	701a      	strb	r2, [r3, #0]
 800599e:	e01c      	b.n	80059da <UART_SetConfig+0x17a>
 80059a0:	231f      	movs	r3, #31
 80059a2:	18fb      	adds	r3, r7, r3
 80059a4:	2210      	movs	r2, #16
 80059a6:	701a      	strb	r2, [r3, #0]
 80059a8:	e017      	b.n	80059da <UART_SetConfig+0x17a>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a6d      	ldr	r2, [pc, #436]	; (8005b64 <UART_SetConfig+0x304>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d104      	bne.n	80059be <UART_SetConfig+0x15e>
 80059b4:	231f      	movs	r3, #31
 80059b6:	18fb      	adds	r3, r7, r3
 80059b8:	2200      	movs	r2, #0
 80059ba:	701a      	strb	r2, [r3, #0]
 80059bc:	e00d      	b.n	80059da <UART_SetConfig+0x17a>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a69      	ldr	r2, [pc, #420]	; (8005b68 <UART_SetConfig+0x308>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d104      	bne.n	80059d2 <UART_SetConfig+0x172>
 80059c8:	231f      	movs	r3, #31
 80059ca:	18fb      	adds	r3, r7, r3
 80059cc:	2200      	movs	r2, #0
 80059ce:	701a      	strb	r2, [r3, #0]
 80059d0:	e003      	b.n	80059da <UART_SetConfig+0x17a>
 80059d2:	231f      	movs	r3, #31
 80059d4:	18fb      	adds	r3, r7, r3
 80059d6:	2210      	movs	r2, #16
 80059d8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	69da      	ldr	r2, [r3, #28]
 80059de:	2380      	movs	r3, #128	; 0x80
 80059e0:	021b      	lsls	r3, r3, #8
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d15c      	bne.n	8005aa0 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 80059e6:	231f      	movs	r3, #31
 80059e8:	18fb      	adds	r3, r7, r3
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	2b08      	cmp	r3, #8
 80059ee:	d015      	beq.n	8005a1c <UART_SetConfig+0x1bc>
 80059f0:	dc18      	bgt.n	8005a24 <UART_SetConfig+0x1c4>
 80059f2:	2b04      	cmp	r3, #4
 80059f4:	d00d      	beq.n	8005a12 <UART_SetConfig+0x1b2>
 80059f6:	dc15      	bgt.n	8005a24 <UART_SetConfig+0x1c4>
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d002      	beq.n	8005a02 <UART_SetConfig+0x1a2>
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d005      	beq.n	8005a0c <UART_SetConfig+0x1ac>
 8005a00:	e010      	b.n	8005a24 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a02:	f7ff f8fb 	bl	8004bfc <HAL_RCC_GetPCLK1Freq>
 8005a06:	0003      	movs	r3, r0
 8005a08:	61bb      	str	r3, [r7, #24]
        break;
 8005a0a:	e012      	b.n	8005a32 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a0c:	4b57      	ldr	r3, [pc, #348]	; (8005b6c <UART_SetConfig+0x30c>)
 8005a0e:	61bb      	str	r3, [r7, #24]
        break;
 8005a10:	e00f      	b.n	8005a32 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a12:	f7ff f877 	bl	8004b04 <HAL_RCC_GetSysClockFreq>
 8005a16:	0003      	movs	r3, r0
 8005a18:	61bb      	str	r3, [r7, #24]
        break;
 8005a1a:	e00a      	b.n	8005a32 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a1c:	2380      	movs	r3, #128	; 0x80
 8005a1e:	021b      	lsls	r3, r3, #8
 8005a20:	61bb      	str	r3, [r7, #24]
        break;
 8005a22:	e006      	b.n	8005a32 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8005a24:	2300      	movs	r3, #0
 8005a26:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a28:	231e      	movs	r3, #30
 8005a2a:	18fb      	adds	r3, r7, r3
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	701a      	strb	r2, [r3, #0]
        break;
 8005a30:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d100      	bne.n	8005a3a <UART_SetConfig+0x1da>
 8005a38:	e07a      	b.n	8005b30 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	005a      	lsls	r2, r3, #1
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	085b      	lsrs	r3, r3, #1
 8005a44:	18d2      	adds	r2, r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	0019      	movs	r1, r3
 8005a4c:	0010      	movs	r0, r2
 8005a4e:	f7fa fb6d 	bl	800012c <__udivsi3>
 8005a52:	0003      	movs	r3, r0
 8005a54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	2b0f      	cmp	r3, #15
 8005a5a:	d91c      	bls.n	8005a96 <UART_SetConfig+0x236>
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	2380      	movs	r3, #128	; 0x80
 8005a60:	025b      	lsls	r3, r3, #9
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d217      	bcs.n	8005a96 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	200e      	movs	r0, #14
 8005a6c:	183b      	adds	r3, r7, r0
 8005a6e:	210f      	movs	r1, #15
 8005a70:	438a      	bics	r2, r1
 8005a72:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	085b      	lsrs	r3, r3, #1
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	2207      	movs	r2, #7
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	b299      	uxth	r1, r3
 8005a80:	183b      	adds	r3, r7, r0
 8005a82:	183a      	adds	r2, r7, r0
 8005a84:	8812      	ldrh	r2, [r2, #0]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	183a      	adds	r2, r7, r0
 8005a90:	8812      	ldrh	r2, [r2, #0]
 8005a92:	60da      	str	r2, [r3, #12]
 8005a94:	e04c      	b.n	8005b30 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8005a96:	231e      	movs	r3, #30
 8005a98:	18fb      	adds	r3, r7, r3
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	701a      	strb	r2, [r3, #0]
 8005a9e:	e047      	b.n	8005b30 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005aa0:	231f      	movs	r3, #31
 8005aa2:	18fb      	adds	r3, r7, r3
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	2b08      	cmp	r3, #8
 8005aa8:	d015      	beq.n	8005ad6 <UART_SetConfig+0x276>
 8005aaa:	dc18      	bgt.n	8005ade <UART_SetConfig+0x27e>
 8005aac:	2b04      	cmp	r3, #4
 8005aae:	d00d      	beq.n	8005acc <UART_SetConfig+0x26c>
 8005ab0:	dc15      	bgt.n	8005ade <UART_SetConfig+0x27e>
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d002      	beq.n	8005abc <UART_SetConfig+0x25c>
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d005      	beq.n	8005ac6 <UART_SetConfig+0x266>
 8005aba:	e010      	b.n	8005ade <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005abc:	f7ff f89e 	bl	8004bfc <HAL_RCC_GetPCLK1Freq>
 8005ac0:	0003      	movs	r3, r0
 8005ac2:	61bb      	str	r3, [r7, #24]
        break;
 8005ac4:	e012      	b.n	8005aec <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ac6:	4b29      	ldr	r3, [pc, #164]	; (8005b6c <UART_SetConfig+0x30c>)
 8005ac8:	61bb      	str	r3, [r7, #24]
        break;
 8005aca:	e00f      	b.n	8005aec <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005acc:	f7ff f81a 	bl	8004b04 <HAL_RCC_GetSysClockFreq>
 8005ad0:	0003      	movs	r3, r0
 8005ad2:	61bb      	str	r3, [r7, #24]
        break;
 8005ad4:	e00a      	b.n	8005aec <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ad6:	2380      	movs	r3, #128	; 0x80
 8005ad8:	021b      	lsls	r3, r3, #8
 8005ada:	61bb      	str	r3, [r7, #24]
        break;
 8005adc:	e006      	b.n	8005aec <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ae2:	231e      	movs	r3, #30
 8005ae4:	18fb      	adds	r3, r7, r3
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	701a      	strb	r2, [r3, #0]
        break;
 8005aea:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d01e      	beq.n	8005b30 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	085a      	lsrs	r2, r3, #1
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	18d2      	adds	r2, r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	0019      	movs	r1, r3
 8005b02:	0010      	movs	r0, r2
 8005b04:	f7fa fb12 	bl	800012c <__udivsi3>
 8005b08:	0003      	movs	r3, r0
 8005b0a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	2b0f      	cmp	r3, #15
 8005b10:	d90a      	bls.n	8005b28 <UART_SetConfig+0x2c8>
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	2380      	movs	r3, #128	; 0x80
 8005b16:	025b      	lsls	r3, r3, #9
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d205      	bcs.n	8005b28 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	60da      	str	r2, [r3, #12]
 8005b26:	e003      	b.n	8005b30 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8005b28:	231e      	movs	r3, #30
 8005b2a:	18fb      	adds	r3, r7, r3
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005b3c:	231e      	movs	r3, #30
 8005b3e:	18fb      	adds	r3, r7, r3
 8005b40:	781b      	ldrb	r3, [r3, #0]
}
 8005b42:	0018      	movs	r0, r3
 8005b44:	46bd      	mov	sp, r7
 8005b46:	b008      	add	sp, #32
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	46c0      	nop			; (mov r8, r8)
 8005b4c:	efff69f3 	.word	0xefff69f3
 8005b50:	ffffcfff 	.word	0xffffcfff
 8005b54:	fffff4ff 	.word	0xfffff4ff
 8005b58:	40013800 	.word	0x40013800
 8005b5c:	40021000 	.word	0x40021000
 8005b60:	40004400 	.word	0x40004400
 8005b64:	40004800 	.word	0x40004800
 8005b68:	40004c00 	.word	0x40004c00
 8005b6c:	007a1200 	.word	0x007a1200

08005b70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	4013      	ands	r3, r2
 8005b80:	d00b      	beq.n	8005b9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	4a4a      	ldr	r2, [pc, #296]	; (8005cb4 <UART_AdvFeatureConfig+0x144>)
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	0019      	movs	r1, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	d00b      	beq.n	8005bbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	4a43      	ldr	r2, [pc, #268]	; (8005cb8 <UART_AdvFeatureConfig+0x148>)
 8005bac:	4013      	ands	r3, r2
 8005bae:	0019      	movs	r1, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc0:	2204      	movs	r2, #4
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	d00b      	beq.n	8005bde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	4a3b      	ldr	r2, [pc, #236]	; (8005cbc <UART_AdvFeatureConfig+0x14c>)
 8005bce:	4013      	ands	r3, r2
 8005bd0:	0019      	movs	r1, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be2:	2208      	movs	r2, #8
 8005be4:	4013      	ands	r3, r2
 8005be6:	d00b      	beq.n	8005c00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	4a34      	ldr	r2, [pc, #208]	; (8005cc0 <UART_AdvFeatureConfig+0x150>)
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	0019      	movs	r1, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c04:	2210      	movs	r2, #16
 8005c06:	4013      	ands	r3, r2
 8005c08:	d00b      	beq.n	8005c22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	4a2c      	ldr	r2, [pc, #176]	; (8005cc4 <UART_AdvFeatureConfig+0x154>)
 8005c12:	4013      	ands	r3, r2
 8005c14:	0019      	movs	r1, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c26:	2220      	movs	r2, #32
 8005c28:	4013      	ands	r3, r2
 8005c2a:	d00b      	beq.n	8005c44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	4a25      	ldr	r2, [pc, #148]	; (8005cc8 <UART_AdvFeatureConfig+0x158>)
 8005c34:	4013      	ands	r3, r2
 8005c36:	0019      	movs	r1, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	430a      	orrs	r2, r1
 8005c42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c48:	2240      	movs	r2, #64	; 0x40
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	d01d      	beq.n	8005c8a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	4a1d      	ldr	r2, [pc, #116]	; (8005ccc <UART_AdvFeatureConfig+0x15c>)
 8005c56:	4013      	ands	r3, r2
 8005c58:	0019      	movs	r1, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	430a      	orrs	r2, r1
 8005c64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c6a:	2380      	movs	r3, #128	; 0x80
 8005c6c:	035b      	lsls	r3, r3, #13
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d10b      	bne.n	8005c8a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	4a15      	ldr	r2, [pc, #84]	; (8005cd0 <UART_AdvFeatureConfig+0x160>)
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	0019      	movs	r1, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	430a      	orrs	r2, r1
 8005c88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8e:	2280      	movs	r2, #128	; 0x80
 8005c90:	4013      	ands	r3, r2
 8005c92:	d00b      	beq.n	8005cac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	4a0e      	ldr	r2, [pc, #56]	; (8005cd4 <UART_AdvFeatureConfig+0x164>)
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	0019      	movs	r1, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	605a      	str	r2, [r3, #4]
  }
}
 8005cac:	46c0      	nop			; (mov r8, r8)
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	b002      	add	sp, #8
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	fffdffff 	.word	0xfffdffff
 8005cb8:	fffeffff 	.word	0xfffeffff
 8005cbc:	fffbffff 	.word	0xfffbffff
 8005cc0:	ffff7fff 	.word	0xffff7fff
 8005cc4:	ffffefff 	.word	0xffffefff
 8005cc8:	ffffdfff 	.word	0xffffdfff
 8005ccc:	ffefffff 	.word	0xffefffff
 8005cd0:	ff9fffff 	.word	0xff9fffff
 8005cd4:	fff7ffff 	.word	0xfff7ffff

08005cd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b092      	sub	sp, #72	; 0x48
 8005cdc:	af02      	add	r7, sp, #8
 8005cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2284      	movs	r2, #132	; 0x84
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ce8:	f7fc fee0 	bl	8002aac <HAL_GetTick>
 8005cec:	0003      	movs	r3, r0
 8005cee:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2208      	movs	r2, #8
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	2b08      	cmp	r3, #8
 8005cfc:	d12c      	bne.n	8005d58 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d00:	2280      	movs	r2, #128	; 0x80
 8005d02:	0391      	lsls	r1, r2, #14
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	4a46      	ldr	r2, [pc, #280]	; (8005e20 <UART_CheckIdleState+0x148>)
 8005d08:	9200      	str	r2, [sp, #0]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f000 f88c 	bl	8005e28 <UART_WaitOnFlagUntilTimeout>
 8005d10:	1e03      	subs	r3, r0, #0
 8005d12:	d021      	beq.n	8005d58 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d14:	f3ef 8310 	mrs	r3, PRIMASK
 8005d18:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005d1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d1e:	2301      	movs	r3, #1
 8005d20:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d24:	f383 8810 	msr	PRIMASK, r3
}
 8005d28:	46c0      	nop			; (mov r8, r8)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2180      	movs	r1, #128	; 0x80
 8005d36:	438a      	bics	r2, r1
 8005d38:	601a      	str	r2, [r3, #0]
 8005d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d40:	f383 8810 	msr	PRIMASK, r3
}
 8005d44:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2220      	movs	r2, #32
 8005d4a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2278      	movs	r2, #120	; 0x78
 8005d50:	2100      	movs	r1, #0
 8005d52:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e05f      	b.n	8005e18 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2204      	movs	r2, #4
 8005d60:	4013      	ands	r3, r2
 8005d62:	2b04      	cmp	r3, #4
 8005d64:	d146      	bne.n	8005df4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d68:	2280      	movs	r2, #128	; 0x80
 8005d6a:	03d1      	lsls	r1, r2, #15
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	4a2c      	ldr	r2, [pc, #176]	; (8005e20 <UART_CheckIdleState+0x148>)
 8005d70:	9200      	str	r2, [sp, #0]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f000 f858 	bl	8005e28 <UART_WaitOnFlagUntilTimeout>
 8005d78:	1e03      	subs	r3, r0, #0
 8005d7a:	d03b      	beq.n	8005df4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d7c:	f3ef 8310 	mrs	r3, PRIMASK
 8005d80:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d82:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d84:	637b      	str	r3, [r7, #52]	; 0x34
 8005d86:	2301      	movs	r3, #1
 8005d88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	f383 8810 	msr	PRIMASK, r3
}
 8005d90:	46c0      	nop			; (mov r8, r8)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4921      	ldr	r1, [pc, #132]	; (8005e24 <UART_CheckIdleState+0x14c>)
 8005d9e:	400a      	ands	r2, r1
 8005da0:	601a      	str	r2, [r3, #0]
 8005da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f383 8810 	msr	PRIMASK, r3
}
 8005dac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dae:	f3ef 8310 	mrs	r3, PRIMASK
 8005db2:	61bb      	str	r3, [r7, #24]
  return(result);
 8005db4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005db6:	633b      	str	r3, [r7, #48]	; 0x30
 8005db8:	2301      	movs	r3, #1
 8005dba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	f383 8810 	msr	PRIMASK, r3
}
 8005dc2:	46c0      	nop			; (mov r8, r8)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	689a      	ldr	r2, [r3, #8]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2101      	movs	r1, #1
 8005dd0:	438a      	bics	r2, r1
 8005dd2:	609a      	str	r2, [r3, #8]
 8005dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dd8:	6a3b      	ldr	r3, [r7, #32]
 8005dda:	f383 8810 	msr	PRIMASK, r3
}
 8005dde:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2280      	movs	r2, #128	; 0x80
 8005de4:	2120      	movs	r1, #32
 8005de6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2278      	movs	r2, #120	; 0x78
 8005dec:	2100      	movs	r1, #0
 8005dee:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e011      	b.n	8005e18 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2220      	movs	r2, #32
 8005df8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2280      	movs	r2, #128	; 0x80
 8005dfe:	2120      	movs	r1, #32
 8005e00:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2278      	movs	r2, #120	; 0x78
 8005e12:	2100      	movs	r1, #0
 8005e14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	0018      	movs	r0, r3
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	b010      	add	sp, #64	; 0x40
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	01ffffff 	.word	0x01ffffff
 8005e24:	fffffedf 	.word	0xfffffedf

08005e28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	603b      	str	r3, [r7, #0]
 8005e34:	1dfb      	adds	r3, r7, #7
 8005e36:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e38:	e04b      	b.n	8005ed2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	d048      	beq.n	8005ed2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e40:	f7fc fe34 	bl	8002aac <HAL_GetTick>
 8005e44:	0002      	movs	r2, r0
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	69ba      	ldr	r2, [r7, #24]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d302      	bcc.n	8005e56 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d101      	bne.n	8005e5a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e04b      	b.n	8005ef2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2204      	movs	r2, #4
 8005e62:	4013      	ands	r3, r2
 8005e64:	d035      	beq.n	8005ed2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	69db      	ldr	r3, [r3, #28]
 8005e6c:	2208      	movs	r2, #8
 8005e6e:	4013      	ands	r3, r2
 8005e70:	2b08      	cmp	r3, #8
 8005e72:	d111      	bne.n	8005e98 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2208      	movs	r2, #8
 8005e7a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	0018      	movs	r0, r3
 8005e80:	f000 f83c 	bl	8005efc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2284      	movs	r2, #132	; 0x84
 8005e88:	2108      	movs	r1, #8
 8005e8a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2278      	movs	r2, #120	; 0x78
 8005e90:	2100      	movs	r1, #0
 8005e92:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e02c      	b.n	8005ef2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	69da      	ldr	r2, [r3, #28]
 8005e9e:	2380      	movs	r3, #128	; 0x80
 8005ea0:	011b      	lsls	r3, r3, #4
 8005ea2:	401a      	ands	r2, r3
 8005ea4:	2380      	movs	r3, #128	; 0x80
 8005ea6:	011b      	lsls	r3, r3, #4
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d112      	bne.n	8005ed2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2280      	movs	r2, #128	; 0x80
 8005eb2:	0112      	lsls	r2, r2, #4
 8005eb4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	0018      	movs	r0, r3
 8005eba:	f000 f81f 	bl	8005efc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2284      	movs	r2, #132	; 0x84
 8005ec2:	2120      	movs	r1, #32
 8005ec4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2278      	movs	r2, #120	; 0x78
 8005eca:	2100      	movs	r1, #0
 8005ecc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e00f      	b.n	8005ef2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	69db      	ldr	r3, [r3, #28]
 8005ed8:	68ba      	ldr	r2, [r7, #8]
 8005eda:	4013      	ands	r3, r2
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	425a      	negs	r2, r3
 8005ee2:	4153      	adcs	r3, r2
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	001a      	movs	r2, r3
 8005ee8:	1dfb      	adds	r3, r7, #7
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d0a4      	beq.n	8005e3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	b004      	add	sp, #16
 8005ef8:	bd80      	pop	{r7, pc}
	...

08005efc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b08e      	sub	sp, #56	; 0x38
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f04:	f3ef 8310 	mrs	r3, PRIMASK
 8005f08:	617b      	str	r3, [r7, #20]
  return(result);
 8005f0a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f0c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f0e:	2301      	movs	r3, #1
 8005f10:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	f383 8810 	msr	PRIMASK, r3
}
 8005f18:	46c0      	nop			; (mov r8, r8)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4926      	ldr	r1, [pc, #152]	; (8005fc0 <UART_EndRxTransfer+0xc4>)
 8005f26:	400a      	ands	r2, r1
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f2c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	f383 8810 	msr	PRIMASK, r3
}
 8005f34:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f36:	f3ef 8310 	mrs	r3, PRIMASK
 8005f3a:	623b      	str	r3, [r7, #32]
  return(result);
 8005f3c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f3e:	633b      	str	r3, [r7, #48]	; 0x30
 8005f40:	2301      	movs	r3, #1
 8005f42:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f46:	f383 8810 	msr	PRIMASK, r3
}
 8005f4a:	46c0      	nop			; (mov r8, r8)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689a      	ldr	r2, [r3, #8]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2101      	movs	r1, #1
 8005f58:	438a      	bics	r2, r1
 8005f5a:	609a      	str	r2, [r3, #8]
 8005f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f62:	f383 8810 	msr	PRIMASK, r3
}
 8005f66:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d118      	bne.n	8005fa2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f70:	f3ef 8310 	mrs	r3, PRIMASK
 8005f74:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f76:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f383 8810 	msr	PRIMASK, r3
}
 8005f84:	46c0      	nop			; (mov r8, r8)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2110      	movs	r1, #16
 8005f92:	438a      	bics	r2, r1
 8005f94:	601a      	str	r2, [r3, #0]
 8005f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	f383 8810 	msr	PRIMASK, r3
}
 8005fa0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2280      	movs	r2, #128	; 0x80
 8005fa6:	2120      	movs	r1, #32
 8005fa8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005fb6:	46c0      	nop			; (mov r8, r8)
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	b00e      	add	sp, #56	; 0x38
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	46c0      	nop			; (mov r8, r8)
 8005fc0:	fffffedf 	.word	0xfffffedf

08005fc4 <std>:
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	b510      	push	{r4, lr}
 8005fc8:	0004      	movs	r4, r0
 8005fca:	6003      	str	r3, [r0, #0]
 8005fcc:	6043      	str	r3, [r0, #4]
 8005fce:	6083      	str	r3, [r0, #8]
 8005fd0:	8181      	strh	r1, [r0, #12]
 8005fd2:	6643      	str	r3, [r0, #100]	; 0x64
 8005fd4:	81c2      	strh	r2, [r0, #14]
 8005fd6:	6103      	str	r3, [r0, #16]
 8005fd8:	6143      	str	r3, [r0, #20]
 8005fda:	6183      	str	r3, [r0, #24]
 8005fdc:	0019      	movs	r1, r3
 8005fde:	2208      	movs	r2, #8
 8005fe0:	305c      	adds	r0, #92	; 0x5c
 8005fe2:	f000 f90f 	bl	8006204 <memset>
 8005fe6:	4b0b      	ldr	r3, [pc, #44]	; (8006014 <std+0x50>)
 8005fe8:	6224      	str	r4, [r4, #32]
 8005fea:	6263      	str	r3, [r4, #36]	; 0x24
 8005fec:	4b0a      	ldr	r3, [pc, #40]	; (8006018 <std+0x54>)
 8005fee:	62a3      	str	r3, [r4, #40]	; 0x28
 8005ff0:	4b0a      	ldr	r3, [pc, #40]	; (800601c <std+0x58>)
 8005ff2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005ff4:	4b0a      	ldr	r3, [pc, #40]	; (8006020 <std+0x5c>)
 8005ff6:	6323      	str	r3, [r4, #48]	; 0x30
 8005ff8:	4b0a      	ldr	r3, [pc, #40]	; (8006024 <std+0x60>)
 8005ffa:	429c      	cmp	r4, r3
 8005ffc:	d005      	beq.n	800600a <std+0x46>
 8005ffe:	4b0a      	ldr	r3, [pc, #40]	; (8006028 <std+0x64>)
 8006000:	429c      	cmp	r4, r3
 8006002:	d002      	beq.n	800600a <std+0x46>
 8006004:	4b09      	ldr	r3, [pc, #36]	; (800602c <std+0x68>)
 8006006:	429c      	cmp	r4, r3
 8006008:	d103      	bne.n	8006012 <std+0x4e>
 800600a:	0020      	movs	r0, r4
 800600c:	3058      	adds	r0, #88	; 0x58
 800600e:	f000 f979 	bl	8006304 <__retarget_lock_init_recursive>
 8006012:	bd10      	pop	{r4, pc}
 8006014:	0800616d 	.word	0x0800616d
 8006018:	08006195 	.word	0x08006195
 800601c:	080061cd 	.word	0x080061cd
 8006020:	080061f9 	.word	0x080061f9
 8006024:	20000304 	.word	0x20000304
 8006028:	2000036c 	.word	0x2000036c
 800602c:	200003d4 	.word	0x200003d4

08006030 <stdio_exit_handler>:
 8006030:	b510      	push	{r4, lr}
 8006032:	4a03      	ldr	r2, [pc, #12]	; (8006040 <stdio_exit_handler+0x10>)
 8006034:	4903      	ldr	r1, [pc, #12]	; (8006044 <stdio_exit_handler+0x14>)
 8006036:	4804      	ldr	r0, [pc, #16]	; (8006048 <stdio_exit_handler+0x18>)
 8006038:	f000 f86c 	bl	8006114 <_fwalk_sglue>
 800603c:	bd10      	pop	{r4, pc}
 800603e:	46c0      	nop			; (mov r8, r8)
 8006040:	2000004c 	.word	0x2000004c
 8006044:	08006bb5 	.word	0x08006bb5
 8006048:	20000058 	.word	0x20000058

0800604c <cleanup_stdio>:
 800604c:	6841      	ldr	r1, [r0, #4]
 800604e:	4b0b      	ldr	r3, [pc, #44]	; (800607c <cleanup_stdio+0x30>)
 8006050:	b510      	push	{r4, lr}
 8006052:	0004      	movs	r4, r0
 8006054:	4299      	cmp	r1, r3
 8006056:	d001      	beq.n	800605c <cleanup_stdio+0x10>
 8006058:	f000 fdac 	bl	8006bb4 <_fflush_r>
 800605c:	68a1      	ldr	r1, [r4, #8]
 800605e:	4b08      	ldr	r3, [pc, #32]	; (8006080 <cleanup_stdio+0x34>)
 8006060:	4299      	cmp	r1, r3
 8006062:	d002      	beq.n	800606a <cleanup_stdio+0x1e>
 8006064:	0020      	movs	r0, r4
 8006066:	f000 fda5 	bl	8006bb4 <_fflush_r>
 800606a:	68e1      	ldr	r1, [r4, #12]
 800606c:	4b05      	ldr	r3, [pc, #20]	; (8006084 <cleanup_stdio+0x38>)
 800606e:	4299      	cmp	r1, r3
 8006070:	d002      	beq.n	8006078 <cleanup_stdio+0x2c>
 8006072:	0020      	movs	r0, r4
 8006074:	f000 fd9e 	bl	8006bb4 <_fflush_r>
 8006078:	bd10      	pop	{r4, pc}
 800607a:	46c0      	nop			; (mov r8, r8)
 800607c:	20000304 	.word	0x20000304
 8006080:	2000036c 	.word	0x2000036c
 8006084:	200003d4 	.word	0x200003d4

08006088 <global_stdio_init.part.0>:
 8006088:	b510      	push	{r4, lr}
 800608a:	4b09      	ldr	r3, [pc, #36]	; (80060b0 <global_stdio_init.part.0+0x28>)
 800608c:	4a09      	ldr	r2, [pc, #36]	; (80060b4 <global_stdio_init.part.0+0x2c>)
 800608e:	2104      	movs	r1, #4
 8006090:	601a      	str	r2, [r3, #0]
 8006092:	4809      	ldr	r0, [pc, #36]	; (80060b8 <global_stdio_init.part.0+0x30>)
 8006094:	2200      	movs	r2, #0
 8006096:	f7ff ff95 	bl	8005fc4 <std>
 800609a:	2201      	movs	r2, #1
 800609c:	2109      	movs	r1, #9
 800609e:	4807      	ldr	r0, [pc, #28]	; (80060bc <global_stdio_init.part.0+0x34>)
 80060a0:	f7ff ff90 	bl	8005fc4 <std>
 80060a4:	2202      	movs	r2, #2
 80060a6:	2112      	movs	r1, #18
 80060a8:	4805      	ldr	r0, [pc, #20]	; (80060c0 <global_stdio_init.part.0+0x38>)
 80060aa:	f7ff ff8b 	bl	8005fc4 <std>
 80060ae:	bd10      	pop	{r4, pc}
 80060b0:	2000043c 	.word	0x2000043c
 80060b4:	08006031 	.word	0x08006031
 80060b8:	20000304 	.word	0x20000304
 80060bc:	2000036c 	.word	0x2000036c
 80060c0:	200003d4 	.word	0x200003d4

080060c4 <__sfp_lock_acquire>:
 80060c4:	b510      	push	{r4, lr}
 80060c6:	4802      	ldr	r0, [pc, #8]	; (80060d0 <__sfp_lock_acquire+0xc>)
 80060c8:	f000 f91d 	bl	8006306 <__retarget_lock_acquire_recursive>
 80060cc:	bd10      	pop	{r4, pc}
 80060ce:	46c0      	nop			; (mov r8, r8)
 80060d0:	20000445 	.word	0x20000445

080060d4 <__sfp_lock_release>:
 80060d4:	b510      	push	{r4, lr}
 80060d6:	4802      	ldr	r0, [pc, #8]	; (80060e0 <__sfp_lock_release+0xc>)
 80060d8:	f000 f916 	bl	8006308 <__retarget_lock_release_recursive>
 80060dc:	bd10      	pop	{r4, pc}
 80060de:	46c0      	nop			; (mov r8, r8)
 80060e0:	20000445 	.word	0x20000445

080060e4 <__sinit>:
 80060e4:	b510      	push	{r4, lr}
 80060e6:	0004      	movs	r4, r0
 80060e8:	f7ff ffec 	bl	80060c4 <__sfp_lock_acquire>
 80060ec:	6a23      	ldr	r3, [r4, #32]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d002      	beq.n	80060f8 <__sinit+0x14>
 80060f2:	f7ff ffef 	bl	80060d4 <__sfp_lock_release>
 80060f6:	bd10      	pop	{r4, pc}
 80060f8:	4b04      	ldr	r3, [pc, #16]	; (800610c <__sinit+0x28>)
 80060fa:	6223      	str	r3, [r4, #32]
 80060fc:	4b04      	ldr	r3, [pc, #16]	; (8006110 <__sinit+0x2c>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d1f6      	bne.n	80060f2 <__sinit+0xe>
 8006104:	f7ff ffc0 	bl	8006088 <global_stdio_init.part.0>
 8006108:	e7f3      	b.n	80060f2 <__sinit+0xe>
 800610a:	46c0      	nop			; (mov r8, r8)
 800610c:	0800604d 	.word	0x0800604d
 8006110:	2000043c 	.word	0x2000043c

08006114 <_fwalk_sglue>:
 8006114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006116:	0014      	movs	r4, r2
 8006118:	2600      	movs	r6, #0
 800611a:	9000      	str	r0, [sp, #0]
 800611c:	9101      	str	r1, [sp, #4]
 800611e:	68a5      	ldr	r5, [r4, #8]
 8006120:	6867      	ldr	r7, [r4, #4]
 8006122:	3f01      	subs	r7, #1
 8006124:	d504      	bpl.n	8006130 <_fwalk_sglue+0x1c>
 8006126:	6824      	ldr	r4, [r4, #0]
 8006128:	2c00      	cmp	r4, #0
 800612a:	d1f8      	bne.n	800611e <_fwalk_sglue+0xa>
 800612c:	0030      	movs	r0, r6
 800612e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006130:	89ab      	ldrh	r3, [r5, #12]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d908      	bls.n	8006148 <_fwalk_sglue+0x34>
 8006136:	220e      	movs	r2, #14
 8006138:	5eab      	ldrsh	r3, [r5, r2]
 800613a:	3301      	adds	r3, #1
 800613c:	d004      	beq.n	8006148 <_fwalk_sglue+0x34>
 800613e:	0029      	movs	r1, r5
 8006140:	9800      	ldr	r0, [sp, #0]
 8006142:	9b01      	ldr	r3, [sp, #4]
 8006144:	4798      	blx	r3
 8006146:	4306      	orrs	r6, r0
 8006148:	3568      	adds	r5, #104	; 0x68
 800614a:	e7ea      	b.n	8006122 <_fwalk_sglue+0xe>

0800614c <iprintf>:
 800614c:	b40f      	push	{r0, r1, r2, r3}
 800614e:	b507      	push	{r0, r1, r2, lr}
 8006150:	4905      	ldr	r1, [pc, #20]	; (8006168 <iprintf+0x1c>)
 8006152:	ab04      	add	r3, sp, #16
 8006154:	6808      	ldr	r0, [r1, #0]
 8006156:	cb04      	ldmia	r3!, {r2}
 8006158:	6881      	ldr	r1, [r0, #8]
 800615a:	9301      	str	r3, [sp, #4]
 800615c:	f000 fa04 	bl	8006568 <_vfiprintf_r>
 8006160:	b003      	add	sp, #12
 8006162:	bc08      	pop	{r3}
 8006164:	b004      	add	sp, #16
 8006166:	4718      	bx	r3
 8006168:	200000a4 	.word	0x200000a4

0800616c <__sread>:
 800616c:	b570      	push	{r4, r5, r6, lr}
 800616e:	000c      	movs	r4, r1
 8006170:	250e      	movs	r5, #14
 8006172:	5f49      	ldrsh	r1, [r1, r5]
 8006174:	f000 f874 	bl	8006260 <_read_r>
 8006178:	2800      	cmp	r0, #0
 800617a:	db03      	blt.n	8006184 <__sread+0x18>
 800617c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800617e:	181b      	adds	r3, r3, r0
 8006180:	6563      	str	r3, [r4, #84]	; 0x54
 8006182:	bd70      	pop	{r4, r5, r6, pc}
 8006184:	89a3      	ldrh	r3, [r4, #12]
 8006186:	4a02      	ldr	r2, [pc, #8]	; (8006190 <__sread+0x24>)
 8006188:	4013      	ands	r3, r2
 800618a:	81a3      	strh	r3, [r4, #12]
 800618c:	e7f9      	b.n	8006182 <__sread+0x16>
 800618e:	46c0      	nop			; (mov r8, r8)
 8006190:	ffffefff 	.word	0xffffefff

08006194 <__swrite>:
 8006194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006196:	001f      	movs	r7, r3
 8006198:	898b      	ldrh	r3, [r1, #12]
 800619a:	0005      	movs	r5, r0
 800619c:	000c      	movs	r4, r1
 800619e:	0016      	movs	r6, r2
 80061a0:	05db      	lsls	r3, r3, #23
 80061a2:	d505      	bpl.n	80061b0 <__swrite+0x1c>
 80061a4:	230e      	movs	r3, #14
 80061a6:	5ec9      	ldrsh	r1, [r1, r3]
 80061a8:	2200      	movs	r2, #0
 80061aa:	2302      	movs	r3, #2
 80061ac:	f000 f844 	bl	8006238 <_lseek_r>
 80061b0:	89a3      	ldrh	r3, [r4, #12]
 80061b2:	4a05      	ldr	r2, [pc, #20]	; (80061c8 <__swrite+0x34>)
 80061b4:	0028      	movs	r0, r5
 80061b6:	4013      	ands	r3, r2
 80061b8:	81a3      	strh	r3, [r4, #12]
 80061ba:	0032      	movs	r2, r6
 80061bc:	230e      	movs	r3, #14
 80061be:	5ee1      	ldrsh	r1, [r4, r3]
 80061c0:	003b      	movs	r3, r7
 80061c2:	f000 f861 	bl	8006288 <_write_r>
 80061c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061c8:	ffffefff 	.word	0xffffefff

080061cc <__sseek>:
 80061cc:	b570      	push	{r4, r5, r6, lr}
 80061ce:	000c      	movs	r4, r1
 80061d0:	250e      	movs	r5, #14
 80061d2:	5f49      	ldrsh	r1, [r1, r5]
 80061d4:	f000 f830 	bl	8006238 <_lseek_r>
 80061d8:	89a3      	ldrh	r3, [r4, #12]
 80061da:	1c42      	adds	r2, r0, #1
 80061dc:	d103      	bne.n	80061e6 <__sseek+0x1a>
 80061de:	4a05      	ldr	r2, [pc, #20]	; (80061f4 <__sseek+0x28>)
 80061e0:	4013      	ands	r3, r2
 80061e2:	81a3      	strh	r3, [r4, #12]
 80061e4:	bd70      	pop	{r4, r5, r6, pc}
 80061e6:	2280      	movs	r2, #128	; 0x80
 80061e8:	0152      	lsls	r2, r2, #5
 80061ea:	4313      	orrs	r3, r2
 80061ec:	81a3      	strh	r3, [r4, #12]
 80061ee:	6560      	str	r0, [r4, #84]	; 0x54
 80061f0:	e7f8      	b.n	80061e4 <__sseek+0x18>
 80061f2:	46c0      	nop			; (mov r8, r8)
 80061f4:	ffffefff 	.word	0xffffefff

080061f8 <__sclose>:
 80061f8:	b510      	push	{r4, lr}
 80061fa:	230e      	movs	r3, #14
 80061fc:	5ec9      	ldrsh	r1, [r1, r3]
 80061fe:	f000 f809 	bl	8006214 <_close_r>
 8006202:	bd10      	pop	{r4, pc}

08006204 <memset>:
 8006204:	0003      	movs	r3, r0
 8006206:	1882      	adds	r2, r0, r2
 8006208:	4293      	cmp	r3, r2
 800620a:	d100      	bne.n	800620e <memset+0xa>
 800620c:	4770      	bx	lr
 800620e:	7019      	strb	r1, [r3, #0]
 8006210:	3301      	adds	r3, #1
 8006212:	e7f9      	b.n	8006208 <memset+0x4>

08006214 <_close_r>:
 8006214:	2300      	movs	r3, #0
 8006216:	b570      	push	{r4, r5, r6, lr}
 8006218:	4d06      	ldr	r5, [pc, #24]	; (8006234 <_close_r+0x20>)
 800621a:	0004      	movs	r4, r0
 800621c:	0008      	movs	r0, r1
 800621e:	602b      	str	r3, [r5, #0]
 8006220:	f7fc fb57 	bl	80028d2 <_close>
 8006224:	1c43      	adds	r3, r0, #1
 8006226:	d103      	bne.n	8006230 <_close_r+0x1c>
 8006228:	682b      	ldr	r3, [r5, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d000      	beq.n	8006230 <_close_r+0x1c>
 800622e:	6023      	str	r3, [r4, #0]
 8006230:	bd70      	pop	{r4, r5, r6, pc}
 8006232:	46c0      	nop			; (mov r8, r8)
 8006234:	20000440 	.word	0x20000440

08006238 <_lseek_r>:
 8006238:	b570      	push	{r4, r5, r6, lr}
 800623a:	0004      	movs	r4, r0
 800623c:	0008      	movs	r0, r1
 800623e:	0011      	movs	r1, r2
 8006240:	001a      	movs	r2, r3
 8006242:	2300      	movs	r3, #0
 8006244:	4d05      	ldr	r5, [pc, #20]	; (800625c <_lseek_r+0x24>)
 8006246:	602b      	str	r3, [r5, #0]
 8006248:	f7fc fb64 	bl	8002914 <_lseek>
 800624c:	1c43      	adds	r3, r0, #1
 800624e:	d103      	bne.n	8006258 <_lseek_r+0x20>
 8006250:	682b      	ldr	r3, [r5, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d000      	beq.n	8006258 <_lseek_r+0x20>
 8006256:	6023      	str	r3, [r4, #0]
 8006258:	bd70      	pop	{r4, r5, r6, pc}
 800625a:	46c0      	nop			; (mov r8, r8)
 800625c:	20000440 	.word	0x20000440

08006260 <_read_r>:
 8006260:	b570      	push	{r4, r5, r6, lr}
 8006262:	0004      	movs	r4, r0
 8006264:	0008      	movs	r0, r1
 8006266:	0011      	movs	r1, r2
 8006268:	001a      	movs	r2, r3
 800626a:	2300      	movs	r3, #0
 800626c:	4d05      	ldr	r5, [pc, #20]	; (8006284 <_read_r+0x24>)
 800626e:	602b      	str	r3, [r5, #0]
 8006270:	f7fc fb12 	bl	8002898 <_read>
 8006274:	1c43      	adds	r3, r0, #1
 8006276:	d103      	bne.n	8006280 <_read_r+0x20>
 8006278:	682b      	ldr	r3, [r5, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d000      	beq.n	8006280 <_read_r+0x20>
 800627e:	6023      	str	r3, [r4, #0]
 8006280:	bd70      	pop	{r4, r5, r6, pc}
 8006282:	46c0      	nop			; (mov r8, r8)
 8006284:	20000440 	.word	0x20000440

08006288 <_write_r>:
 8006288:	b570      	push	{r4, r5, r6, lr}
 800628a:	0004      	movs	r4, r0
 800628c:	0008      	movs	r0, r1
 800628e:	0011      	movs	r1, r2
 8006290:	001a      	movs	r2, r3
 8006292:	2300      	movs	r3, #0
 8006294:	4d05      	ldr	r5, [pc, #20]	; (80062ac <_write_r+0x24>)
 8006296:	602b      	str	r3, [r5, #0]
 8006298:	f7fb f986 	bl	80015a8 <_write>
 800629c:	1c43      	adds	r3, r0, #1
 800629e:	d103      	bne.n	80062a8 <_write_r+0x20>
 80062a0:	682b      	ldr	r3, [r5, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d000      	beq.n	80062a8 <_write_r+0x20>
 80062a6:	6023      	str	r3, [r4, #0]
 80062a8:	bd70      	pop	{r4, r5, r6, pc}
 80062aa:	46c0      	nop			; (mov r8, r8)
 80062ac:	20000440 	.word	0x20000440

080062b0 <__errno>:
 80062b0:	4b01      	ldr	r3, [pc, #4]	; (80062b8 <__errno+0x8>)
 80062b2:	6818      	ldr	r0, [r3, #0]
 80062b4:	4770      	bx	lr
 80062b6:	46c0      	nop			; (mov r8, r8)
 80062b8:	200000a4 	.word	0x200000a4

080062bc <__libc_init_array>:
 80062bc:	b570      	push	{r4, r5, r6, lr}
 80062be:	2600      	movs	r6, #0
 80062c0:	4c0c      	ldr	r4, [pc, #48]	; (80062f4 <__libc_init_array+0x38>)
 80062c2:	4d0d      	ldr	r5, [pc, #52]	; (80062f8 <__libc_init_array+0x3c>)
 80062c4:	1b64      	subs	r4, r4, r5
 80062c6:	10a4      	asrs	r4, r4, #2
 80062c8:	42a6      	cmp	r6, r4
 80062ca:	d109      	bne.n	80062e0 <__libc_init_array+0x24>
 80062cc:	2600      	movs	r6, #0
 80062ce:	f000 fdeb 	bl	8006ea8 <_init>
 80062d2:	4c0a      	ldr	r4, [pc, #40]	; (80062fc <__libc_init_array+0x40>)
 80062d4:	4d0a      	ldr	r5, [pc, #40]	; (8006300 <__libc_init_array+0x44>)
 80062d6:	1b64      	subs	r4, r4, r5
 80062d8:	10a4      	asrs	r4, r4, #2
 80062da:	42a6      	cmp	r6, r4
 80062dc:	d105      	bne.n	80062ea <__libc_init_array+0x2e>
 80062de:	bd70      	pop	{r4, r5, r6, pc}
 80062e0:	00b3      	lsls	r3, r6, #2
 80062e2:	58eb      	ldr	r3, [r5, r3]
 80062e4:	4798      	blx	r3
 80062e6:	3601      	adds	r6, #1
 80062e8:	e7ee      	b.n	80062c8 <__libc_init_array+0xc>
 80062ea:	00b3      	lsls	r3, r6, #2
 80062ec:	58eb      	ldr	r3, [r5, r3]
 80062ee:	4798      	blx	r3
 80062f0:	3601      	adds	r6, #1
 80062f2:	e7f2      	b.n	80062da <__libc_init_array+0x1e>
 80062f4:	080070a0 	.word	0x080070a0
 80062f8:	080070a0 	.word	0x080070a0
 80062fc:	080070a4 	.word	0x080070a4
 8006300:	080070a0 	.word	0x080070a0

08006304 <__retarget_lock_init_recursive>:
 8006304:	4770      	bx	lr

08006306 <__retarget_lock_acquire_recursive>:
 8006306:	4770      	bx	lr

08006308 <__retarget_lock_release_recursive>:
 8006308:	4770      	bx	lr

0800630a <memcpy>:
 800630a:	2300      	movs	r3, #0
 800630c:	b510      	push	{r4, lr}
 800630e:	429a      	cmp	r2, r3
 8006310:	d100      	bne.n	8006314 <memcpy+0xa>
 8006312:	bd10      	pop	{r4, pc}
 8006314:	5ccc      	ldrb	r4, [r1, r3]
 8006316:	54c4      	strb	r4, [r0, r3]
 8006318:	3301      	adds	r3, #1
 800631a:	e7f8      	b.n	800630e <memcpy+0x4>

0800631c <_free_r>:
 800631c:	b570      	push	{r4, r5, r6, lr}
 800631e:	0005      	movs	r5, r0
 8006320:	2900      	cmp	r1, #0
 8006322:	d010      	beq.n	8006346 <_free_r+0x2a>
 8006324:	1f0c      	subs	r4, r1, #4
 8006326:	6823      	ldr	r3, [r4, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	da00      	bge.n	800632e <_free_r+0x12>
 800632c:	18e4      	adds	r4, r4, r3
 800632e:	0028      	movs	r0, r5
 8006330:	f000 f8e2 	bl	80064f8 <__malloc_lock>
 8006334:	4a1d      	ldr	r2, [pc, #116]	; (80063ac <_free_r+0x90>)
 8006336:	6813      	ldr	r3, [r2, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d105      	bne.n	8006348 <_free_r+0x2c>
 800633c:	6063      	str	r3, [r4, #4]
 800633e:	6014      	str	r4, [r2, #0]
 8006340:	0028      	movs	r0, r5
 8006342:	f000 f8e1 	bl	8006508 <__malloc_unlock>
 8006346:	bd70      	pop	{r4, r5, r6, pc}
 8006348:	42a3      	cmp	r3, r4
 800634a:	d908      	bls.n	800635e <_free_r+0x42>
 800634c:	6820      	ldr	r0, [r4, #0]
 800634e:	1821      	adds	r1, r4, r0
 8006350:	428b      	cmp	r3, r1
 8006352:	d1f3      	bne.n	800633c <_free_r+0x20>
 8006354:	6819      	ldr	r1, [r3, #0]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	1809      	adds	r1, r1, r0
 800635a:	6021      	str	r1, [r4, #0]
 800635c:	e7ee      	b.n	800633c <_free_r+0x20>
 800635e:	001a      	movs	r2, r3
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <_free_r+0x4e>
 8006366:	42a3      	cmp	r3, r4
 8006368:	d9f9      	bls.n	800635e <_free_r+0x42>
 800636a:	6811      	ldr	r1, [r2, #0]
 800636c:	1850      	adds	r0, r2, r1
 800636e:	42a0      	cmp	r0, r4
 8006370:	d10b      	bne.n	800638a <_free_r+0x6e>
 8006372:	6820      	ldr	r0, [r4, #0]
 8006374:	1809      	adds	r1, r1, r0
 8006376:	1850      	adds	r0, r2, r1
 8006378:	6011      	str	r1, [r2, #0]
 800637a:	4283      	cmp	r3, r0
 800637c:	d1e0      	bne.n	8006340 <_free_r+0x24>
 800637e:	6818      	ldr	r0, [r3, #0]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	1841      	adds	r1, r0, r1
 8006384:	6011      	str	r1, [r2, #0]
 8006386:	6053      	str	r3, [r2, #4]
 8006388:	e7da      	b.n	8006340 <_free_r+0x24>
 800638a:	42a0      	cmp	r0, r4
 800638c:	d902      	bls.n	8006394 <_free_r+0x78>
 800638e:	230c      	movs	r3, #12
 8006390:	602b      	str	r3, [r5, #0]
 8006392:	e7d5      	b.n	8006340 <_free_r+0x24>
 8006394:	6820      	ldr	r0, [r4, #0]
 8006396:	1821      	adds	r1, r4, r0
 8006398:	428b      	cmp	r3, r1
 800639a:	d103      	bne.n	80063a4 <_free_r+0x88>
 800639c:	6819      	ldr	r1, [r3, #0]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	1809      	adds	r1, r1, r0
 80063a2:	6021      	str	r1, [r4, #0]
 80063a4:	6063      	str	r3, [r4, #4]
 80063a6:	6054      	str	r4, [r2, #4]
 80063a8:	e7ca      	b.n	8006340 <_free_r+0x24>
 80063aa:	46c0      	nop			; (mov r8, r8)
 80063ac:	20000448 	.word	0x20000448

080063b0 <sbrk_aligned>:
 80063b0:	b570      	push	{r4, r5, r6, lr}
 80063b2:	4e0f      	ldr	r6, [pc, #60]	; (80063f0 <sbrk_aligned+0x40>)
 80063b4:	000d      	movs	r5, r1
 80063b6:	6831      	ldr	r1, [r6, #0]
 80063b8:	0004      	movs	r4, r0
 80063ba:	2900      	cmp	r1, #0
 80063bc:	d102      	bne.n	80063c4 <sbrk_aligned+0x14>
 80063be:	f000 fccb 	bl	8006d58 <_sbrk_r>
 80063c2:	6030      	str	r0, [r6, #0]
 80063c4:	0029      	movs	r1, r5
 80063c6:	0020      	movs	r0, r4
 80063c8:	f000 fcc6 	bl	8006d58 <_sbrk_r>
 80063cc:	1c43      	adds	r3, r0, #1
 80063ce:	d00a      	beq.n	80063e6 <sbrk_aligned+0x36>
 80063d0:	2303      	movs	r3, #3
 80063d2:	1cc5      	adds	r5, r0, #3
 80063d4:	439d      	bics	r5, r3
 80063d6:	42a8      	cmp	r0, r5
 80063d8:	d007      	beq.n	80063ea <sbrk_aligned+0x3a>
 80063da:	1a29      	subs	r1, r5, r0
 80063dc:	0020      	movs	r0, r4
 80063de:	f000 fcbb 	bl	8006d58 <_sbrk_r>
 80063e2:	3001      	adds	r0, #1
 80063e4:	d101      	bne.n	80063ea <sbrk_aligned+0x3a>
 80063e6:	2501      	movs	r5, #1
 80063e8:	426d      	negs	r5, r5
 80063ea:	0028      	movs	r0, r5
 80063ec:	bd70      	pop	{r4, r5, r6, pc}
 80063ee:	46c0      	nop			; (mov r8, r8)
 80063f0:	2000044c 	.word	0x2000044c

080063f4 <_malloc_r>:
 80063f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063f6:	2203      	movs	r2, #3
 80063f8:	1ccb      	adds	r3, r1, #3
 80063fa:	4393      	bics	r3, r2
 80063fc:	3308      	adds	r3, #8
 80063fe:	0006      	movs	r6, r0
 8006400:	001f      	movs	r7, r3
 8006402:	2b0c      	cmp	r3, #12
 8006404:	d238      	bcs.n	8006478 <_malloc_r+0x84>
 8006406:	270c      	movs	r7, #12
 8006408:	42b9      	cmp	r1, r7
 800640a:	d837      	bhi.n	800647c <_malloc_r+0x88>
 800640c:	0030      	movs	r0, r6
 800640e:	f000 f873 	bl	80064f8 <__malloc_lock>
 8006412:	4b38      	ldr	r3, [pc, #224]	; (80064f4 <_malloc_r+0x100>)
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	001c      	movs	r4, r3
 800641a:	2c00      	cmp	r4, #0
 800641c:	d133      	bne.n	8006486 <_malloc_r+0x92>
 800641e:	0039      	movs	r1, r7
 8006420:	0030      	movs	r0, r6
 8006422:	f7ff ffc5 	bl	80063b0 <sbrk_aligned>
 8006426:	0004      	movs	r4, r0
 8006428:	1c43      	adds	r3, r0, #1
 800642a:	d15e      	bne.n	80064ea <_malloc_r+0xf6>
 800642c:	9b00      	ldr	r3, [sp, #0]
 800642e:	681c      	ldr	r4, [r3, #0]
 8006430:	0025      	movs	r5, r4
 8006432:	2d00      	cmp	r5, #0
 8006434:	d14e      	bne.n	80064d4 <_malloc_r+0xe0>
 8006436:	2c00      	cmp	r4, #0
 8006438:	d051      	beq.n	80064de <_malloc_r+0xea>
 800643a:	6823      	ldr	r3, [r4, #0]
 800643c:	0029      	movs	r1, r5
 800643e:	18e3      	adds	r3, r4, r3
 8006440:	0030      	movs	r0, r6
 8006442:	9301      	str	r3, [sp, #4]
 8006444:	f000 fc88 	bl	8006d58 <_sbrk_r>
 8006448:	9b01      	ldr	r3, [sp, #4]
 800644a:	4283      	cmp	r3, r0
 800644c:	d147      	bne.n	80064de <_malloc_r+0xea>
 800644e:	6823      	ldr	r3, [r4, #0]
 8006450:	0030      	movs	r0, r6
 8006452:	1aff      	subs	r7, r7, r3
 8006454:	0039      	movs	r1, r7
 8006456:	f7ff ffab 	bl	80063b0 <sbrk_aligned>
 800645a:	3001      	adds	r0, #1
 800645c:	d03f      	beq.n	80064de <_malloc_r+0xea>
 800645e:	6823      	ldr	r3, [r4, #0]
 8006460:	19db      	adds	r3, r3, r7
 8006462:	6023      	str	r3, [r4, #0]
 8006464:	9b00      	ldr	r3, [sp, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d040      	beq.n	80064ee <_malloc_r+0xfa>
 800646c:	685a      	ldr	r2, [r3, #4]
 800646e:	42a2      	cmp	r2, r4
 8006470:	d133      	bne.n	80064da <_malloc_r+0xe6>
 8006472:	2200      	movs	r2, #0
 8006474:	605a      	str	r2, [r3, #4]
 8006476:	e014      	b.n	80064a2 <_malloc_r+0xae>
 8006478:	2b00      	cmp	r3, #0
 800647a:	dac5      	bge.n	8006408 <_malloc_r+0x14>
 800647c:	230c      	movs	r3, #12
 800647e:	2500      	movs	r5, #0
 8006480:	6033      	str	r3, [r6, #0]
 8006482:	0028      	movs	r0, r5
 8006484:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006486:	6821      	ldr	r1, [r4, #0]
 8006488:	1bc9      	subs	r1, r1, r7
 800648a:	d420      	bmi.n	80064ce <_malloc_r+0xda>
 800648c:	290b      	cmp	r1, #11
 800648e:	d918      	bls.n	80064c2 <_malloc_r+0xce>
 8006490:	19e2      	adds	r2, r4, r7
 8006492:	6027      	str	r7, [r4, #0]
 8006494:	42a3      	cmp	r3, r4
 8006496:	d112      	bne.n	80064be <_malloc_r+0xca>
 8006498:	9b00      	ldr	r3, [sp, #0]
 800649a:	601a      	str	r2, [r3, #0]
 800649c:	6863      	ldr	r3, [r4, #4]
 800649e:	6011      	str	r1, [r2, #0]
 80064a0:	6053      	str	r3, [r2, #4]
 80064a2:	0030      	movs	r0, r6
 80064a4:	0025      	movs	r5, r4
 80064a6:	f000 f82f 	bl	8006508 <__malloc_unlock>
 80064aa:	2207      	movs	r2, #7
 80064ac:	350b      	adds	r5, #11
 80064ae:	1d23      	adds	r3, r4, #4
 80064b0:	4395      	bics	r5, r2
 80064b2:	1aea      	subs	r2, r5, r3
 80064b4:	429d      	cmp	r5, r3
 80064b6:	d0e4      	beq.n	8006482 <_malloc_r+0x8e>
 80064b8:	1b5b      	subs	r3, r3, r5
 80064ba:	50a3      	str	r3, [r4, r2]
 80064bc:	e7e1      	b.n	8006482 <_malloc_r+0x8e>
 80064be:	605a      	str	r2, [r3, #4]
 80064c0:	e7ec      	b.n	800649c <_malloc_r+0xa8>
 80064c2:	6862      	ldr	r2, [r4, #4]
 80064c4:	42a3      	cmp	r3, r4
 80064c6:	d1d5      	bne.n	8006474 <_malloc_r+0x80>
 80064c8:	9b00      	ldr	r3, [sp, #0]
 80064ca:	601a      	str	r2, [r3, #0]
 80064cc:	e7e9      	b.n	80064a2 <_malloc_r+0xae>
 80064ce:	0023      	movs	r3, r4
 80064d0:	6864      	ldr	r4, [r4, #4]
 80064d2:	e7a2      	b.n	800641a <_malloc_r+0x26>
 80064d4:	002c      	movs	r4, r5
 80064d6:	686d      	ldr	r5, [r5, #4]
 80064d8:	e7ab      	b.n	8006432 <_malloc_r+0x3e>
 80064da:	0013      	movs	r3, r2
 80064dc:	e7c4      	b.n	8006468 <_malloc_r+0x74>
 80064de:	230c      	movs	r3, #12
 80064e0:	0030      	movs	r0, r6
 80064e2:	6033      	str	r3, [r6, #0]
 80064e4:	f000 f810 	bl	8006508 <__malloc_unlock>
 80064e8:	e7cb      	b.n	8006482 <_malloc_r+0x8e>
 80064ea:	6027      	str	r7, [r4, #0]
 80064ec:	e7d9      	b.n	80064a2 <_malloc_r+0xae>
 80064ee:	605b      	str	r3, [r3, #4]
 80064f0:	deff      	udf	#255	; 0xff
 80064f2:	46c0      	nop			; (mov r8, r8)
 80064f4:	20000448 	.word	0x20000448

080064f8 <__malloc_lock>:
 80064f8:	b510      	push	{r4, lr}
 80064fa:	4802      	ldr	r0, [pc, #8]	; (8006504 <__malloc_lock+0xc>)
 80064fc:	f7ff ff03 	bl	8006306 <__retarget_lock_acquire_recursive>
 8006500:	bd10      	pop	{r4, pc}
 8006502:	46c0      	nop			; (mov r8, r8)
 8006504:	20000444 	.word	0x20000444

08006508 <__malloc_unlock>:
 8006508:	b510      	push	{r4, lr}
 800650a:	4802      	ldr	r0, [pc, #8]	; (8006514 <__malloc_unlock+0xc>)
 800650c:	f7ff fefc 	bl	8006308 <__retarget_lock_release_recursive>
 8006510:	bd10      	pop	{r4, pc}
 8006512:	46c0      	nop			; (mov r8, r8)
 8006514:	20000444 	.word	0x20000444

08006518 <__sfputc_r>:
 8006518:	6893      	ldr	r3, [r2, #8]
 800651a:	b510      	push	{r4, lr}
 800651c:	3b01      	subs	r3, #1
 800651e:	6093      	str	r3, [r2, #8]
 8006520:	2b00      	cmp	r3, #0
 8006522:	da04      	bge.n	800652e <__sfputc_r+0x16>
 8006524:	6994      	ldr	r4, [r2, #24]
 8006526:	42a3      	cmp	r3, r4
 8006528:	db07      	blt.n	800653a <__sfputc_r+0x22>
 800652a:	290a      	cmp	r1, #10
 800652c:	d005      	beq.n	800653a <__sfputc_r+0x22>
 800652e:	6813      	ldr	r3, [r2, #0]
 8006530:	1c58      	adds	r0, r3, #1
 8006532:	6010      	str	r0, [r2, #0]
 8006534:	7019      	strb	r1, [r3, #0]
 8006536:	0008      	movs	r0, r1
 8006538:	bd10      	pop	{r4, pc}
 800653a:	f000 fb66 	bl	8006c0a <__swbuf_r>
 800653e:	0001      	movs	r1, r0
 8006540:	e7f9      	b.n	8006536 <__sfputc_r+0x1e>

08006542 <__sfputs_r>:
 8006542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006544:	0006      	movs	r6, r0
 8006546:	000f      	movs	r7, r1
 8006548:	0014      	movs	r4, r2
 800654a:	18d5      	adds	r5, r2, r3
 800654c:	42ac      	cmp	r4, r5
 800654e:	d101      	bne.n	8006554 <__sfputs_r+0x12>
 8006550:	2000      	movs	r0, #0
 8006552:	e007      	b.n	8006564 <__sfputs_r+0x22>
 8006554:	7821      	ldrb	r1, [r4, #0]
 8006556:	003a      	movs	r2, r7
 8006558:	0030      	movs	r0, r6
 800655a:	f7ff ffdd 	bl	8006518 <__sfputc_r>
 800655e:	3401      	adds	r4, #1
 8006560:	1c43      	adds	r3, r0, #1
 8006562:	d1f3      	bne.n	800654c <__sfputs_r+0xa>
 8006564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006568 <_vfiprintf_r>:
 8006568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800656a:	b0a1      	sub	sp, #132	; 0x84
 800656c:	000f      	movs	r7, r1
 800656e:	0015      	movs	r5, r2
 8006570:	001e      	movs	r6, r3
 8006572:	9003      	str	r0, [sp, #12]
 8006574:	2800      	cmp	r0, #0
 8006576:	d004      	beq.n	8006582 <_vfiprintf_r+0x1a>
 8006578:	6a03      	ldr	r3, [r0, #32]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d101      	bne.n	8006582 <_vfiprintf_r+0x1a>
 800657e:	f7ff fdb1 	bl	80060e4 <__sinit>
 8006582:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006584:	07db      	lsls	r3, r3, #31
 8006586:	d405      	bmi.n	8006594 <_vfiprintf_r+0x2c>
 8006588:	89bb      	ldrh	r3, [r7, #12]
 800658a:	059b      	lsls	r3, r3, #22
 800658c:	d402      	bmi.n	8006594 <_vfiprintf_r+0x2c>
 800658e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006590:	f7ff feb9 	bl	8006306 <__retarget_lock_acquire_recursive>
 8006594:	89bb      	ldrh	r3, [r7, #12]
 8006596:	071b      	lsls	r3, r3, #28
 8006598:	d502      	bpl.n	80065a0 <_vfiprintf_r+0x38>
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d113      	bne.n	80065c8 <_vfiprintf_r+0x60>
 80065a0:	0039      	movs	r1, r7
 80065a2:	9803      	ldr	r0, [sp, #12]
 80065a4:	f000 fb74 	bl	8006c90 <__swsetup_r>
 80065a8:	2800      	cmp	r0, #0
 80065aa:	d00d      	beq.n	80065c8 <_vfiprintf_r+0x60>
 80065ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065ae:	07db      	lsls	r3, r3, #31
 80065b0:	d503      	bpl.n	80065ba <_vfiprintf_r+0x52>
 80065b2:	2001      	movs	r0, #1
 80065b4:	4240      	negs	r0, r0
 80065b6:	b021      	add	sp, #132	; 0x84
 80065b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065ba:	89bb      	ldrh	r3, [r7, #12]
 80065bc:	059b      	lsls	r3, r3, #22
 80065be:	d4f8      	bmi.n	80065b2 <_vfiprintf_r+0x4a>
 80065c0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80065c2:	f7ff fea1 	bl	8006308 <__retarget_lock_release_recursive>
 80065c6:	e7f4      	b.n	80065b2 <_vfiprintf_r+0x4a>
 80065c8:	2300      	movs	r3, #0
 80065ca:	ac08      	add	r4, sp, #32
 80065cc:	6163      	str	r3, [r4, #20]
 80065ce:	3320      	adds	r3, #32
 80065d0:	7663      	strb	r3, [r4, #25]
 80065d2:	3310      	adds	r3, #16
 80065d4:	76a3      	strb	r3, [r4, #26]
 80065d6:	9607      	str	r6, [sp, #28]
 80065d8:	002e      	movs	r6, r5
 80065da:	7833      	ldrb	r3, [r6, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d001      	beq.n	80065e4 <_vfiprintf_r+0x7c>
 80065e0:	2b25      	cmp	r3, #37	; 0x25
 80065e2:	d148      	bne.n	8006676 <_vfiprintf_r+0x10e>
 80065e4:	1b73      	subs	r3, r6, r5
 80065e6:	9305      	str	r3, [sp, #20]
 80065e8:	42ae      	cmp	r6, r5
 80065ea:	d00b      	beq.n	8006604 <_vfiprintf_r+0x9c>
 80065ec:	002a      	movs	r2, r5
 80065ee:	0039      	movs	r1, r7
 80065f0:	9803      	ldr	r0, [sp, #12]
 80065f2:	f7ff ffa6 	bl	8006542 <__sfputs_r>
 80065f6:	3001      	adds	r0, #1
 80065f8:	d100      	bne.n	80065fc <_vfiprintf_r+0x94>
 80065fa:	e0af      	b.n	800675c <_vfiprintf_r+0x1f4>
 80065fc:	6963      	ldr	r3, [r4, #20]
 80065fe:	9a05      	ldr	r2, [sp, #20]
 8006600:	189b      	adds	r3, r3, r2
 8006602:	6163      	str	r3, [r4, #20]
 8006604:	7833      	ldrb	r3, [r6, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d100      	bne.n	800660c <_vfiprintf_r+0xa4>
 800660a:	e0a7      	b.n	800675c <_vfiprintf_r+0x1f4>
 800660c:	2201      	movs	r2, #1
 800660e:	2300      	movs	r3, #0
 8006610:	4252      	negs	r2, r2
 8006612:	6062      	str	r2, [r4, #4]
 8006614:	a904      	add	r1, sp, #16
 8006616:	3254      	adds	r2, #84	; 0x54
 8006618:	1852      	adds	r2, r2, r1
 800661a:	1c75      	adds	r5, r6, #1
 800661c:	6023      	str	r3, [r4, #0]
 800661e:	60e3      	str	r3, [r4, #12]
 8006620:	60a3      	str	r3, [r4, #8]
 8006622:	7013      	strb	r3, [r2, #0]
 8006624:	65a3      	str	r3, [r4, #88]	; 0x58
 8006626:	4b59      	ldr	r3, [pc, #356]	; (800678c <_vfiprintf_r+0x224>)
 8006628:	2205      	movs	r2, #5
 800662a:	0018      	movs	r0, r3
 800662c:	7829      	ldrb	r1, [r5, #0]
 800662e:	9305      	str	r3, [sp, #20]
 8006630:	f000 fba4 	bl	8006d7c <memchr>
 8006634:	1c6e      	adds	r6, r5, #1
 8006636:	2800      	cmp	r0, #0
 8006638:	d11f      	bne.n	800667a <_vfiprintf_r+0x112>
 800663a:	6822      	ldr	r2, [r4, #0]
 800663c:	06d3      	lsls	r3, r2, #27
 800663e:	d504      	bpl.n	800664a <_vfiprintf_r+0xe2>
 8006640:	2353      	movs	r3, #83	; 0x53
 8006642:	a904      	add	r1, sp, #16
 8006644:	185b      	adds	r3, r3, r1
 8006646:	2120      	movs	r1, #32
 8006648:	7019      	strb	r1, [r3, #0]
 800664a:	0713      	lsls	r3, r2, #28
 800664c:	d504      	bpl.n	8006658 <_vfiprintf_r+0xf0>
 800664e:	2353      	movs	r3, #83	; 0x53
 8006650:	a904      	add	r1, sp, #16
 8006652:	185b      	adds	r3, r3, r1
 8006654:	212b      	movs	r1, #43	; 0x2b
 8006656:	7019      	strb	r1, [r3, #0]
 8006658:	782b      	ldrb	r3, [r5, #0]
 800665a:	2b2a      	cmp	r3, #42	; 0x2a
 800665c:	d016      	beq.n	800668c <_vfiprintf_r+0x124>
 800665e:	002e      	movs	r6, r5
 8006660:	2100      	movs	r1, #0
 8006662:	200a      	movs	r0, #10
 8006664:	68e3      	ldr	r3, [r4, #12]
 8006666:	7832      	ldrb	r2, [r6, #0]
 8006668:	1c75      	adds	r5, r6, #1
 800666a:	3a30      	subs	r2, #48	; 0x30
 800666c:	2a09      	cmp	r2, #9
 800666e:	d94e      	bls.n	800670e <_vfiprintf_r+0x1a6>
 8006670:	2900      	cmp	r1, #0
 8006672:	d111      	bne.n	8006698 <_vfiprintf_r+0x130>
 8006674:	e017      	b.n	80066a6 <_vfiprintf_r+0x13e>
 8006676:	3601      	adds	r6, #1
 8006678:	e7af      	b.n	80065da <_vfiprintf_r+0x72>
 800667a:	9b05      	ldr	r3, [sp, #20]
 800667c:	6822      	ldr	r2, [r4, #0]
 800667e:	1ac0      	subs	r0, r0, r3
 8006680:	2301      	movs	r3, #1
 8006682:	4083      	lsls	r3, r0
 8006684:	4313      	orrs	r3, r2
 8006686:	0035      	movs	r5, r6
 8006688:	6023      	str	r3, [r4, #0]
 800668a:	e7cc      	b.n	8006626 <_vfiprintf_r+0xbe>
 800668c:	9b07      	ldr	r3, [sp, #28]
 800668e:	1d19      	adds	r1, r3, #4
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	9107      	str	r1, [sp, #28]
 8006694:	2b00      	cmp	r3, #0
 8006696:	db01      	blt.n	800669c <_vfiprintf_r+0x134>
 8006698:	930b      	str	r3, [sp, #44]	; 0x2c
 800669a:	e004      	b.n	80066a6 <_vfiprintf_r+0x13e>
 800669c:	425b      	negs	r3, r3
 800669e:	60e3      	str	r3, [r4, #12]
 80066a0:	2302      	movs	r3, #2
 80066a2:	4313      	orrs	r3, r2
 80066a4:	6023      	str	r3, [r4, #0]
 80066a6:	7833      	ldrb	r3, [r6, #0]
 80066a8:	2b2e      	cmp	r3, #46	; 0x2e
 80066aa:	d10a      	bne.n	80066c2 <_vfiprintf_r+0x15a>
 80066ac:	7873      	ldrb	r3, [r6, #1]
 80066ae:	2b2a      	cmp	r3, #42	; 0x2a
 80066b0:	d135      	bne.n	800671e <_vfiprintf_r+0x1b6>
 80066b2:	9b07      	ldr	r3, [sp, #28]
 80066b4:	3602      	adds	r6, #2
 80066b6:	1d1a      	adds	r2, r3, #4
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	9207      	str	r2, [sp, #28]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	db2b      	blt.n	8006718 <_vfiprintf_r+0x1b0>
 80066c0:	9309      	str	r3, [sp, #36]	; 0x24
 80066c2:	4d33      	ldr	r5, [pc, #204]	; (8006790 <_vfiprintf_r+0x228>)
 80066c4:	2203      	movs	r2, #3
 80066c6:	0028      	movs	r0, r5
 80066c8:	7831      	ldrb	r1, [r6, #0]
 80066ca:	f000 fb57 	bl	8006d7c <memchr>
 80066ce:	2800      	cmp	r0, #0
 80066d0:	d006      	beq.n	80066e0 <_vfiprintf_r+0x178>
 80066d2:	2340      	movs	r3, #64	; 0x40
 80066d4:	1b40      	subs	r0, r0, r5
 80066d6:	4083      	lsls	r3, r0
 80066d8:	6822      	ldr	r2, [r4, #0]
 80066da:	3601      	adds	r6, #1
 80066dc:	4313      	orrs	r3, r2
 80066de:	6023      	str	r3, [r4, #0]
 80066e0:	7831      	ldrb	r1, [r6, #0]
 80066e2:	2206      	movs	r2, #6
 80066e4:	482b      	ldr	r0, [pc, #172]	; (8006794 <_vfiprintf_r+0x22c>)
 80066e6:	1c75      	adds	r5, r6, #1
 80066e8:	7621      	strb	r1, [r4, #24]
 80066ea:	f000 fb47 	bl	8006d7c <memchr>
 80066ee:	2800      	cmp	r0, #0
 80066f0:	d043      	beq.n	800677a <_vfiprintf_r+0x212>
 80066f2:	4b29      	ldr	r3, [pc, #164]	; (8006798 <_vfiprintf_r+0x230>)
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d125      	bne.n	8006744 <_vfiprintf_r+0x1dc>
 80066f8:	2207      	movs	r2, #7
 80066fa:	9b07      	ldr	r3, [sp, #28]
 80066fc:	3307      	adds	r3, #7
 80066fe:	4393      	bics	r3, r2
 8006700:	3308      	adds	r3, #8
 8006702:	9307      	str	r3, [sp, #28]
 8006704:	6963      	ldr	r3, [r4, #20]
 8006706:	9a04      	ldr	r2, [sp, #16]
 8006708:	189b      	adds	r3, r3, r2
 800670a:	6163      	str	r3, [r4, #20]
 800670c:	e764      	b.n	80065d8 <_vfiprintf_r+0x70>
 800670e:	4343      	muls	r3, r0
 8006710:	002e      	movs	r6, r5
 8006712:	2101      	movs	r1, #1
 8006714:	189b      	adds	r3, r3, r2
 8006716:	e7a6      	b.n	8006666 <_vfiprintf_r+0xfe>
 8006718:	2301      	movs	r3, #1
 800671a:	425b      	negs	r3, r3
 800671c:	e7d0      	b.n	80066c0 <_vfiprintf_r+0x158>
 800671e:	2300      	movs	r3, #0
 8006720:	200a      	movs	r0, #10
 8006722:	001a      	movs	r2, r3
 8006724:	3601      	adds	r6, #1
 8006726:	6063      	str	r3, [r4, #4]
 8006728:	7831      	ldrb	r1, [r6, #0]
 800672a:	1c75      	adds	r5, r6, #1
 800672c:	3930      	subs	r1, #48	; 0x30
 800672e:	2909      	cmp	r1, #9
 8006730:	d903      	bls.n	800673a <_vfiprintf_r+0x1d2>
 8006732:	2b00      	cmp	r3, #0
 8006734:	d0c5      	beq.n	80066c2 <_vfiprintf_r+0x15a>
 8006736:	9209      	str	r2, [sp, #36]	; 0x24
 8006738:	e7c3      	b.n	80066c2 <_vfiprintf_r+0x15a>
 800673a:	4342      	muls	r2, r0
 800673c:	002e      	movs	r6, r5
 800673e:	2301      	movs	r3, #1
 8006740:	1852      	adds	r2, r2, r1
 8006742:	e7f1      	b.n	8006728 <_vfiprintf_r+0x1c0>
 8006744:	aa07      	add	r2, sp, #28
 8006746:	9200      	str	r2, [sp, #0]
 8006748:	0021      	movs	r1, r4
 800674a:	003a      	movs	r2, r7
 800674c:	4b13      	ldr	r3, [pc, #76]	; (800679c <_vfiprintf_r+0x234>)
 800674e:	9803      	ldr	r0, [sp, #12]
 8006750:	e000      	b.n	8006754 <_vfiprintf_r+0x1ec>
 8006752:	bf00      	nop
 8006754:	9004      	str	r0, [sp, #16]
 8006756:	9b04      	ldr	r3, [sp, #16]
 8006758:	3301      	adds	r3, #1
 800675a:	d1d3      	bne.n	8006704 <_vfiprintf_r+0x19c>
 800675c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800675e:	07db      	lsls	r3, r3, #31
 8006760:	d405      	bmi.n	800676e <_vfiprintf_r+0x206>
 8006762:	89bb      	ldrh	r3, [r7, #12]
 8006764:	059b      	lsls	r3, r3, #22
 8006766:	d402      	bmi.n	800676e <_vfiprintf_r+0x206>
 8006768:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800676a:	f7ff fdcd 	bl	8006308 <__retarget_lock_release_recursive>
 800676e:	89bb      	ldrh	r3, [r7, #12]
 8006770:	065b      	lsls	r3, r3, #25
 8006772:	d500      	bpl.n	8006776 <_vfiprintf_r+0x20e>
 8006774:	e71d      	b.n	80065b2 <_vfiprintf_r+0x4a>
 8006776:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006778:	e71d      	b.n	80065b6 <_vfiprintf_r+0x4e>
 800677a:	aa07      	add	r2, sp, #28
 800677c:	9200      	str	r2, [sp, #0]
 800677e:	0021      	movs	r1, r4
 8006780:	003a      	movs	r2, r7
 8006782:	4b06      	ldr	r3, [pc, #24]	; (800679c <_vfiprintf_r+0x234>)
 8006784:	9803      	ldr	r0, [sp, #12]
 8006786:	f000 f87b 	bl	8006880 <_printf_i>
 800678a:	e7e3      	b.n	8006754 <_vfiprintf_r+0x1ec>
 800678c:	0800706c 	.word	0x0800706c
 8006790:	08007072 	.word	0x08007072
 8006794:	08007076 	.word	0x08007076
 8006798:	00000000 	.word	0x00000000
 800679c:	08006543 	.word	0x08006543

080067a0 <_printf_common>:
 80067a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067a2:	0016      	movs	r6, r2
 80067a4:	9301      	str	r3, [sp, #4]
 80067a6:	688a      	ldr	r2, [r1, #8]
 80067a8:	690b      	ldr	r3, [r1, #16]
 80067aa:	000c      	movs	r4, r1
 80067ac:	9000      	str	r0, [sp, #0]
 80067ae:	4293      	cmp	r3, r2
 80067b0:	da00      	bge.n	80067b4 <_printf_common+0x14>
 80067b2:	0013      	movs	r3, r2
 80067b4:	0022      	movs	r2, r4
 80067b6:	6033      	str	r3, [r6, #0]
 80067b8:	3243      	adds	r2, #67	; 0x43
 80067ba:	7812      	ldrb	r2, [r2, #0]
 80067bc:	2a00      	cmp	r2, #0
 80067be:	d001      	beq.n	80067c4 <_printf_common+0x24>
 80067c0:	3301      	adds	r3, #1
 80067c2:	6033      	str	r3, [r6, #0]
 80067c4:	6823      	ldr	r3, [r4, #0]
 80067c6:	069b      	lsls	r3, r3, #26
 80067c8:	d502      	bpl.n	80067d0 <_printf_common+0x30>
 80067ca:	6833      	ldr	r3, [r6, #0]
 80067cc:	3302      	adds	r3, #2
 80067ce:	6033      	str	r3, [r6, #0]
 80067d0:	6822      	ldr	r2, [r4, #0]
 80067d2:	2306      	movs	r3, #6
 80067d4:	0015      	movs	r5, r2
 80067d6:	401d      	ands	r5, r3
 80067d8:	421a      	tst	r2, r3
 80067da:	d027      	beq.n	800682c <_printf_common+0x8c>
 80067dc:	0023      	movs	r3, r4
 80067de:	3343      	adds	r3, #67	; 0x43
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	1e5a      	subs	r2, r3, #1
 80067e4:	4193      	sbcs	r3, r2
 80067e6:	6822      	ldr	r2, [r4, #0]
 80067e8:	0692      	lsls	r2, r2, #26
 80067ea:	d430      	bmi.n	800684e <_printf_common+0xae>
 80067ec:	0022      	movs	r2, r4
 80067ee:	9901      	ldr	r1, [sp, #4]
 80067f0:	9800      	ldr	r0, [sp, #0]
 80067f2:	9d08      	ldr	r5, [sp, #32]
 80067f4:	3243      	adds	r2, #67	; 0x43
 80067f6:	47a8      	blx	r5
 80067f8:	3001      	adds	r0, #1
 80067fa:	d025      	beq.n	8006848 <_printf_common+0xa8>
 80067fc:	2206      	movs	r2, #6
 80067fe:	6823      	ldr	r3, [r4, #0]
 8006800:	2500      	movs	r5, #0
 8006802:	4013      	ands	r3, r2
 8006804:	2b04      	cmp	r3, #4
 8006806:	d105      	bne.n	8006814 <_printf_common+0x74>
 8006808:	6833      	ldr	r3, [r6, #0]
 800680a:	68e5      	ldr	r5, [r4, #12]
 800680c:	1aed      	subs	r5, r5, r3
 800680e:	43eb      	mvns	r3, r5
 8006810:	17db      	asrs	r3, r3, #31
 8006812:	401d      	ands	r5, r3
 8006814:	68a3      	ldr	r3, [r4, #8]
 8006816:	6922      	ldr	r2, [r4, #16]
 8006818:	4293      	cmp	r3, r2
 800681a:	dd01      	ble.n	8006820 <_printf_common+0x80>
 800681c:	1a9b      	subs	r3, r3, r2
 800681e:	18ed      	adds	r5, r5, r3
 8006820:	2600      	movs	r6, #0
 8006822:	42b5      	cmp	r5, r6
 8006824:	d120      	bne.n	8006868 <_printf_common+0xc8>
 8006826:	2000      	movs	r0, #0
 8006828:	e010      	b.n	800684c <_printf_common+0xac>
 800682a:	3501      	adds	r5, #1
 800682c:	68e3      	ldr	r3, [r4, #12]
 800682e:	6832      	ldr	r2, [r6, #0]
 8006830:	1a9b      	subs	r3, r3, r2
 8006832:	42ab      	cmp	r3, r5
 8006834:	ddd2      	ble.n	80067dc <_printf_common+0x3c>
 8006836:	0022      	movs	r2, r4
 8006838:	2301      	movs	r3, #1
 800683a:	9901      	ldr	r1, [sp, #4]
 800683c:	9800      	ldr	r0, [sp, #0]
 800683e:	9f08      	ldr	r7, [sp, #32]
 8006840:	3219      	adds	r2, #25
 8006842:	47b8      	blx	r7
 8006844:	3001      	adds	r0, #1
 8006846:	d1f0      	bne.n	800682a <_printf_common+0x8a>
 8006848:	2001      	movs	r0, #1
 800684a:	4240      	negs	r0, r0
 800684c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800684e:	2030      	movs	r0, #48	; 0x30
 8006850:	18e1      	adds	r1, r4, r3
 8006852:	3143      	adds	r1, #67	; 0x43
 8006854:	7008      	strb	r0, [r1, #0]
 8006856:	0021      	movs	r1, r4
 8006858:	1c5a      	adds	r2, r3, #1
 800685a:	3145      	adds	r1, #69	; 0x45
 800685c:	7809      	ldrb	r1, [r1, #0]
 800685e:	18a2      	adds	r2, r4, r2
 8006860:	3243      	adds	r2, #67	; 0x43
 8006862:	3302      	adds	r3, #2
 8006864:	7011      	strb	r1, [r2, #0]
 8006866:	e7c1      	b.n	80067ec <_printf_common+0x4c>
 8006868:	0022      	movs	r2, r4
 800686a:	2301      	movs	r3, #1
 800686c:	9901      	ldr	r1, [sp, #4]
 800686e:	9800      	ldr	r0, [sp, #0]
 8006870:	9f08      	ldr	r7, [sp, #32]
 8006872:	321a      	adds	r2, #26
 8006874:	47b8      	blx	r7
 8006876:	3001      	adds	r0, #1
 8006878:	d0e6      	beq.n	8006848 <_printf_common+0xa8>
 800687a:	3601      	adds	r6, #1
 800687c:	e7d1      	b.n	8006822 <_printf_common+0x82>
	...

08006880 <_printf_i>:
 8006880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006882:	b08b      	sub	sp, #44	; 0x2c
 8006884:	9206      	str	r2, [sp, #24]
 8006886:	000a      	movs	r2, r1
 8006888:	3243      	adds	r2, #67	; 0x43
 800688a:	9307      	str	r3, [sp, #28]
 800688c:	9005      	str	r0, [sp, #20]
 800688e:	9204      	str	r2, [sp, #16]
 8006890:	7e0a      	ldrb	r2, [r1, #24]
 8006892:	000c      	movs	r4, r1
 8006894:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006896:	2a78      	cmp	r2, #120	; 0x78
 8006898:	d809      	bhi.n	80068ae <_printf_i+0x2e>
 800689a:	2a62      	cmp	r2, #98	; 0x62
 800689c:	d80b      	bhi.n	80068b6 <_printf_i+0x36>
 800689e:	2a00      	cmp	r2, #0
 80068a0:	d100      	bne.n	80068a4 <_printf_i+0x24>
 80068a2:	e0be      	b.n	8006a22 <_printf_i+0x1a2>
 80068a4:	497c      	ldr	r1, [pc, #496]	; (8006a98 <_printf_i+0x218>)
 80068a6:	9103      	str	r1, [sp, #12]
 80068a8:	2a58      	cmp	r2, #88	; 0x58
 80068aa:	d100      	bne.n	80068ae <_printf_i+0x2e>
 80068ac:	e093      	b.n	80069d6 <_printf_i+0x156>
 80068ae:	0026      	movs	r6, r4
 80068b0:	3642      	adds	r6, #66	; 0x42
 80068b2:	7032      	strb	r2, [r6, #0]
 80068b4:	e022      	b.n	80068fc <_printf_i+0x7c>
 80068b6:	0010      	movs	r0, r2
 80068b8:	3863      	subs	r0, #99	; 0x63
 80068ba:	2815      	cmp	r0, #21
 80068bc:	d8f7      	bhi.n	80068ae <_printf_i+0x2e>
 80068be:	f7f9 fc2b 	bl	8000118 <__gnu_thumb1_case_shi>
 80068c2:	0016      	.short	0x0016
 80068c4:	fff6001f 	.word	0xfff6001f
 80068c8:	fff6fff6 	.word	0xfff6fff6
 80068cc:	001ffff6 	.word	0x001ffff6
 80068d0:	fff6fff6 	.word	0xfff6fff6
 80068d4:	fff6fff6 	.word	0xfff6fff6
 80068d8:	003600a3 	.word	0x003600a3
 80068dc:	fff60083 	.word	0xfff60083
 80068e0:	00b4fff6 	.word	0x00b4fff6
 80068e4:	0036fff6 	.word	0x0036fff6
 80068e8:	fff6fff6 	.word	0xfff6fff6
 80068ec:	0087      	.short	0x0087
 80068ee:	0026      	movs	r6, r4
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	3642      	adds	r6, #66	; 0x42
 80068f4:	1d11      	adds	r1, r2, #4
 80068f6:	6019      	str	r1, [r3, #0]
 80068f8:	6813      	ldr	r3, [r2, #0]
 80068fa:	7033      	strb	r3, [r6, #0]
 80068fc:	2301      	movs	r3, #1
 80068fe:	e0a2      	b.n	8006a46 <_printf_i+0x1c6>
 8006900:	6818      	ldr	r0, [r3, #0]
 8006902:	6809      	ldr	r1, [r1, #0]
 8006904:	1d02      	adds	r2, r0, #4
 8006906:	060d      	lsls	r5, r1, #24
 8006908:	d50b      	bpl.n	8006922 <_printf_i+0xa2>
 800690a:	6805      	ldr	r5, [r0, #0]
 800690c:	601a      	str	r2, [r3, #0]
 800690e:	2d00      	cmp	r5, #0
 8006910:	da03      	bge.n	800691a <_printf_i+0x9a>
 8006912:	232d      	movs	r3, #45	; 0x2d
 8006914:	9a04      	ldr	r2, [sp, #16]
 8006916:	426d      	negs	r5, r5
 8006918:	7013      	strb	r3, [r2, #0]
 800691a:	4b5f      	ldr	r3, [pc, #380]	; (8006a98 <_printf_i+0x218>)
 800691c:	270a      	movs	r7, #10
 800691e:	9303      	str	r3, [sp, #12]
 8006920:	e01b      	b.n	800695a <_printf_i+0xda>
 8006922:	6805      	ldr	r5, [r0, #0]
 8006924:	601a      	str	r2, [r3, #0]
 8006926:	0649      	lsls	r1, r1, #25
 8006928:	d5f1      	bpl.n	800690e <_printf_i+0x8e>
 800692a:	b22d      	sxth	r5, r5
 800692c:	e7ef      	b.n	800690e <_printf_i+0x8e>
 800692e:	680d      	ldr	r5, [r1, #0]
 8006930:	6819      	ldr	r1, [r3, #0]
 8006932:	1d08      	adds	r0, r1, #4
 8006934:	6018      	str	r0, [r3, #0]
 8006936:	062e      	lsls	r6, r5, #24
 8006938:	d501      	bpl.n	800693e <_printf_i+0xbe>
 800693a:	680d      	ldr	r5, [r1, #0]
 800693c:	e003      	b.n	8006946 <_printf_i+0xc6>
 800693e:	066d      	lsls	r5, r5, #25
 8006940:	d5fb      	bpl.n	800693a <_printf_i+0xba>
 8006942:	680d      	ldr	r5, [r1, #0]
 8006944:	b2ad      	uxth	r5, r5
 8006946:	4b54      	ldr	r3, [pc, #336]	; (8006a98 <_printf_i+0x218>)
 8006948:	2708      	movs	r7, #8
 800694a:	9303      	str	r3, [sp, #12]
 800694c:	2a6f      	cmp	r2, #111	; 0x6f
 800694e:	d000      	beq.n	8006952 <_printf_i+0xd2>
 8006950:	3702      	adds	r7, #2
 8006952:	0023      	movs	r3, r4
 8006954:	2200      	movs	r2, #0
 8006956:	3343      	adds	r3, #67	; 0x43
 8006958:	701a      	strb	r2, [r3, #0]
 800695a:	6863      	ldr	r3, [r4, #4]
 800695c:	60a3      	str	r3, [r4, #8]
 800695e:	2b00      	cmp	r3, #0
 8006960:	db03      	blt.n	800696a <_printf_i+0xea>
 8006962:	2104      	movs	r1, #4
 8006964:	6822      	ldr	r2, [r4, #0]
 8006966:	438a      	bics	r2, r1
 8006968:	6022      	str	r2, [r4, #0]
 800696a:	2d00      	cmp	r5, #0
 800696c:	d102      	bne.n	8006974 <_printf_i+0xf4>
 800696e:	9e04      	ldr	r6, [sp, #16]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00c      	beq.n	800698e <_printf_i+0x10e>
 8006974:	9e04      	ldr	r6, [sp, #16]
 8006976:	0028      	movs	r0, r5
 8006978:	0039      	movs	r1, r7
 800697a:	f7f9 fc5d 	bl	8000238 <__aeabi_uidivmod>
 800697e:	9b03      	ldr	r3, [sp, #12]
 8006980:	3e01      	subs	r6, #1
 8006982:	5c5b      	ldrb	r3, [r3, r1]
 8006984:	7033      	strb	r3, [r6, #0]
 8006986:	002b      	movs	r3, r5
 8006988:	0005      	movs	r5, r0
 800698a:	429f      	cmp	r7, r3
 800698c:	d9f3      	bls.n	8006976 <_printf_i+0xf6>
 800698e:	2f08      	cmp	r7, #8
 8006990:	d109      	bne.n	80069a6 <_printf_i+0x126>
 8006992:	6823      	ldr	r3, [r4, #0]
 8006994:	07db      	lsls	r3, r3, #31
 8006996:	d506      	bpl.n	80069a6 <_printf_i+0x126>
 8006998:	6862      	ldr	r2, [r4, #4]
 800699a:	6923      	ldr	r3, [r4, #16]
 800699c:	429a      	cmp	r2, r3
 800699e:	dc02      	bgt.n	80069a6 <_printf_i+0x126>
 80069a0:	2330      	movs	r3, #48	; 0x30
 80069a2:	3e01      	subs	r6, #1
 80069a4:	7033      	strb	r3, [r6, #0]
 80069a6:	9b04      	ldr	r3, [sp, #16]
 80069a8:	1b9b      	subs	r3, r3, r6
 80069aa:	6123      	str	r3, [r4, #16]
 80069ac:	9b07      	ldr	r3, [sp, #28]
 80069ae:	0021      	movs	r1, r4
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	9805      	ldr	r0, [sp, #20]
 80069b4:	9b06      	ldr	r3, [sp, #24]
 80069b6:	aa09      	add	r2, sp, #36	; 0x24
 80069b8:	f7ff fef2 	bl	80067a0 <_printf_common>
 80069bc:	3001      	adds	r0, #1
 80069be:	d147      	bne.n	8006a50 <_printf_i+0x1d0>
 80069c0:	2001      	movs	r0, #1
 80069c2:	4240      	negs	r0, r0
 80069c4:	b00b      	add	sp, #44	; 0x2c
 80069c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069c8:	2220      	movs	r2, #32
 80069ca:	6809      	ldr	r1, [r1, #0]
 80069cc:	430a      	orrs	r2, r1
 80069ce:	6022      	str	r2, [r4, #0]
 80069d0:	2278      	movs	r2, #120	; 0x78
 80069d2:	4932      	ldr	r1, [pc, #200]	; (8006a9c <_printf_i+0x21c>)
 80069d4:	9103      	str	r1, [sp, #12]
 80069d6:	0021      	movs	r1, r4
 80069d8:	3145      	adds	r1, #69	; 0x45
 80069da:	700a      	strb	r2, [r1, #0]
 80069dc:	6819      	ldr	r1, [r3, #0]
 80069de:	6822      	ldr	r2, [r4, #0]
 80069e0:	c920      	ldmia	r1!, {r5}
 80069e2:	0610      	lsls	r0, r2, #24
 80069e4:	d402      	bmi.n	80069ec <_printf_i+0x16c>
 80069e6:	0650      	lsls	r0, r2, #25
 80069e8:	d500      	bpl.n	80069ec <_printf_i+0x16c>
 80069ea:	b2ad      	uxth	r5, r5
 80069ec:	6019      	str	r1, [r3, #0]
 80069ee:	07d3      	lsls	r3, r2, #31
 80069f0:	d502      	bpl.n	80069f8 <_printf_i+0x178>
 80069f2:	2320      	movs	r3, #32
 80069f4:	4313      	orrs	r3, r2
 80069f6:	6023      	str	r3, [r4, #0]
 80069f8:	2710      	movs	r7, #16
 80069fa:	2d00      	cmp	r5, #0
 80069fc:	d1a9      	bne.n	8006952 <_printf_i+0xd2>
 80069fe:	2220      	movs	r2, #32
 8006a00:	6823      	ldr	r3, [r4, #0]
 8006a02:	4393      	bics	r3, r2
 8006a04:	6023      	str	r3, [r4, #0]
 8006a06:	e7a4      	b.n	8006952 <_printf_i+0xd2>
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	680d      	ldr	r5, [r1, #0]
 8006a0c:	1d10      	adds	r0, r2, #4
 8006a0e:	6949      	ldr	r1, [r1, #20]
 8006a10:	6018      	str	r0, [r3, #0]
 8006a12:	6813      	ldr	r3, [r2, #0]
 8006a14:	062e      	lsls	r6, r5, #24
 8006a16:	d501      	bpl.n	8006a1c <_printf_i+0x19c>
 8006a18:	6019      	str	r1, [r3, #0]
 8006a1a:	e002      	b.n	8006a22 <_printf_i+0x1a2>
 8006a1c:	066d      	lsls	r5, r5, #25
 8006a1e:	d5fb      	bpl.n	8006a18 <_printf_i+0x198>
 8006a20:	8019      	strh	r1, [r3, #0]
 8006a22:	2300      	movs	r3, #0
 8006a24:	9e04      	ldr	r6, [sp, #16]
 8006a26:	6123      	str	r3, [r4, #16]
 8006a28:	e7c0      	b.n	80069ac <_printf_i+0x12c>
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	1d11      	adds	r1, r2, #4
 8006a2e:	6019      	str	r1, [r3, #0]
 8006a30:	6816      	ldr	r6, [r2, #0]
 8006a32:	2100      	movs	r1, #0
 8006a34:	0030      	movs	r0, r6
 8006a36:	6862      	ldr	r2, [r4, #4]
 8006a38:	f000 f9a0 	bl	8006d7c <memchr>
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	d001      	beq.n	8006a44 <_printf_i+0x1c4>
 8006a40:	1b80      	subs	r0, r0, r6
 8006a42:	6060      	str	r0, [r4, #4]
 8006a44:	6863      	ldr	r3, [r4, #4]
 8006a46:	6123      	str	r3, [r4, #16]
 8006a48:	2300      	movs	r3, #0
 8006a4a:	9a04      	ldr	r2, [sp, #16]
 8006a4c:	7013      	strb	r3, [r2, #0]
 8006a4e:	e7ad      	b.n	80069ac <_printf_i+0x12c>
 8006a50:	0032      	movs	r2, r6
 8006a52:	6923      	ldr	r3, [r4, #16]
 8006a54:	9906      	ldr	r1, [sp, #24]
 8006a56:	9805      	ldr	r0, [sp, #20]
 8006a58:	9d07      	ldr	r5, [sp, #28]
 8006a5a:	47a8      	blx	r5
 8006a5c:	3001      	adds	r0, #1
 8006a5e:	d0af      	beq.n	80069c0 <_printf_i+0x140>
 8006a60:	6823      	ldr	r3, [r4, #0]
 8006a62:	079b      	lsls	r3, r3, #30
 8006a64:	d415      	bmi.n	8006a92 <_printf_i+0x212>
 8006a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a68:	68e0      	ldr	r0, [r4, #12]
 8006a6a:	4298      	cmp	r0, r3
 8006a6c:	daaa      	bge.n	80069c4 <_printf_i+0x144>
 8006a6e:	0018      	movs	r0, r3
 8006a70:	e7a8      	b.n	80069c4 <_printf_i+0x144>
 8006a72:	0022      	movs	r2, r4
 8006a74:	2301      	movs	r3, #1
 8006a76:	9906      	ldr	r1, [sp, #24]
 8006a78:	9805      	ldr	r0, [sp, #20]
 8006a7a:	9e07      	ldr	r6, [sp, #28]
 8006a7c:	3219      	adds	r2, #25
 8006a7e:	47b0      	blx	r6
 8006a80:	3001      	adds	r0, #1
 8006a82:	d09d      	beq.n	80069c0 <_printf_i+0x140>
 8006a84:	3501      	adds	r5, #1
 8006a86:	68e3      	ldr	r3, [r4, #12]
 8006a88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a8a:	1a9b      	subs	r3, r3, r2
 8006a8c:	42ab      	cmp	r3, r5
 8006a8e:	dcf0      	bgt.n	8006a72 <_printf_i+0x1f2>
 8006a90:	e7e9      	b.n	8006a66 <_printf_i+0x1e6>
 8006a92:	2500      	movs	r5, #0
 8006a94:	e7f7      	b.n	8006a86 <_printf_i+0x206>
 8006a96:	46c0      	nop			; (mov r8, r8)
 8006a98:	0800707d 	.word	0x0800707d
 8006a9c:	0800708e 	.word	0x0800708e

08006aa0 <__sflush_r>:
 8006aa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006aa2:	898b      	ldrh	r3, [r1, #12]
 8006aa4:	0005      	movs	r5, r0
 8006aa6:	000c      	movs	r4, r1
 8006aa8:	071a      	lsls	r2, r3, #28
 8006aaa:	d45c      	bmi.n	8006b66 <__sflush_r+0xc6>
 8006aac:	684a      	ldr	r2, [r1, #4]
 8006aae:	2a00      	cmp	r2, #0
 8006ab0:	dc04      	bgt.n	8006abc <__sflush_r+0x1c>
 8006ab2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006ab4:	2a00      	cmp	r2, #0
 8006ab6:	dc01      	bgt.n	8006abc <__sflush_r+0x1c>
 8006ab8:	2000      	movs	r0, #0
 8006aba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006abc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006abe:	2f00      	cmp	r7, #0
 8006ac0:	d0fa      	beq.n	8006ab8 <__sflush_r+0x18>
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	2080      	movs	r0, #128	; 0x80
 8006ac6:	682e      	ldr	r6, [r5, #0]
 8006ac8:	602a      	str	r2, [r5, #0]
 8006aca:	001a      	movs	r2, r3
 8006acc:	0140      	lsls	r0, r0, #5
 8006ace:	6a21      	ldr	r1, [r4, #32]
 8006ad0:	4002      	ands	r2, r0
 8006ad2:	4203      	tst	r3, r0
 8006ad4:	d034      	beq.n	8006b40 <__sflush_r+0xa0>
 8006ad6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ad8:	89a3      	ldrh	r3, [r4, #12]
 8006ada:	075b      	lsls	r3, r3, #29
 8006adc:	d506      	bpl.n	8006aec <__sflush_r+0x4c>
 8006ade:	6863      	ldr	r3, [r4, #4]
 8006ae0:	1ac0      	subs	r0, r0, r3
 8006ae2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d001      	beq.n	8006aec <__sflush_r+0x4c>
 8006ae8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006aea:	1ac0      	subs	r0, r0, r3
 8006aec:	0002      	movs	r2, r0
 8006aee:	2300      	movs	r3, #0
 8006af0:	0028      	movs	r0, r5
 8006af2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006af4:	6a21      	ldr	r1, [r4, #32]
 8006af6:	47b8      	blx	r7
 8006af8:	89a2      	ldrh	r2, [r4, #12]
 8006afa:	1c43      	adds	r3, r0, #1
 8006afc:	d106      	bne.n	8006b0c <__sflush_r+0x6c>
 8006afe:	6829      	ldr	r1, [r5, #0]
 8006b00:	291d      	cmp	r1, #29
 8006b02:	d82c      	bhi.n	8006b5e <__sflush_r+0xbe>
 8006b04:	4b2a      	ldr	r3, [pc, #168]	; (8006bb0 <__sflush_r+0x110>)
 8006b06:	410b      	asrs	r3, r1
 8006b08:	07db      	lsls	r3, r3, #31
 8006b0a:	d428      	bmi.n	8006b5e <__sflush_r+0xbe>
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	6063      	str	r3, [r4, #4]
 8006b10:	6923      	ldr	r3, [r4, #16]
 8006b12:	6023      	str	r3, [r4, #0]
 8006b14:	04d2      	lsls	r2, r2, #19
 8006b16:	d505      	bpl.n	8006b24 <__sflush_r+0x84>
 8006b18:	1c43      	adds	r3, r0, #1
 8006b1a:	d102      	bne.n	8006b22 <__sflush_r+0x82>
 8006b1c:	682b      	ldr	r3, [r5, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d100      	bne.n	8006b24 <__sflush_r+0x84>
 8006b22:	6560      	str	r0, [r4, #84]	; 0x54
 8006b24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b26:	602e      	str	r6, [r5, #0]
 8006b28:	2900      	cmp	r1, #0
 8006b2a:	d0c5      	beq.n	8006ab8 <__sflush_r+0x18>
 8006b2c:	0023      	movs	r3, r4
 8006b2e:	3344      	adds	r3, #68	; 0x44
 8006b30:	4299      	cmp	r1, r3
 8006b32:	d002      	beq.n	8006b3a <__sflush_r+0x9a>
 8006b34:	0028      	movs	r0, r5
 8006b36:	f7ff fbf1 	bl	800631c <_free_r>
 8006b3a:	2000      	movs	r0, #0
 8006b3c:	6360      	str	r0, [r4, #52]	; 0x34
 8006b3e:	e7bc      	b.n	8006aba <__sflush_r+0x1a>
 8006b40:	2301      	movs	r3, #1
 8006b42:	0028      	movs	r0, r5
 8006b44:	47b8      	blx	r7
 8006b46:	1c43      	adds	r3, r0, #1
 8006b48:	d1c6      	bne.n	8006ad8 <__sflush_r+0x38>
 8006b4a:	682b      	ldr	r3, [r5, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d0c3      	beq.n	8006ad8 <__sflush_r+0x38>
 8006b50:	2b1d      	cmp	r3, #29
 8006b52:	d001      	beq.n	8006b58 <__sflush_r+0xb8>
 8006b54:	2b16      	cmp	r3, #22
 8006b56:	d101      	bne.n	8006b5c <__sflush_r+0xbc>
 8006b58:	602e      	str	r6, [r5, #0]
 8006b5a:	e7ad      	b.n	8006ab8 <__sflush_r+0x18>
 8006b5c:	89a2      	ldrh	r2, [r4, #12]
 8006b5e:	2340      	movs	r3, #64	; 0x40
 8006b60:	4313      	orrs	r3, r2
 8006b62:	81a3      	strh	r3, [r4, #12]
 8006b64:	e7a9      	b.n	8006aba <__sflush_r+0x1a>
 8006b66:	690e      	ldr	r6, [r1, #16]
 8006b68:	2e00      	cmp	r6, #0
 8006b6a:	d0a5      	beq.n	8006ab8 <__sflush_r+0x18>
 8006b6c:	680f      	ldr	r7, [r1, #0]
 8006b6e:	600e      	str	r6, [r1, #0]
 8006b70:	1bba      	subs	r2, r7, r6
 8006b72:	9201      	str	r2, [sp, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	079b      	lsls	r3, r3, #30
 8006b78:	d100      	bne.n	8006b7c <__sflush_r+0xdc>
 8006b7a:	694a      	ldr	r2, [r1, #20]
 8006b7c:	60a2      	str	r2, [r4, #8]
 8006b7e:	9b01      	ldr	r3, [sp, #4]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	dd99      	ble.n	8006ab8 <__sflush_r+0x18>
 8006b84:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006b86:	0032      	movs	r2, r6
 8006b88:	001f      	movs	r7, r3
 8006b8a:	0028      	movs	r0, r5
 8006b8c:	9b01      	ldr	r3, [sp, #4]
 8006b8e:	6a21      	ldr	r1, [r4, #32]
 8006b90:	47b8      	blx	r7
 8006b92:	2800      	cmp	r0, #0
 8006b94:	dc06      	bgt.n	8006ba4 <__sflush_r+0x104>
 8006b96:	2340      	movs	r3, #64	; 0x40
 8006b98:	2001      	movs	r0, #1
 8006b9a:	89a2      	ldrh	r2, [r4, #12]
 8006b9c:	4240      	negs	r0, r0
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	81a3      	strh	r3, [r4, #12]
 8006ba2:	e78a      	b.n	8006aba <__sflush_r+0x1a>
 8006ba4:	9b01      	ldr	r3, [sp, #4]
 8006ba6:	1836      	adds	r6, r6, r0
 8006ba8:	1a1b      	subs	r3, r3, r0
 8006baa:	9301      	str	r3, [sp, #4]
 8006bac:	e7e7      	b.n	8006b7e <__sflush_r+0xde>
 8006bae:	46c0      	nop			; (mov r8, r8)
 8006bb0:	dfbffffe 	.word	0xdfbffffe

08006bb4 <_fflush_r>:
 8006bb4:	690b      	ldr	r3, [r1, #16]
 8006bb6:	b570      	push	{r4, r5, r6, lr}
 8006bb8:	0005      	movs	r5, r0
 8006bba:	000c      	movs	r4, r1
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d102      	bne.n	8006bc6 <_fflush_r+0x12>
 8006bc0:	2500      	movs	r5, #0
 8006bc2:	0028      	movs	r0, r5
 8006bc4:	bd70      	pop	{r4, r5, r6, pc}
 8006bc6:	2800      	cmp	r0, #0
 8006bc8:	d004      	beq.n	8006bd4 <_fflush_r+0x20>
 8006bca:	6a03      	ldr	r3, [r0, #32]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d101      	bne.n	8006bd4 <_fflush_r+0x20>
 8006bd0:	f7ff fa88 	bl	80060e4 <__sinit>
 8006bd4:	220c      	movs	r2, #12
 8006bd6:	5ea3      	ldrsh	r3, [r4, r2]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d0f1      	beq.n	8006bc0 <_fflush_r+0xc>
 8006bdc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006bde:	07d2      	lsls	r2, r2, #31
 8006be0:	d404      	bmi.n	8006bec <_fflush_r+0x38>
 8006be2:	059b      	lsls	r3, r3, #22
 8006be4:	d402      	bmi.n	8006bec <_fflush_r+0x38>
 8006be6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006be8:	f7ff fb8d 	bl	8006306 <__retarget_lock_acquire_recursive>
 8006bec:	0028      	movs	r0, r5
 8006bee:	0021      	movs	r1, r4
 8006bf0:	f7ff ff56 	bl	8006aa0 <__sflush_r>
 8006bf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bf6:	0005      	movs	r5, r0
 8006bf8:	07db      	lsls	r3, r3, #31
 8006bfa:	d4e2      	bmi.n	8006bc2 <_fflush_r+0xe>
 8006bfc:	89a3      	ldrh	r3, [r4, #12]
 8006bfe:	059b      	lsls	r3, r3, #22
 8006c00:	d4df      	bmi.n	8006bc2 <_fflush_r+0xe>
 8006c02:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c04:	f7ff fb80 	bl	8006308 <__retarget_lock_release_recursive>
 8006c08:	e7db      	b.n	8006bc2 <_fflush_r+0xe>

08006c0a <__swbuf_r>:
 8006c0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c0c:	0006      	movs	r6, r0
 8006c0e:	000d      	movs	r5, r1
 8006c10:	0014      	movs	r4, r2
 8006c12:	2800      	cmp	r0, #0
 8006c14:	d004      	beq.n	8006c20 <__swbuf_r+0x16>
 8006c16:	6a03      	ldr	r3, [r0, #32]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d101      	bne.n	8006c20 <__swbuf_r+0x16>
 8006c1c:	f7ff fa62 	bl	80060e4 <__sinit>
 8006c20:	69a3      	ldr	r3, [r4, #24]
 8006c22:	60a3      	str	r3, [r4, #8]
 8006c24:	89a3      	ldrh	r3, [r4, #12]
 8006c26:	071b      	lsls	r3, r3, #28
 8006c28:	d528      	bpl.n	8006c7c <__swbuf_r+0x72>
 8006c2a:	6923      	ldr	r3, [r4, #16]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d025      	beq.n	8006c7c <__swbuf_r+0x72>
 8006c30:	6923      	ldr	r3, [r4, #16]
 8006c32:	6820      	ldr	r0, [r4, #0]
 8006c34:	b2ef      	uxtb	r7, r5
 8006c36:	1ac0      	subs	r0, r0, r3
 8006c38:	6963      	ldr	r3, [r4, #20]
 8006c3a:	b2ed      	uxtb	r5, r5
 8006c3c:	4283      	cmp	r3, r0
 8006c3e:	dc05      	bgt.n	8006c4c <__swbuf_r+0x42>
 8006c40:	0021      	movs	r1, r4
 8006c42:	0030      	movs	r0, r6
 8006c44:	f7ff ffb6 	bl	8006bb4 <_fflush_r>
 8006c48:	2800      	cmp	r0, #0
 8006c4a:	d11d      	bne.n	8006c88 <__swbuf_r+0x7e>
 8006c4c:	68a3      	ldr	r3, [r4, #8]
 8006c4e:	3001      	adds	r0, #1
 8006c50:	3b01      	subs	r3, #1
 8006c52:	60a3      	str	r3, [r4, #8]
 8006c54:	6823      	ldr	r3, [r4, #0]
 8006c56:	1c5a      	adds	r2, r3, #1
 8006c58:	6022      	str	r2, [r4, #0]
 8006c5a:	701f      	strb	r7, [r3, #0]
 8006c5c:	6963      	ldr	r3, [r4, #20]
 8006c5e:	4283      	cmp	r3, r0
 8006c60:	d004      	beq.n	8006c6c <__swbuf_r+0x62>
 8006c62:	89a3      	ldrh	r3, [r4, #12]
 8006c64:	07db      	lsls	r3, r3, #31
 8006c66:	d507      	bpl.n	8006c78 <__swbuf_r+0x6e>
 8006c68:	2d0a      	cmp	r5, #10
 8006c6a:	d105      	bne.n	8006c78 <__swbuf_r+0x6e>
 8006c6c:	0021      	movs	r1, r4
 8006c6e:	0030      	movs	r0, r6
 8006c70:	f7ff ffa0 	bl	8006bb4 <_fflush_r>
 8006c74:	2800      	cmp	r0, #0
 8006c76:	d107      	bne.n	8006c88 <__swbuf_r+0x7e>
 8006c78:	0028      	movs	r0, r5
 8006c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c7c:	0021      	movs	r1, r4
 8006c7e:	0030      	movs	r0, r6
 8006c80:	f000 f806 	bl	8006c90 <__swsetup_r>
 8006c84:	2800      	cmp	r0, #0
 8006c86:	d0d3      	beq.n	8006c30 <__swbuf_r+0x26>
 8006c88:	2501      	movs	r5, #1
 8006c8a:	426d      	negs	r5, r5
 8006c8c:	e7f4      	b.n	8006c78 <__swbuf_r+0x6e>
	...

08006c90 <__swsetup_r>:
 8006c90:	4b30      	ldr	r3, [pc, #192]	; (8006d54 <__swsetup_r+0xc4>)
 8006c92:	b570      	push	{r4, r5, r6, lr}
 8006c94:	0005      	movs	r5, r0
 8006c96:	6818      	ldr	r0, [r3, #0]
 8006c98:	000c      	movs	r4, r1
 8006c9a:	2800      	cmp	r0, #0
 8006c9c:	d004      	beq.n	8006ca8 <__swsetup_r+0x18>
 8006c9e:	6a03      	ldr	r3, [r0, #32]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d101      	bne.n	8006ca8 <__swsetup_r+0x18>
 8006ca4:	f7ff fa1e 	bl	80060e4 <__sinit>
 8006ca8:	230c      	movs	r3, #12
 8006caa:	5ee2      	ldrsh	r2, [r4, r3]
 8006cac:	b293      	uxth	r3, r2
 8006cae:	0711      	lsls	r1, r2, #28
 8006cb0:	d423      	bmi.n	8006cfa <__swsetup_r+0x6a>
 8006cb2:	06d9      	lsls	r1, r3, #27
 8006cb4:	d407      	bmi.n	8006cc6 <__swsetup_r+0x36>
 8006cb6:	2309      	movs	r3, #9
 8006cb8:	2001      	movs	r0, #1
 8006cba:	602b      	str	r3, [r5, #0]
 8006cbc:	3337      	adds	r3, #55	; 0x37
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	81a3      	strh	r3, [r4, #12]
 8006cc2:	4240      	negs	r0, r0
 8006cc4:	bd70      	pop	{r4, r5, r6, pc}
 8006cc6:	075b      	lsls	r3, r3, #29
 8006cc8:	d513      	bpl.n	8006cf2 <__swsetup_r+0x62>
 8006cca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ccc:	2900      	cmp	r1, #0
 8006cce:	d008      	beq.n	8006ce2 <__swsetup_r+0x52>
 8006cd0:	0023      	movs	r3, r4
 8006cd2:	3344      	adds	r3, #68	; 0x44
 8006cd4:	4299      	cmp	r1, r3
 8006cd6:	d002      	beq.n	8006cde <__swsetup_r+0x4e>
 8006cd8:	0028      	movs	r0, r5
 8006cda:	f7ff fb1f 	bl	800631c <_free_r>
 8006cde:	2300      	movs	r3, #0
 8006ce0:	6363      	str	r3, [r4, #52]	; 0x34
 8006ce2:	2224      	movs	r2, #36	; 0x24
 8006ce4:	89a3      	ldrh	r3, [r4, #12]
 8006ce6:	4393      	bics	r3, r2
 8006ce8:	81a3      	strh	r3, [r4, #12]
 8006cea:	2300      	movs	r3, #0
 8006cec:	6063      	str	r3, [r4, #4]
 8006cee:	6923      	ldr	r3, [r4, #16]
 8006cf0:	6023      	str	r3, [r4, #0]
 8006cf2:	2308      	movs	r3, #8
 8006cf4:	89a2      	ldrh	r2, [r4, #12]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	81a3      	strh	r3, [r4, #12]
 8006cfa:	6923      	ldr	r3, [r4, #16]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d10b      	bne.n	8006d18 <__swsetup_r+0x88>
 8006d00:	21a0      	movs	r1, #160	; 0xa0
 8006d02:	2280      	movs	r2, #128	; 0x80
 8006d04:	89a3      	ldrh	r3, [r4, #12]
 8006d06:	0089      	lsls	r1, r1, #2
 8006d08:	0092      	lsls	r2, r2, #2
 8006d0a:	400b      	ands	r3, r1
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d003      	beq.n	8006d18 <__swsetup_r+0x88>
 8006d10:	0021      	movs	r1, r4
 8006d12:	0028      	movs	r0, r5
 8006d14:	f000 f866 	bl	8006de4 <__smakebuf_r>
 8006d18:	220c      	movs	r2, #12
 8006d1a:	5ea3      	ldrsh	r3, [r4, r2]
 8006d1c:	2001      	movs	r0, #1
 8006d1e:	001a      	movs	r2, r3
 8006d20:	b299      	uxth	r1, r3
 8006d22:	4002      	ands	r2, r0
 8006d24:	4203      	tst	r3, r0
 8006d26:	d00f      	beq.n	8006d48 <__swsetup_r+0xb8>
 8006d28:	2200      	movs	r2, #0
 8006d2a:	60a2      	str	r2, [r4, #8]
 8006d2c:	6962      	ldr	r2, [r4, #20]
 8006d2e:	4252      	negs	r2, r2
 8006d30:	61a2      	str	r2, [r4, #24]
 8006d32:	2000      	movs	r0, #0
 8006d34:	6922      	ldr	r2, [r4, #16]
 8006d36:	4282      	cmp	r2, r0
 8006d38:	d1c4      	bne.n	8006cc4 <__swsetup_r+0x34>
 8006d3a:	0609      	lsls	r1, r1, #24
 8006d3c:	d5c2      	bpl.n	8006cc4 <__swsetup_r+0x34>
 8006d3e:	2240      	movs	r2, #64	; 0x40
 8006d40:	4313      	orrs	r3, r2
 8006d42:	81a3      	strh	r3, [r4, #12]
 8006d44:	3801      	subs	r0, #1
 8006d46:	e7bd      	b.n	8006cc4 <__swsetup_r+0x34>
 8006d48:	0788      	lsls	r0, r1, #30
 8006d4a:	d400      	bmi.n	8006d4e <__swsetup_r+0xbe>
 8006d4c:	6962      	ldr	r2, [r4, #20]
 8006d4e:	60a2      	str	r2, [r4, #8]
 8006d50:	e7ef      	b.n	8006d32 <__swsetup_r+0xa2>
 8006d52:	46c0      	nop			; (mov r8, r8)
 8006d54:	200000a4 	.word	0x200000a4

08006d58 <_sbrk_r>:
 8006d58:	2300      	movs	r3, #0
 8006d5a:	b570      	push	{r4, r5, r6, lr}
 8006d5c:	4d06      	ldr	r5, [pc, #24]	; (8006d78 <_sbrk_r+0x20>)
 8006d5e:	0004      	movs	r4, r0
 8006d60:	0008      	movs	r0, r1
 8006d62:	602b      	str	r3, [r5, #0]
 8006d64:	f7fb fde2 	bl	800292c <_sbrk>
 8006d68:	1c43      	adds	r3, r0, #1
 8006d6a:	d103      	bne.n	8006d74 <_sbrk_r+0x1c>
 8006d6c:	682b      	ldr	r3, [r5, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d000      	beq.n	8006d74 <_sbrk_r+0x1c>
 8006d72:	6023      	str	r3, [r4, #0]
 8006d74:	bd70      	pop	{r4, r5, r6, pc}
 8006d76:	46c0      	nop			; (mov r8, r8)
 8006d78:	20000440 	.word	0x20000440

08006d7c <memchr>:
 8006d7c:	b2c9      	uxtb	r1, r1
 8006d7e:	1882      	adds	r2, r0, r2
 8006d80:	4290      	cmp	r0, r2
 8006d82:	d101      	bne.n	8006d88 <memchr+0xc>
 8006d84:	2000      	movs	r0, #0
 8006d86:	4770      	bx	lr
 8006d88:	7803      	ldrb	r3, [r0, #0]
 8006d8a:	428b      	cmp	r3, r1
 8006d8c:	d0fb      	beq.n	8006d86 <memchr+0xa>
 8006d8e:	3001      	adds	r0, #1
 8006d90:	e7f6      	b.n	8006d80 <memchr+0x4>
	...

08006d94 <__swhatbuf_r>:
 8006d94:	b570      	push	{r4, r5, r6, lr}
 8006d96:	000e      	movs	r6, r1
 8006d98:	001d      	movs	r5, r3
 8006d9a:	230e      	movs	r3, #14
 8006d9c:	5ec9      	ldrsh	r1, [r1, r3]
 8006d9e:	0014      	movs	r4, r2
 8006da0:	b096      	sub	sp, #88	; 0x58
 8006da2:	2900      	cmp	r1, #0
 8006da4:	da0c      	bge.n	8006dc0 <__swhatbuf_r+0x2c>
 8006da6:	89b2      	ldrh	r2, [r6, #12]
 8006da8:	2380      	movs	r3, #128	; 0x80
 8006daa:	0011      	movs	r1, r2
 8006dac:	4019      	ands	r1, r3
 8006dae:	421a      	tst	r2, r3
 8006db0:	d013      	beq.n	8006dda <__swhatbuf_r+0x46>
 8006db2:	2100      	movs	r1, #0
 8006db4:	3b40      	subs	r3, #64	; 0x40
 8006db6:	2000      	movs	r0, #0
 8006db8:	6029      	str	r1, [r5, #0]
 8006dba:	6023      	str	r3, [r4, #0]
 8006dbc:	b016      	add	sp, #88	; 0x58
 8006dbe:	bd70      	pop	{r4, r5, r6, pc}
 8006dc0:	466a      	mov	r2, sp
 8006dc2:	f000 f84d 	bl	8006e60 <_fstat_r>
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	dbed      	blt.n	8006da6 <__swhatbuf_r+0x12>
 8006dca:	23f0      	movs	r3, #240	; 0xf0
 8006dcc:	9901      	ldr	r1, [sp, #4]
 8006dce:	021b      	lsls	r3, r3, #8
 8006dd0:	4019      	ands	r1, r3
 8006dd2:	4b03      	ldr	r3, [pc, #12]	; (8006de0 <__swhatbuf_r+0x4c>)
 8006dd4:	18c9      	adds	r1, r1, r3
 8006dd6:	424b      	negs	r3, r1
 8006dd8:	4159      	adcs	r1, r3
 8006dda:	2380      	movs	r3, #128	; 0x80
 8006ddc:	00db      	lsls	r3, r3, #3
 8006dde:	e7ea      	b.n	8006db6 <__swhatbuf_r+0x22>
 8006de0:	ffffe000 	.word	0xffffe000

08006de4 <__smakebuf_r>:
 8006de4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006de6:	2602      	movs	r6, #2
 8006de8:	898b      	ldrh	r3, [r1, #12]
 8006dea:	0005      	movs	r5, r0
 8006dec:	000c      	movs	r4, r1
 8006dee:	4233      	tst	r3, r6
 8006df0:	d006      	beq.n	8006e00 <__smakebuf_r+0x1c>
 8006df2:	0023      	movs	r3, r4
 8006df4:	3347      	adds	r3, #71	; 0x47
 8006df6:	6023      	str	r3, [r4, #0]
 8006df8:	6123      	str	r3, [r4, #16]
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	6163      	str	r3, [r4, #20]
 8006dfe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006e00:	466a      	mov	r2, sp
 8006e02:	ab01      	add	r3, sp, #4
 8006e04:	f7ff ffc6 	bl	8006d94 <__swhatbuf_r>
 8006e08:	9900      	ldr	r1, [sp, #0]
 8006e0a:	0007      	movs	r7, r0
 8006e0c:	0028      	movs	r0, r5
 8006e0e:	f7ff faf1 	bl	80063f4 <_malloc_r>
 8006e12:	2800      	cmp	r0, #0
 8006e14:	d108      	bne.n	8006e28 <__smakebuf_r+0x44>
 8006e16:	220c      	movs	r2, #12
 8006e18:	5ea3      	ldrsh	r3, [r4, r2]
 8006e1a:	059a      	lsls	r2, r3, #22
 8006e1c:	d4ef      	bmi.n	8006dfe <__smakebuf_r+0x1a>
 8006e1e:	2203      	movs	r2, #3
 8006e20:	4393      	bics	r3, r2
 8006e22:	431e      	orrs	r6, r3
 8006e24:	81a6      	strh	r6, [r4, #12]
 8006e26:	e7e4      	b.n	8006df2 <__smakebuf_r+0xe>
 8006e28:	2380      	movs	r3, #128	; 0x80
 8006e2a:	89a2      	ldrh	r2, [r4, #12]
 8006e2c:	6020      	str	r0, [r4, #0]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	81a3      	strh	r3, [r4, #12]
 8006e32:	9b00      	ldr	r3, [sp, #0]
 8006e34:	6120      	str	r0, [r4, #16]
 8006e36:	6163      	str	r3, [r4, #20]
 8006e38:	9b01      	ldr	r3, [sp, #4]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00c      	beq.n	8006e58 <__smakebuf_r+0x74>
 8006e3e:	0028      	movs	r0, r5
 8006e40:	230e      	movs	r3, #14
 8006e42:	5ee1      	ldrsh	r1, [r4, r3]
 8006e44:	f000 f81e 	bl	8006e84 <_isatty_r>
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	d005      	beq.n	8006e58 <__smakebuf_r+0x74>
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	89a2      	ldrh	r2, [r4, #12]
 8006e50:	439a      	bics	r2, r3
 8006e52:	3b02      	subs	r3, #2
 8006e54:	4313      	orrs	r3, r2
 8006e56:	81a3      	strh	r3, [r4, #12]
 8006e58:	89a3      	ldrh	r3, [r4, #12]
 8006e5a:	433b      	orrs	r3, r7
 8006e5c:	81a3      	strh	r3, [r4, #12]
 8006e5e:	e7ce      	b.n	8006dfe <__smakebuf_r+0x1a>

08006e60 <_fstat_r>:
 8006e60:	2300      	movs	r3, #0
 8006e62:	b570      	push	{r4, r5, r6, lr}
 8006e64:	4d06      	ldr	r5, [pc, #24]	; (8006e80 <_fstat_r+0x20>)
 8006e66:	0004      	movs	r4, r0
 8006e68:	0008      	movs	r0, r1
 8006e6a:	0011      	movs	r1, r2
 8006e6c:	602b      	str	r3, [r5, #0]
 8006e6e:	f7fb fd3a 	bl	80028e6 <_fstat>
 8006e72:	1c43      	adds	r3, r0, #1
 8006e74:	d103      	bne.n	8006e7e <_fstat_r+0x1e>
 8006e76:	682b      	ldr	r3, [r5, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d000      	beq.n	8006e7e <_fstat_r+0x1e>
 8006e7c:	6023      	str	r3, [r4, #0]
 8006e7e:	bd70      	pop	{r4, r5, r6, pc}
 8006e80:	20000440 	.word	0x20000440

08006e84 <_isatty_r>:
 8006e84:	2300      	movs	r3, #0
 8006e86:	b570      	push	{r4, r5, r6, lr}
 8006e88:	4d06      	ldr	r5, [pc, #24]	; (8006ea4 <_isatty_r+0x20>)
 8006e8a:	0004      	movs	r4, r0
 8006e8c:	0008      	movs	r0, r1
 8006e8e:	602b      	str	r3, [r5, #0]
 8006e90:	f7fb fd37 	bl	8002902 <_isatty>
 8006e94:	1c43      	adds	r3, r0, #1
 8006e96:	d103      	bne.n	8006ea0 <_isatty_r+0x1c>
 8006e98:	682b      	ldr	r3, [r5, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d000      	beq.n	8006ea0 <_isatty_r+0x1c>
 8006e9e:	6023      	str	r3, [r4, #0]
 8006ea0:	bd70      	pop	{r4, r5, r6, pc}
 8006ea2:	46c0      	nop			; (mov r8, r8)
 8006ea4:	20000440 	.word	0x20000440

08006ea8 <_init>:
 8006ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eaa:	46c0      	nop			; (mov r8, r8)
 8006eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eae:	bc08      	pop	{r3}
 8006eb0:	469e      	mov	lr, r3
 8006eb2:	4770      	bx	lr

08006eb4 <_fini>:
 8006eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eb6:	46c0      	nop			; (mov r8, r8)
 8006eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eba:	bc08      	pop	{r3}
 8006ebc:	469e      	mov	lr, r3
 8006ebe:	4770      	bx	lr
